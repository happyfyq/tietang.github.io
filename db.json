{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/m1.jpg","path":"images/m1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/images/185638fo3y9el8ie2ohese.jpg","path":"images/185638fo3y9el8ie2ohese.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"d34cc5b7877ad3f76d4e9aa0194dca214d0886e9","modified":1478660225000},{"_id":"source/CNAME","hash":"704f5291fe9f9f9d297c839806479c17e209a2d7","modified":1478660225000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1479972210000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1479972210000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1479972210000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1479972210000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1479972210000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1479972210000},{"_id":"themes/next/_config.yml","hash":"2e6d3132ba1dfbd385a13ad5e7c6abf994ad5fbb","modified":1479979536000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1479972210000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1479972210000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1479972210000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1479972210000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1479972210000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1478660225000},{"_id":"source/categories/index.md","hash":"294d1802502f5b81ac182231acc346304a566d2f","modified":1479975489000},{"_id":"source/images/m1.jpg","hash":"4975231d503be2c0b00ed01322b88d70574d3076","modified":1478660225000},{"_id":"source/about/index.md","hash":"75cbc514dd78b7419574eefa17b1a3d7b1766760","modified":1478660225000},{"_id":"source/_posts/.DS_Store","hash":"ae50929691b60c2af2ab2b5f0ae6e2ed89ad9fb5","modified":1478660225000},{"_id":"source/_posts/春天花会开.md","hash":"ef48ea849017084cde1c927b67a625edcfac1f8b","modified":1478660225000},{"_id":"source/tags/index.md","hash":"a1b7d6bd13f485f8f96e966d176804a1d15f5757","modified":1479975459000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1479972210000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1479972210000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1479972210000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1479972210000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1479972210000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1479972210000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1479972210000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1479972210000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1479972210000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1479972210000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1479972210000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1479972210000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1479972210000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1479972210000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1479972210000},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1479972210000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1479972210000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1479972210000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1479972210000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1479972210000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1479972210000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1479972210000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1479972210000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1479972210000},{"_id":"themes/next/source/favicon.ico","hash":"a5c41d966e5eef597a50b91f0b6a9bdf8ac80583","modified":1455933380000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1479972210000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1479972210000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1479972210000},{"_id":"themes/next/x.gitbak/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479972210000},{"_id":"themes/next/x.gitbak/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479972205000},{"_id":"themes/next/x.gitbak/config","hash":"dde65e02fccfc724601b816a138fd2d7d244c358","modified":1479972210000},{"_id":"themes/next/x.gitbak/index","hash":"dc5930a5c8fee4dd6139ba8167490ec1f3e26c43","modified":1479972538000},{"_id":"themes/next/x.gitbak/packed-refs","hash":"7f81838c24e48df647e1a5a9dfdbb8b19dffec08","modified":1479972210000},{"_id":"themes/next/x.gitbak/shallow","hash":"776e91b78b954875a8d38297e05b80eab20df4b9","modified":1479972209000},{"_id":"source/images/185638fo3y9el8ie2ohese.jpg","hash":"4d278765113277adc24d16fda2004d179911d5bc","modified":1478660225000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479972210000},{"_id":"source/_posts/hystrix/.DS_Store","hash":"f9b6497e91a13896b90b89dd7549838a791a5a17","modified":1478660225000},{"_id":"source/_posts/hystrix/Hystrix参数详解.md","hash":"f0a79b618f97690cf20bfb4719d570baa236d276","modified":1478660225000},{"_id":"source/_posts/hystrix/Hystrix是怎样工作的.md.todo","hash":"e73b5c93871b17e3ece23e6322974ed24af5391a","modified":1478660225000},{"_id":"source/_posts/hystrix/Hystrix简介.md","hash":"123c8b30be57d733d4c5b6e49d2483cf6929cc84","modified":1478660225000},{"_id":"source/_posts/hystrix/Hystrix降级模式总结.md","hash":"ff4ba6b939c0c07cb32da615766ef95e69d0519a","modified":1478660225000},{"_id":"source/_posts/hystrix/RestTemplate遇上Hystrix.md","hash":"33db7f4e658bd73de40e91215a0ee53104144a5c","modified":1479978647000},{"_id":"source/_posts/hystrix/怎样使用Hystrix.md.todo","hash":"fdc0dbfb2d18fdf7cb8b15be71d40c7b16cf35b1","modified":1478660225000},{"_id":"source/_posts/微服务/Feign使用性能优化.md","hash":"9eb416aac91ff5f85d2d8b4f43d80b2319f1ea0c","modified":1479978489000},{"_id":"source/_posts/微服务/微服务之API网关设计.md","hash":"a75c953e48774e8807ee7ca25c28c4c372ea7e55","modified":1478660225000},{"_id":"source/_posts/微服务/微服务下分布式事务问题.md","hash":"33648b18d4db077479f32c873ddb353e3e446be8","modified":1478660225000},{"_id":"source/_posts/微服务/微服务之Eureka服务发现.md","hash":"8b77140ac18a74949c55cb2392a7afbac5ea8dff","modified":1478660225000},{"_id":"source/_posts/微服务/微服务之spring-cloud分布式外部化和中心化配置管理.md","hash":"f0c7a54fa1664c12b4cc72832680e16fd24d2670","modified":1478660225000},{"_id":"source/_posts/微服务/微服务之微.md","hash":"f0449b998678386a2dabb0c4924f4f406fd7a64f","modified":1478660296000},{"_id":"source/_posts/微服务/微服务优缺点论述.md","hash":"73a9473b98eff79c6d22f29a0fe75c6214ec343d","modified":1478660225000},{"_id":"source/_posts/微服务/微服务实施spring-cloud中踩过的坑.md","hash":"7ead383fd250ac7cfcd49dc988977fc3136ea629","modified":1478660225000},{"_id":"source/_posts/微服务/微服务拆分实践.md","hash":"a16a0605bd23d6e3e826c918aeddc7ea0f21332e","modified":1478660225000},{"_id":"source/_posts/技术/.DS_Store","hash":"6a9f941481a966f9e939ba0d57cecaf1a09852a9","modified":1478660225000},{"_id":"source/_posts/技术/负载均衡之加权轮询算法.md","hash":"eec5cc90000f17b90605cdc482f6072f6528d9b0","modified":1479978540000},{"_id":"source/_posts/music/Matthew-Lien-Bleeding-Wolves.md","hash":"176287eb31802776c2d1202d8148d0c2ee944e13","modified":1478660225000},{"_id":"source/_posts/技术/软件开发中的单一职责.md","hash":"f9bf87818cfbd64d8e92b57aafc146a5f7b0aa25","modified":1478660225000},{"_id":"source/_posts/转载/.DS_Store","hash":"10a5f5e23ea5263475686bb72ec99254d8d3997d","modified":1478660225000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479972210000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479972210000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1479972210000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1479972210000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1479972210000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1479972210000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1479972210000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1479972210000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1479972210000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1479972210000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1a43dde8c7bc53891be26b915a172b1f01e6bc26","modified":1479972210000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1479972210000},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1479972210000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1479972210000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1479972210000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1479972210000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1479972210000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1479972210000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1479972210000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1479972210000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1479972210000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1479972210000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1479972210000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1479972210000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1479972210000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479972210000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1479972210000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1479972210000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1479972210000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1479972210000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1479972210000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1479972210000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1479972210000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479972210000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479972210000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1479972210000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1479972210000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479972210000},{"_id":"themes/next/x.gitbak/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1479972205000},{"_id":"themes/next/x.gitbak/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479972205000},{"_id":"themes/next/x.gitbak/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479972205000},{"_id":"themes/next/x.gitbak/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1479972205000},{"_id":"themes/next/x.gitbak/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479972205000},{"_id":"themes/next/x.gitbak/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1479972205000},{"_id":"themes/next/x.gitbak/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479972205000},{"_id":"themes/next/x.gitbak/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479972205000},{"_id":"themes/next/x.gitbak/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1479972205000},{"_id":"themes/next/x.gitbak/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479972205000},{"_id":"themes/next/x.gitbak/logs/HEAD","hash":"5621c106877f19ac62089b66e545544f6b48a77f","modified":1479972210000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479972210000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479972210000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479972210000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479972210000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479972210000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479972210000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479972210000},{"_id":"source/_posts/hystrix/images/.DS_Store","hash":"d3ed620ce95c9987592040ac15a4fd1e2ed1bdf0","modified":1478660225000},{"_id":"source/_posts/hystrix/images/circuit-identity-jitter-640.png","hash":"135da3a23c10948de618849d6494b0dfc433f2c6","modified":1478660225000},{"_id":"source/_posts/hystrix/images/circuit-identity-jitter.png","hash":"821d85ffcd3d26c7a887e1e44134c679314efe8e","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-direct-vs-turbine-640.png","hash":"276a9423acbda0686cd8b5a145d50bf8970fca77","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-example-open-circuit-640.png","hash":"fd81fc8bcd35391f9121907ce45efcdcda3a385d","modified":1478660225000},{"_id":"source/_posts/hystrix/images/fallback-original.png","hash":"3e32d8498d66d1dab0d8b4fcb9f5637536bba2b2","modified":1478660225000},{"_id":"source/_posts/hystrix/images/fallback-640.png","hash":"c0d6c9bf527dde8fa08355e05b38b8b95f8c0f6b","modified":1478660225000},{"_id":"source/_posts/hystrix/images/fallback-via-command-640.png","hash":"b126e4a3c058c320fc7d5bbcabef89650e3af2bc","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-single-row-640.png","hash":"27f4fb06ec60fdb17245c209be28b229155939ab","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-small.png","hash":"56efa7fcc51b9e83f4349411926d31fd699a0a5b","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-640.png","hash":"bf8298330f1dab68b6be738af506ced4d471f208","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-tiny.png","hash":"91a5f1685da6faa6339257f58757af739c70df9c","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tiny.png","hash":"230ea59eacd045eef9bb24a8276c2090bd6e49b3","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo.png","hash":"d1f1e2250adab47330eea7b7bbc8827dce70635b","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-return-flow-640.png","hash":"38897b0a0f3c0f233db9f064767436196fe2ef6d","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-return-flow.png","hash":"2c5d2ec83b730f679092013e8085a1032673adeb","modified":1478660225000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-without-640.png","hash":"3115e27c225110d3020606793c97e1e4fe7d2775","modified":1478660225000},{"_id":"source/_posts/hystrix/images/primary-secondary-example-640.png","hash":"6ba522ed88c63b18c7fbbdcc669aaa4c12233a02","modified":1478660225000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-640.png","hash":"25febf95dd29b3e29356e9079b3caf1175a3e5ce","modified":1478660225000},{"_id":"source/_posts/hystrix/images/rolling-stats-640.png","hash":"e981ebefb95332bf421c4e3460f1aae610559ece","modified":1478660225000},{"_id":"source/_posts/hystrix/images/transitive-commands-640.png","hash":"4b9a9f10096913db1a6b825cd747c4b94997e0b4","modified":1478660225000},{"_id":"source/_posts/技术/FlatBuffers/FlatBuffers使用指南.md","hash":"1e449739cb72cf1721461a9707d27f5c424c1c6b","modified":1478660225000},{"_id":"source/_posts/hystrix/images/transitive-commands.png","hash":"b8cd5957414b9740676c562dd935c335bec5b1b5","modified":1478660225000},{"_id":"source/_posts/技术/FlatBuffers/FlatBuffers简介.md","hash":"26ff079b5809dd67ba1cb07f8fffa16820a51bbd","modified":1478660225000},{"_id":"source/_posts/技术/Hexo/Hexo命令速记.md","hash":"957bd92c5466c58b049b139bc86d34e5e2e70e2c","modified":1478660225000},{"_id":"source/_posts/技术/领域模型/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1478660225000},{"_id":"source/_posts/技术/领域模型/领域模型的价值.md","hash":"559ff74a1c99e776f64cae80e823057b11b77d39","modified":1478660225000},{"_id":"source/_posts/转载/http2.0/装载：HTTP2-0的奇妙日常.md","hash":"9b597fa6a433bdf287bbae9c50679bda3dd270b7","modified":1478660225000},{"_id":"source/_posts/技术/工具/wrk基准测试工具安装使用.md","hash":"bcd0db7bd156b9036f7e34cf9d3f7caaebd02d34","modified":1478660225000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1479972210000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1479972210000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1479972210000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1479972210000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1479972210000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1479972210000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1479972210000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1479972210000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1479972210000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1479972210000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1479972210000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1479972210000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1479972210000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1479972210000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1479972210000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1479972210000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1479972210000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1479972210000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1479972210000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1479972210000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479972210000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479972210000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479972210000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479972210000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479972210000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479972210000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479972210000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1479972210000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1479972210000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479972210000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1479972210000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1479972210000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1479972210000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1479972210000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1479972210000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1479972210000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1479972210000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479972210000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479972210000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1479972210000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1479972210000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479972210000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479972210000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479972210000},{"_id":"source/_posts/hystrix/images/circuit-breaker-640.png","hash":"6dee7062440ac53277ef97e0bd8000e4c19b90d9","modified":1478660225000},{"_id":"source/_posts/hystrix/images/collapser-640.png","hash":"c27ac262add50eff2d2ff300b15d21b253929304","modified":1478660225000},{"_id":"source/_posts/hystrix/images/collapser-flow-640.png","hash":"28aa4117d38673c44dd0ec4a83b3869f07de1d4c","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-annoted-circuit-640.png","hash":"948e548cfef1deb9129b8ea82afef27b4cf94cc2","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-direct-vs-turbine.png","hash":"11d22278b6ce5c8f5d0dec564dde0c3a827a8571","modified":1478660225000},{"_id":"source/_posts/hystrix/images/fallback-via-command-1280.png","hash":"a9b7e695a88ec66e5dba042d4ed824084ad6c260","modified":1478660225000},{"_id":"source/_posts/hystrix/images/fallback-via-command-original.png","hash":"f179625e7510541b61cec9b8c326ed6ec1c79dea","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-command-flow-chart-640.png","hash":"111a6f17a4fc132dff069c60b797548d971cc0ea","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-command-flow-chart.png","hash":"530633edb85557bbb6a6f31b384bf7f2f95daa3a","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-620.png","hash":"d837ef2bd778ec1eb56513ee4e699fecca41e7e8","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-single-row.png","hash":"ad2f050bc1aebab2c9e66881d648e92b1ec41f6a","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-640.png","hash":"209ea2caa9bd43006ce8f3bd11f2e228408153e9","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-github-516.png","hash":"10e663fb2e3d839f8f875a92fc9a10dee1d71c50","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-850.png","hash":"684300d9ef43d50c89c065e276871b7bef6199ac","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-github-640.png","hash":"6542fb3862bada2a3e9f5f56846519f2dac9c0b8","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline.png","hash":"c3e6a33e0b0ceeb8c1218632415aacdd98d1a3fa","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline.graffle","hash":"dc1b74c04d0c9a83943dede41f11f7702b0558db","modified":1478660225000},{"_id":"source/_posts/hystrix/images/isolation-options-640.png","hash":"066719d23b378aa011dbc03e95cbe1e50741b8eb","modified":1478660225000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-640.png","hash":"9eb820ba5ffd5e1e34f1ab1767b838327ed8a1d0","modified":1478660225000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-with-640.png","hash":"810b1ddffb9b7f0327df0997ecebe562f293cf41","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-cinematch-1-640.png","hash":"709e7ffcdc9fcba221ef91c48cb4ecca21115781","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-cinematch-1.png","hash":"8f2650b8712a0289f8233dd9043b618eaba562dc","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-getbookmarks-640.png","hash":"11d87be552894886f8968db273a04004f8b85161","modified":1478660225000},{"_id":"source/_posts/hystrix/images/request-cache-640.png","hash":"3432e75e505598e0875a10940fa6ef925577ca4c","modified":1478660225000},{"_id":"source/_posts/hystrix/images/rolling-stats-1280.png","hash":"5e299504ba402de113568f3a7d2207a51691af0b","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-1-640.png","hash":"0264dedf3fd4ec05ad4321151fb06728b3eb05a3","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-2-640.png","hash":"487f186ee27f9afaee04ea501770da21f9aebfa4","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-640.png","hash":"4f40ed3361f652c019d9a56b4e3f990f5211b26c","modified":1478660225000},{"_id":"source/_posts/hystrix/images/thread-configuration-640.png","hash":"31fbb49d3d5525c0caf503103d56690f727ff318","modified":1478660225000},{"_id":"source/_posts/hystrix/images/thread-cost-60rps-640.png","hash":"3171b32cade8738593d21973588925be59fd9302","modified":1478660225000},{"_id":"themes/next/x.gitbak/objects/44/03ce175ac09a0dd215f6a2a7edf281fc2b5bc9","hash":"ca4f1521a39d4c496edbc53a519af93b17f92733","modified":1479972538000},{"_id":"themes/next/x.gitbak/objects/pack/pack-9b0f5f52c721aa073825c92e5d8b0485fdfead1e.idx","hash":"56db8c4d8a206dc4d6e9054569e18d69165d25eb","modified":1479972209000},{"_id":"themes/next/x.gitbak/refs/heads/master","hash":"776e91b78b954875a8d38297e05b80eab20df4b9","modified":1479972210000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479972210000},{"_id":"source/_posts/hystrix/images/cascading-failure-preventing-640.png","hash":"a4faa2c09103e7b1f0ead2374b594716f979d9be","modified":1478660225000},{"_id":"source/_posts/hystrix/images/circuit-breaker-1280.png","hash":"c730869b2cd9bf96aa644c0a28870cb5ec7a125e","modified":1478660225000},{"_id":"source/_posts/hystrix/images/collapser-1280.png","hash":"e23cb36f2076c908f91cd188217a610fff1ddd41","modified":1478660225000},{"_id":"source/_posts/hystrix/images/collapser-flow-1280.png","hash":"e26a49f1d866e0995f02e11a8c70925887ea32e8","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-example-640.png","hash":"7dae892ac61dae2d3c60963deb7479f313abdda5","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-home-640.png","hash":"713063d28059ed57a743abe8bb330d302deaddd3","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-home.png","hash":"f34a8bf0d7a2b0be57bfb44c4a4265428a34c66f","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example.png","hash":"cec68ca6e16e2b89b78da6c2eaea946059bbf300","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-1280.png","hash":"022ba7d91a876f0be5d918b866c544b4f3c72e9f","modified":1478660225000},{"_id":"source/_posts/hystrix/images/isolation-options-1280.png","hash":"c11e4b8c8e78deae78046d46b8e2b33de5a588b6","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-ab.png","hash":"687b75e3b21cc0f2761537dd15ca52680b090a8f","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-cinematch-2-640.png","hash":"04c5820fa5721ccb454a30e677db907d203a7cb7","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-cinematch-2.png","hash":"ad39f8d08e97b7ca5874edd5abea5fe8a35e4d93","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-complete-system.png","hash":"4b2fbdbb8884a21fc3d4ad9bd6be15f31d4e9208","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-social-640.png","hash":"e7524c836025c9c0eeb749fa681cca5c89408cfe","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-social-original.png","hash":"7ab759016de29869e840746869ae05559a39e303","modified":1478660225000},{"_id":"source/_posts/hystrix/images/primary-secondary-example-original.png","hash":"75ba5408cb5d0d31dc30341971efb5f2d05efea3","modified":1478660225000},{"_id":"source/_posts/hystrix/images/request-cache-1280.png","hash":"97e236f01a0e7a7028fab6010341259924915194","modified":1478660225000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-1280.png","hash":"783113c029aafd7449a17c155592289a9f772ac8","modified":1478660225000},{"_id":"source/_posts/hystrix/images/rolling-stats-original.png","hash":"c6c56a4733950803b2bccdfb867b73200847f2af","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-3-640.png","hash":"6416dfb879bc3cac0c173fc68c71a4867c567da2","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-640.png","hash":"e87a1deb0ee48cc3643f4a72fd6474467040dd5c","modified":1478660225000},{"_id":"source/_posts/hystrix/images/thread-cost-60rps-original.png","hash":"f9ca0bfe40510d95aaaf707798e4f025da999b1b","modified":1478660225000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1479972210000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1479972210000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1479972210000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1479972210000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1479972210000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1479972210000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1479972210000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1479972210000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479972210000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479972210000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1479972210000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479972210000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479972210000},{"_id":"source/_posts/hystrix/images/collapser-flow-original.png","hash":"69d9b785e6ce1ae5584ee19dedcc2e9765bab8b1","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-annoted-circuit-original.png","hash":"a25faa48260b30e92b1f9270d3fa11e9fc699db4","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-iPad-620.png","hash":"e5ae3b5cfe3babd8c31334a663698cb9bfa8e48a","modified":1478660225000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-1280.png","hash":"03bc1c86572a73e334aac14e162fab6b93384e71","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-ab-640.png","hash":"ec29160251d9c10722c7d87e80b8cd7c8e469fec","modified":1478660225000},{"_id":"themes/next/x.gitbak/logs/refs/heads/master","hash":"5621c106877f19ac62089b66e545544f6b48a77f","modified":1479972210000},{"_id":"themes/next/x.gitbak/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479972210000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479972210000},{"_id":"source/_posts/hystrix/images/ops-complete-system-640.png","hash":"47120ad690a834db225a8499caf8f19820ccb7ac","modified":1478660225000},{"_id":"source/_posts/hystrix/images/ops-getbookmarks.png","hash":"8596fc651f6182f54f85eefdc53cbaa2f52e54e0","modified":1478660225000},{"_id":"source/_posts/hystrix/images/request-cache-original.png","hash":"8435b5f070043655685148d3cd842a2edb70119e","modified":1478660225000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-original.png","hash":"6430ac913484ef09e80c7b8d21f94b9785cc353f","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-1-1280.png","hash":"a7c73f21630a232dbeea1e7d71123704af683f5f","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-2-1280.png","hash":"6e602eb59079308e64c8bfe58807a728526b8e80","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-1280.png","hash":"d366f2671c80c18c1a0c8510adab3df40f594b37","modified":1478660225000},{"_id":"source/_posts/hystrix/images/thread-configuration-1280.png","hash":"a5b25580b21f8fe5bc1796ff563ec61ad769819c","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-original.png","hash":"2525840274b1d46cfd8f68b694c0613c26225236","modified":1478660225000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5357db10656b260f8b332c67bb06e486bc64a4ad","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1479972210000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479972210000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479972210000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479972210000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479972210000},{"_id":"source/_posts/hystrix/images/collapser-original.png","hash":"81fb51310999305b23285a99fac7d7836d4c3fd1","modified":1478660225000},{"_id":"source/_posts/hystrix/images/isolation-options-original.png","hash":"0a3f5da5335e00dbbf329ddf2fd3394d4f568879","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-examples-webapp-home.png","hash":"10f9df7ad08a1080f97b700793e1edcb08417e81","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-3-1280.png","hash":"148452655f23b98891f10564cc53f5aca81cbbec","modified":1478660225000},{"_id":"source/_posts/hystrix/images/thread-configuration-original.png","hash":"1efac02e91756f059dcaf8bc6ff40ac46c6aa1ed","modified":1478660225000},{"_id":"themes/next/x.gitbak/logs/refs/remotes/origin/HEAD","hash":"5621c106877f19ac62089b66e545544f6b48a77f","modified":1479972210000},{"_id":"source/_posts/hystrix/images/cascading-failure-preventing.png","hash":"7e08eb521c9856451681b25d18c056f889881684","modified":1478660225000},{"_id":"source/_posts/hystrix/images/circuit-breaker-original.png","hash":"aa93fa77ab6a206152a048d204964653dd73283d","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-example-1280.png","hash":"df18fe4eddd84e68416eb74c7697215dd6b0c827","modified":1478660225000},{"_id":"source/_posts/hystrix/images/dashboard-example-original.png","hash":"81ebad4a1aeba9b466d95c27505ac2dc0aa58903","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-original.png","hash":"4577f01394b1605bcf9ff53157b494e51054bce7","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-1-original.png","hash":"3ce4b0a11c2271fa92dc94cde82573afcbebc6b0","modified":1478660225000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1479972210000},{"_id":"source/_posts/hystrix/images/soa-2-original.png","hash":"6747720006edb6770a28811c75c15f1b774fa87f","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-1280.png","hash":"facf44be2c0fe54d059c8553f27342d7bfb4cfdd","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-iPad.png","hash":"33ddd07a4e65cc74edaf54913d71484e5c39f7d4","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-3-original.png","hash":"046b841b7cb92583624480f513585b7d146ef5b1","modified":1478660225000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1479972210000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-original.png","hash":"426aa98175e52d516f470a6a34919a393b02a163","modified":1478660225000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-original.png","hash":"68a394f28663ae3196ed23e4df7c1f377785d97e","modified":1478660225000},{"_id":"source/_posts/hystrix/images/hystrix.graffle","hash":"19ffa1864138388e506d53bb8d8eefa21f07c09f","modified":1478660225000},{"_id":"themes/next/x.gitbak/objects/pack/pack-9b0f5f52c721aa073825c92e5d8b0485fdfead1e.pack","hash":"49f5e0ff1e097d4eefda7f5381beb354a68ac4ac","modified":1479972453000},{"_id":"public/categories/index.html","hash":"d9eaaae2c172415f251127ab7fabb1265260d47f","modified":1479978277238},{"_id":"public/about/index.html","hash":"08d7a758c2cb77a1099db9585275eab294a22280","modified":1479978277238},{"_id":"public/tags/index.html","hash":"692d61f398b182244fb0926c284e371372221d69","modified":1479978277239},{"_id":"public/2016/06/02/微服务/微服务之微/index.html","hash":"4de0329ad82d3963b55858454b6bc2c4ad044462","modified":1479978277239},{"_id":"public/2016/02/22/music/Matthew-Lien-Bleeding-Wolves/index.html","hash":"65939d43bd333c45ea76dd5e595f3b13fbcecf23","modified":1479978277239},{"_id":"public/archives/page/3/index.html","hash":"ea50a27eaa4bdea263e1c2c311f8227dacb8facf","modified":1479978277239},{"_id":"public/archives/2016/page/3/index.html","hash":"54c8159f167dd43c7b5c0ca7d78b27301f073291","modified":1479978277239},{"_id":"public/archives/2016/02/index.html","hash":"5e89015ab8b4f197337368ed99e06dc7a716ca41","modified":1479978277247},{"_id":"public/archives/2016/03/index.html","hash":"694af99d67d7714837aade7af3a86cd3973066f2","modified":1479978277239},{"_id":"public/archives/2016/06/index.html","hash":"2de7254090907ede12b5703a0305a27c0a4b619b","modified":1479978277239},{"_id":"public/categories/那年今日/index.html","hash":"1de31fb6abe72afcc0596d5dc675eee351167a70","modified":1479978277239},{"_id":"public/categories/技术/page/2/index.html","hash":"03c4a96b87c4c27ee3803efdc2a1779c9072884e","modified":1479978277239},{"_id":"public/categories/微服务/index.html","hash":"20a9fe3f539b06a98c5811f9a9c511d484dbc854","modified":1479978277247},{"_id":"public/categories/技术/Hystrix/index.html","hash":"dd9e30daa81741c6ea7f684d980435de223c672f","modified":1479978277239},{"_id":"public/categories/技术/算法/index.html","hash":"ab7084a5f28bc110ed55f9d1971e57a0ecce5ab2","modified":1479978277239},{"_id":"public/categories/music/index.html","hash":"5dec9bff5499e963932d6ab7227c800570945276","modified":1479978277239},{"_id":"public/categories/技术/杂谈/index.html","hash":"6027177e632591ad13246399b897565bfe5d26e0","modified":1479978277239},{"_id":"public/categories/技术/FlatBuffers/index.html","hash":"37504764b5c90d9b2af34210ff2bd7c63ba491b3","modified":1479978277239},{"_id":"public/categories/技术/Hexo/index.html","hash":"73e9dec9d301eb77a0dbbf700be04ecfb6f7f9a5","modified":1479978277239},{"_id":"public/categories/技术/领域模型/index.html","hash":"4257834c894585eaaac8ed83f862807168a709fe","modified":1479978277239},{"_id":"public/categories/转载/index.html","hash":"89d4d4d3484633ff5d36f3a1fdd510088241109e","modified":1479978277239},{"_id":"public/categories/技术/工具/index.html","hash":"d548252dd3ebaaa63d0965f94d085a99e385d557","modified":1479978277239},{"_id":"public/categories/转载/http-2-0/index.html","hash":"64a853cdae6f3c42a0876d895856901773805a75","modified":1479978277240},{"_id":"public/tags/春天/index.html","hash":"4e5538ca9d456b8b565c69dd84d70bae9380fba9","modified":1479978277240},{"_id":"public/tags/梅花/index.html","hash":"2ba65b1a54279f231e0d946471b8392e236ecfd2","modified":1479978277240},{"_id":"public/tags/hystrix/index.html","hash":"45783c8af0fa7c7146a3ba431e4226836e430e60","modified":1479978277240},{"_id":"public/tags/Circuit-Breaker/index.html","hash":"4bf461a0241457b94a5c9d323fbcadf7a40eeb7a","modified":1479978277240},{"_id":"public/tags/Feign/index.html","hash":"8ee822e3bc67d3e2435e2f94876b4b8a2ff70dcc","modified":1479978277240},{"_id":"public/tags/Spring-Cloud/index.html","hash":"8f1a27da21bae2476bbf339b2950443de5e84ad2","modified":1479978277240},{"_id":"public/tags/spring-cloud/index.html","hash":"cd2d501789a6fc5281c7a423ad4f696f1c4b1cfd","modified":1479978277240},{"_id":"public/tags/Spring-Boot/index.html","hash":"ed4f5246f1b3d433d3df4cc6a5c3199caecfe2cf","modified":1479978277240},{"_id":"public/tags/API-Gateway/index.html","hash":"9a374513fa4349defb45d3ce001944b05419cbe9","modified":1479978277240},{"_id":"public/tags/网关/index.html","hash":"6739152cbfea032750ae6d41b9f2c6aab1a3f265","modified":1479978277240},{"_id":"public/tags/分布式事务/index.html","hash":"3e7f0d3b277c9154a1dd44995bf751efe0fcda68","modified":1479978277240},{"_id":"public/tags/Eureka/index.html","hash":"03cd60e58f9aa7b21f3c70d43dee1138bc962915","modified":1479978277240},{"_id":"public/tags/服务发现/index.html","hash":"659b30a868851df188339b0910c3007a3203f83f","modified":1479978277240},{"_id":"public/tags/分布式配置管理/index.html","hash":"b6afd3c6fa8db90cb9410d02a7eb0b6f7bed4e31","modified":1479978277240},{"_id":"public/tags/负载均衡/index.html","hash":"fc89946cd74d4f576100843daf0b699ad36c7348","modified":1479978277240},{"_id":"public/tags/加权轮询/index.html","hash":"5ea54fc01056908f8bedf76ce73b6bcbc24ea84f","modified":1479978277240},{"_id":"public/tags/轮询/index.html","hash":"61ecaf452442fd9ce929bfd436d14ff0f779e040","modified":1479978277240},{"_id":"public/tags/算法/index.html","hash":"c3a45265e5f36ef76e4cc65fd9bf896991f8ffda","modified":1479978277240},{"_id":"public/tags/单一职责/index.html","hash":"ae02441a2b476029252c55983f2b545733420b33","modified":1479978277241},{"_id":"public/2016/09/10/微服务/微服务优缺点论述/index.html","hash":"a3cc0e0ab8af644a2b61a902a54652441dd24a62","modified":1479978277241},{"_id":"public/2016/09/08/微服务/微服务之Eureka服务发现/index.html","hash":"ae651c3f21ac4a60c40608ccbad40b82b5b42c2e","modified":1479978277241},{"_id":"public/2016/09/08/微服务/微服务拆分实践/index.html","hash":"08ea1c810dfb8d354ba74e0088bd8493e9a363cd","modified":1479978277241},{"_id":"public/2016/09/08/微服务/微服务实施spring-cloud中踩过的坑/index.html","hash":"01a2c3659cba07c0a76870695c54c5041935128a","modified":1479978277241},{"_id":"public/2016/09/08/微服务/微服务之spring-cloud分布式外部化和中心化配置管理/index.html","hash":"65b124c332a8e54f39ab04270e899da987adb504","modified":1479978277241},{"_id":"public/2016/09/08/微服务/微服务之API网关设计/index.html","hash":"2e6bad9c289c71ff455193688de6cb3b98429d21","modified":1479978277241},{"_id":"public/2016/09/08/微服务/微服务下分布式事务问题/index.html","hash":"60675c28324e56722934344fba3ce2a3a6595a02","modified":1479978277241},{"_id":"public/2016/09/06/微服务/Feign使用性能优化/index.html","hash":"f8220850063d347fe2fa3cc603d5af1ef2346170","modified":1479978700794},{"_id":"public/2016/09/02/hystrix/RestTemplate遇上Hystrix/index.html","hash":"f2266e31907cef384e9b867524ab2428ee56a9dd","modified":1479978700795},{"_id":"public/2016/06/28/技术/软件开发中的单一职责/index.html","hash":"def620bc78654691e99117e19d7c7685abc50e4d","modified":1479978277245},{"_id":"public/2016/06/16/技术/负载均衡之加权轮询算法/index.html","hash":"c4b1d4e76aff23d8a2db1c070cb2ff49e86e8c78","modified":1479978700795},{"_id":"public/2016/03/09/hystrix/Hystrix简介/index.html","hash":"7b5f425542ec26cc6f3633b3b3beec5b597bcd62","modified":1479978277246},{"_id":"public/2016/03/09/hystrix/Hystrix降级模式总结/index.html","hash":"572372055dad9a1a302180aed0766f03e89499b4","modified":1479978277246},{"_id":"public/2016/03/04/技术/工具/wrk基准测试工具安装使用/index.html","hash":"b4573abf2394e3fd35be78dafdb6f66660b0cff7","modified":1479978277246},{"_id":"public/2016/02/25/hystrix/Hystrix参数详解/index.html","hash":"0698f3032e633673ba25cd4876ca40830f5e3b9a","modified":1479978277246},{"_id":"public/2016/02/22/转载/http2.0/装载：HTTP2-0的奇妙日常/index.html","hash":"9a3525ff71a9d5b2042d2579c453c4d571642e69","modified":1479978277246},{"_id":"public/2016/02/21/技术/Hexo/Hexo命令速记/index.html","hash":"57184d6d3dd0158751ba4a2709acbdc230fb742a","modified":1479978277246},{"_id":"public/2016/02/21/技术/领域模型/领域模型的价值/index.html","hash":"86c8f9c590f4e470f2c60395208e675e6f0ac536","modified":1479978277246},{"_id":"public/2016/02/19/技术/FlatBuffers/FlatBuffers使用指南/index.html","hash":"19c119a2f7d909befe0861470506752b1c35cd7a","modified":1479978277246},{"_id":"public/2016/02/19/技术/FlatBuffers/FlatBuffers简介/index.html","hash":"86d40f04dbee00e0e4bc545eedefc7542e637aa3","modified":1479978277247},{"_id":"public/2016/02/19/春天花会开/index.html","hash":"654a5eadeb29391cc29e58890f0eec75ee10fd6a","modified":1479978277247},{"_id":"public/archives/index.html","hash":"4a6ca7633b0b73849d0efe629ecea78cf101dc95","modified":1479978277247},{"_id":"public/archives/page/2/index.html","hash":"449eef02c93eb2f58877402cc5605fbf3e7ea925","modified":1479978277247},{"_id":"public/archives/2016/index.html","hash":"c9ac9859a4abfa6b98d05c0cf9bce41fa7ba5ee0","modified":1479978277247},{"_id":"public/archives/2016/page/2/index.html","hash":"80e8a801b1498a99f1275735b647362dff2ff35e","modified":1479978277247},{"_id":"public/archives/2016/09/index.html","hash":"06d4ec6e94e4eccf45a9305023a5a6f64bc64d27","modified":1479978277247},{"_id":"public/categories/技术/index.html","hash":"5e5ecdadf2e68cc05d242b276b64c4a6f7e266c9","modified":1479978277247},{"_id":"public/index.html","hash":"7fd9ae79d0225c7e92d3ed3e112687bf61e8044f","modified":1479978700796},{"_id":"public/page/2/index.html","hash":"299e2e3723b28202fadd5fd5a52f151847f3ca3c","modified":1479978700796},{"_id":"public/page/3/index.html","hash":"71112e929dbffa82d16a59ea3aa67e642d5f6893","modified":1479978277247},{"_id":"public/tags/微服务/index.html","hash":"bce5a11984fcf1b5ec916e26072b0dd720ac05f9","modified":1479978277247},{"_id":"public/tags/软件开发/index.html","hash":"69a79b0c23300c5c962d3b29cf435f2471b05f42","modified":1479978277241},{"_id":"public/tags/FlatBuffers/index.html","hash":"2daddbaaa14252a5608ef4c900824cbe215f469a","modified":1479978277241},{"_id":"public/tags/序列化/index.html","hash":"9db32cb6cce644441eb5748d42f2783833df64a2","modified":1479978277241},{"_id":"public/tags/Hexo/index.html","hash":"64f3a2a05194d23caf772abe1e382c5bb9821da3","modified":1479978277241},{"_id":"public/tags/领域模型/index.html","hash":"2c83ddb1adca42a3b9eb84d644656cc84a07aa58","modified":1479978277241},{"_id":"public/tags/DDD/index.html","hash":"7cbc6c0564ac974cb674c7c7000295f080e0d823","modified":1479978277241},{"_id":"public/tags/http-2-0/index.html","hash":"743aca756a82cc224d41f18360830aec726fd5f5","modified":1479978277241},{"_id":"public/tags/基准测试/index.html","hash":"ba8d7e670f6c5439bef9e77c1f2ba094acc5f683","modified":1479978277241},{"_id":"public/tags/wrk/index.html","hash":"d5f7491493d1d7c938a72046e211856336ae702a","modified":1479978277241},{"_id":"public/CNAME","hash":"704f5291fe9f9f9d297c839806479c17e209a2d7","modified":1479977529890},{"_id":"public/images/m1.jpg","hash":"4975231d503be2c0b00ed01322b88d70574d3076","modified":1479977529890},{"_id":"public/favicon.ico","hash":"a5c41d966e5eef597a50b91f0b6a9bdf8ac80583","modified":1479977529890},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1479977529890},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479977529890},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1479977529890},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1479977529890},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1479977529890},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1479977529890},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1479977529890},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1479977529890},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1479977529890},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479977529890},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479977529890},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1479977529890},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1479977529890},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479977529890},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479977529890},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1479977529890},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479977529890},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479977529891},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479977529891},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479977529891},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479977529891},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479977529891},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479977529891},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479977529891},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479977530963},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479977530981},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479977530989},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479977530989},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1479977530999},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479977530999},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479977530999},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479977530999},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479977530999},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479977531000},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479977531000},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479977531000},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1479977531000},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1479977531000},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1479977531000},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1479977531000},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1479977531000},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1479977531000},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1479977531000},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479977531000},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479977531000},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1479977531000},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479977531000},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479977531001},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479977531003},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479977531003},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479977531003},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479977531003},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479977531003},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479977531003},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479977531003},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479977531004},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479977531004},{"_id":"public/css/main.css","hash":"2ef93b6b66b4a5dd8f6713f23a7fb0ea87c7049e","modified":1479977531004},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479977531004},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479977531004},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479977531004},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479977531004},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479977531004},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479977531005},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1479977531005},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1479977531005},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479977531005},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1479977531005},{"_id":"public/images/185638fo3y9el8ie2ohese.jpg","hash":"4d278765113277adc24d16fda2004d179911d5bc","modified":1479977531006},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479977531006},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1479977531041},{"_id":"source/favicon.ico","hash":"a5c41d966e5eef597a50b91f0b6a9bdf8ac80583","modified":1455933380000}],"Category":[{"name":"那年今日","_id":"civw4emkk0003c9inlebttp10"},{"name":"技术","_id":"civw4emus000cc9inlirx1lmv"},{"name":"微服务","_id":"civw4emvm000qc9inp53c3ht6"},{"name":"Hystrix","parent":"civw4emus000cc9inlirx1lmv","_id":"civw4emvw000wc9inemul0j8l"},{"name":"算法","parent":"civw4emus000cc9inlirx1lmv","_id":"civw4emws0022c9inpqqtsxvf"},{"name":"music","_id":"civw4emwt0026c9inxl46qx24"},{"name":"杂谈","parent":"civw4emus000cc9inlirx1lmv","_id":"civw4emwv002ac9in1yaregil"},{"name":"FlatBuffers","parent":"civw4emus000cc9inlirx1lmv","_id":"civw4en0b0049c9inpk4791l1"},{"name":"Hexo","parent":"civw4emus000cc9inlirx1lmv","_id":"civw4en0m004gc9inkcesd89j"},{"name":"领域模型","parent":"civw4emus000cc9inlirx1lmv","_id":"civw4en0o004nc9in6jz517sw"},{"name":"转载","_id":"civw4en0p004rc9inak6b0hrr"},{"name":"工具","parent":"civw4emus000cc9inlirx1lmv","_id":"civw4en0q004xc9in2tnk48k3"},{"name":"http 2.0","parent":"civw4en0p004rc9inak6b0hrr","_id":"civw4en0r0051c9inqccll2hc"}],"Data":[],"Page":[{"title":"分类","date":"2016-11-24T07:49:16.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-11-24 15:49:16\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-24T08:18:09.000Z","path":"categories/index.html","layout":"page","_id":"civw4emk60000c9inf487hr1p","content":"","excerpt":"","more":""},{"_content":"# 关于\n\n暂无","source":"about/index.md","raw":"# 关于\n\n暂无","date":"2016-11-09T02:57:05.000Z","updated":"2016-11-09T02:57:05.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"civw4emkg0002c9in9mhc5fnu","content":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>暂无</p>\n","excerpt":"","more":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>暂无</p>\n"},{"title":"标签","date":"2016-11-24T07:48:34.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-11-24 15:48:34\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-24T08:17:39.000Z","path":"tags/index.html","layout":"page","_id":"civw4emkn0005c9in17u9azs6","content":"","excerpt":"","more":""}],"Post":[{"title":"春天开篇","date":"2016-02-19T01:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122144.JPG","_content":"\n## 一年之计在于始\n\n想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：\n\n“一日之计在于晨,一年之计在于春,一生之计在于勤”\n\n**更有：**\n\n“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”\n\n春，晨，和，勤\n\n\n\n","source":"_posts/春天花会开.md","raw":"---\ntitle: 春天开篇\ndate: 2016-02-19 09:20:42\ncategories: \n\t- 那年今日\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122144.JPG\ntags: \n\t- 春天 \n\t- 梅花\n---\n\n## 一年之计在于始\n\n想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：\n\n“一日之计在于晨,一年之计在于春,一生之计在于勤”\n\n**更有：**\n\n“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”\n\n春，晨，和，勤\n\n\n\n","slug":"春天花会开","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emka0001c9in335wsvcd","content":"<h2 id=\"一年之计在于始\"><a href=\"#一年之计在于始\" class=\"headerlink\" title=\"一年之计在于始\"></a>一年之计在于始</h2><p>想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：</p>\n<p>“一日之计在于晨,一年之计在于春,一生之计在于勤”</p>\n<p><strong>更有：</strong></p>\n<p>“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”</p>\n<p>春，晨，和，勤</p>\n","excerpt":"","more":"<h2 id=\"一年之计在于始\"><a href=\"#一年之计在于始\" class=\"headerlink\" title=\"一年之计在于始\"></a>一年之计在于始</h2><p>想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：</p>\n<p>“一日之计在于晨,一年之计在于春,一生之计在于勤”</p>\n<p><strong>更有：</strong></p>\n<p>“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”</p>\n<p>春，晨，和，勤</p>\n"},{"title":"Hystrix 参数详解","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-25T01:20:00.000Z","keywords":null,"description":null,"_content":"\nhystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey\n\n# Command Properties\n\n## Execution相关的属性的配置：\n\n* hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore\n\t- thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用\n\t- semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求\n\n* hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms\n* hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true\n* hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true\n* hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。\nsemaphore应该占整个容器（tomcat）的线程池的一小部分。\n\n\n## Fallback相关的属性\n\n这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略\n\n* hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10\n* hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true\n\n\n## Circuit Breaker相关的属性\n\n* hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true\n* hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20\n* hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000\n* hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50\n* hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false\n* hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage\n\n## Metrics相关参数\n\n* hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000\n* hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10\n* hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true\n* hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000\n* hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6\n* hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100\n* hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms\n\n## Request Context 相关参数\n\nhystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存\nhystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true\n\n# Collapser Properties 相关参数\n\nhystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE\nhystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10\nhystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true\n\n# ThreadPool 相关参数\n\n线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：\nrequests per second at peak when healthy × 99th percentile latency in seconds + some breathing room\n每秒最大支撑的请求数 * (99%平均响应时间 + 缓存值)\n比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：\n 1000 *（0.060+0.012）\n\n基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。\n当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务\n \n* hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10\n* hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。\n* hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用\n* hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1.\n* hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000\n* hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10\n\n\n ","source":"_posts/hystrix/Hystrix参数详解.md","raw":"---\ntitle: Hystrix 参数详解\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG'\ndate: 2016-02-25 09:20:00\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\n\t- Circuit Breaker\nkeywords:\ndescription:\n---\n\nhystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey\n\n# Command Properties\n\n## Execution相关的属性的配置：\n\n* hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore\n\t- thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用\n\t- semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求\n\n* hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms\n* hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true\n* hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true\n* hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。\nsemaphore应该占整个容器（tomcat）的线程池的一小部分。\n\n\n## Fallback相关的属性\n\n这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略\n\n* hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10\n* hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true\n\n\n## Circuit Breaker相关的属性\n\n* hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true\n* hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20\n* hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000\n* hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50\n* hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false\n* hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage\n\n## Metrics相关参数\n\n* hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000\n* hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10\n* hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true\n* hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000\n* hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6\n* hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100\n* hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms\n\n## Request Context 相关参数\n\nhystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存\nhystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true\n\n# Collapser Properties 相关参数\n\nhystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE\nhystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10\nhystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true\n\n# ThreadPool 相关参数\n\n线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：\nrequests per second at peak when healthy × 99th percentile latency in seconds + some breathing room\n每秒最大支撑的请求数 * (99%平均响应时间 + 缓存值)\n比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：\n 1000 *（0.060+0.012）\n\n基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。\n当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务\n \n* hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10\n* hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。\n* hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用\n* hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1.\n* hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000\n* hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10\n\n\n ","slug":"hystrix/Hystrix参数详解","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emuo000ac9inki5mzjuf","content":"<p>hystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey</p>\n<h1 id=\"Command-Properties\"><a href=\"#Command-Properties\" class=\"headerlink\" title=\"Command Properties\"></a>Command Properties</h1><h2 id=\"Execution相关的属性的配置：\"><a href=\"#Execution相关的属性的配置：\" class=\"headerlink\" title=\"Execution相关的属性的配置：\"></a>Execution相关的属性的配置：</h2><ul>\n<li><p>hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore</p>\n<ul>\n<li>thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用</li>\n<li>semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求</li>\n</ul>\n</li>\n<li><p>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms</p>\n</li>\n<li>hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true</li>\n<li>hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true</li>\n<li>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。<br>semaphore应该占整个容器（tomcat）的线程池的一小部分。</li>\n</ul>\n<h2 id=\"Fallback相关的属性\"><a href=\"#Fallback相关的属性\" class=\"headerlink\" title=\"Fallback相关的属性\"></a>Fallback相关的属性</h2><p>这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略</p>\n<ul>\n<li>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10</li>\n<li>hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true</li>\n</ul>\n<h2 id=\"Circuit-Breaker相关的属性\"><a href=\"#Circuit-Breaker相关的属性\" class=\"headerlink\" title=\"Circuit Breaker相关的属性\"></a>Circuit Breaker相关的属性</h2><ul>\n<li>hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true</li>\n<li>hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20</li>\n<li>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000</li>\n<li>hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率&gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50</li>\n<li>hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false</li>\n<li>hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage</li>\n</ul>\n<h2 id=\"Metrics相关参数\"><a href=\"#Metrics相关参数\" class=\"headerlink\" title=\"Metrics相关参数\"></a>Metrics相关参数</h2><ul>\n<li>hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000</li>\n<li>hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10</li>\n<li>hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true</li>\n<li>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000</li>\n<li>hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6</li>\n<li>hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100</li>\n<li>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms</li>\n</ul>\n<h2 id=\"Request-Context-相关参数\"><a href=\"#Request-Context-相关参数\" class=\"headerlink\" title=\"Request Context 相关参数\"></a>Request Context 相关参数</h2><p>hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存<br>hystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true</p>\n<h1 id=\"Collapser-Properties-相关参数\"><a href=\"#Collapser-Properties-相关参数\" class=\"headerlink\" title=\"Collapser Properties 相关参数\"></a>Collapser Properties 相关参数</h1><p>hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE<br>hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10<br>hystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true</p>\n<h1 id=\"ThreadPool-相关参数\"><a href=\"#ThreadPool-相关参数\" class=\"headerlink\" title=\"ThreadPool 相关参数\"></a>ThreadPool 相关参数</h1><p>线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：<br>requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room<br>每秒最大支撑的请求数 <em> (99%平均响应时间 + 缓存值)<br>比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：<br> 1000 </em>（0.060+0.012）</p>\n<p>基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。<br>当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务</p>\n<ul>\n<li>hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10</li>\n<li>hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。</li>\n<li>hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用</li>\n<li>hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（<a href=\"https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1\" target=\"_blank\" rel=\"external\">https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1</a>.</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10</li>\n</ul>\n","excerpt":"","more":"<p>hystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey</p>\n<h1 id=\"Command-Properties\"><a href=\"#Command-Properties\" class=\"headerlink\" title=\"Command Properties\"></a>Command Properties</h1><h2 id=\"Execution相关的属性的配置：\"><a href=\"#Execution相关的属性的配置：\" class=\"headerlink\" title=\"Execution相关的属性的配置：\"></a>Execution相关的属性的配置：</h2><ul>\n<li><p>hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore</p>\n<ul>\n<li>thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用</li>\n<li>semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求</li>\n</ul>\n</li>\n<li><p>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms</p>\n</li>\n<li>hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true</li>\n<li>hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true</li>\n<li>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。<br>semaphore应该占整个容器（tomcat）的线程池的一小部分。</li>\n</ul>\n<h2 id=\"Fallback相关的属性\"><a href=\"#Fallback相关的属性\" class=\"headerlink\" title=\"Fallback相关的属性\"></a>Fallback相关的属性</h2><p>这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略</p>\n<ul>\n<li>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10</li>\n<li>hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true</li>\n</ul>\n<h2 id=\"Circuit-Breaker相关的属性\"><a href=\"#Circuit-Breaker相关的属性\" class=\"headerlink\" title=\"Circuit Breaker相关的属性\"></a>Circuit Breaker相关的属性</h2><ul>\n<li>hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true</li>\n<li>hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20</li>\n<li>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000</li>\n<li>hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率&gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50</li>\n<li>hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false</li>\n<li>hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage</li>\n</ul>\n<h2 id=\"Metrics相关参数\"><a href=\"#Metrics相关参数\" class=\"headerlink\" title=\"Metrics相关参数\"></a>Metrics相关参数</h2><ul>\n<li>hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000</li>\n<li>hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10</li>\n<li>hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true</li>\n<li>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000</li>\n<li>hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6</li>\n<li>hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100</li>\n<li>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms</li>\n</ul>\n<h2 id=\"Request-Context-相关参数\"><a href=\"#Request-Context-相关参数\" class=\"headerlink\" title=\"Request Context 相关参数\"></a>Request Context 相关参数</h2><p>hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存<br>hystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true</p>\n<h1 id=\"Collapser-Properties-相关参数\"><a href=\"#Collapser-Properties-相关参数\" class=\"headerlink\" title=\"Collapser Properties 相关参数\"></a>Collapser Properties 相关参数</h1><p>hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE<br>hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10<br>hystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true</p>\n<h1 id=\"ThreadPool-相关参数\"><a href=\"#ThreadPool-相关参数\" class=\"headerlink\" title=\"ThreadPool 相关参数\"></a>ThreadPool 相关参数</h1><p>线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：<br>requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room<br>每秒最大支撑的请求数 <em> (99%平均响应时间 + 缓存值)<br>比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：<br> 1000 </em>（0.060+0.012）</p>\n<p>基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。<br>当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务</p>\n<ul>\n<li>hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10</li>\n<li>hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。</li>\n<li>hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用</li>\n<li>hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（<a href=\"https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1\">https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1</a>.</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10</li>\n</ul>\n"},{"title":"Hystrix简介","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png","date":"2016-03-09T01:22:47.000Z","keywords":"hystrix","description":"Hystrix简介","_content":"\n \n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png)\n\n1. <a href=\"#what\">What Is Hystrix?</a>\n1. <a href=\"#purpose\">What Is Hystrix For?</a>\n1. <a href=\"#problem\">What Problem Does Hystrix Solve?</a>\n1. <a href=\"#principles\">What Design Principles Underlie Hystrix?</a>\n1. <a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a>\n\n<a name=\"what\" />\n## Hystrix是什么?\n\n在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。\n\n####  Hystrix的历史\n\nHystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。\n\n \n下面的链接提供了围绕Hystrix和挑战，试图解决：\n\n* [&ldquo;Making Netflix API More Resilient&rdquo;](http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html)\n* [&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;](http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html)\n* [&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;](https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012)\n* [&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;](http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html)\n* [&ldquo;Application Resilience Engineering & Operations at Netflix&rdquo;] (https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix)\n\n<a name=\"purpose\" />\n## Hystrix能做什么?\n  \nHystrix被设计为：\n\n- 保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障\n- 在复杂的分布式系统中阻止连锁故障反应\n- 快速失败和快速恢复\n- Fallback降级和在可能的情况下优雅地降级\n- 启用近实时监测，报警和操作控制\n\n\n<a name=\"problem\" />\n## Hystrix解决了什么问题?\n\n复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。\n\n\n例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：\n\n> 99.99<sup>30</sup>  =  99.7% uptime  \n> 10亿请求中的0.3%  = 3,000,000 次失败  \n> 即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用 \n> 随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.\n \n**现实通常会更残酷。**\n\n**如果你没有针对整个系统做快速恢复**，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。\n\n***\n\n \n\n当一切都ok的请求流看起来是这样的：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png)\n\n当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png)\n\n\n \n一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。\n在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png)\n\n \n\n当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。\n如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！\n\n\n网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。\n所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。\n\n\n\n<a name=\"principles\" />\n## What Design Principles Underlie Hystrix?\n\nHystrix works by:\n\n* 防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程\n* 隔离和减低负载，对无法及时处理时快速失败，而不是排队\n* 提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。\n* 采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。\n* 通过最近实时metrics、监控和警告来优化以满足近实时性的要求\n* 在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求\n* 能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求\n\n\n\n<a name=\"how\" />\n## How Does Hystrix Accomplish Its Goals?\n\nHystrix does this by:\n\n \n- 使用`HystrixCommand`或者`HystrixObservableCommand`包装所有的外部系统（或者依赖服务）调用，每个`HystrixCommand`或者`HystrixObservableCommand`在隔离的线程中/信号下执行（参考这个例子[command pattern](http://en.wikipedia.org/wiki/Command_pattern)）\n\n- 超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。\n\n- 为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。\n- 测量成功，失败（抛出异常），超时和线程拒绝。\n- 如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。\n- 当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。\n- 近实时监控度量，动态配置修改\n \n \n\n当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。\n\n \n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png)\n\n \n\n\n\n","source":"_posts/hystrix/Hystrix简介.md","raw":"---\ntitle: Hystrix简介\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png'\ndate: 2016-03-09 09:22:47\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\nkeywords: hystrix\ndescription: Hystrix简介\n---\n\n \n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png)\n\n1. <a href=\"#what\">What Is Hystrix?</a>\n1. <a href=\"#purpose\">What Is Hystrix For?</a>\n1. <a href=\"#problem\">What Problem Does Hystrix Solve?</a>\n1. <a href=\"#principles\">What Design Principles Underlie Hystrix?</a>\n1. <a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a>\n\n<a name=\"what\" />\n## Hystrix是什么?\n\n在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。\n\n####  Hystrix的历史\n\nHystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。\n\n \n下面的链接提供了围绕Hystrix和挑战，试图解决：\n\n* [&ldquo;Making Netflix API More Resilient&rdquo;](http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html)\n* [&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;](http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html)\n* [&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;](https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012)\n* [&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;](http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html)\n* [&ldquo;Application Resilience Engineering & Operations at Netflix&rdquo;] (https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix)\n\n<a name=\"purpose\" />\n## Hystrix能做什么?\n  \nHystrix被设计为：\n\n- 保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障\n- 在复杂的分布式系统中阻止连锁故障反应\n- 快速失败和快速恢复\n- Fallback降级和在可能的情况下优雅地降级\n- 启用近实时监测，报警和操作控制\n\n\n<a name=\"problem\" />\n## Hystrix解决了什么问题?\n\n复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。\n\n\n例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：\n\n> 99.99<sup>30</sup>  =  99.7% uptime  \n> 10亿请求中的0.3%  = 3,000,000 次失败  \n> 即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用 \n> 随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.\n \n**现实通常会更残酷。**\n\n**如果你没有针对整个系统做快速恢复**，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。\n\n***\n\n \n\n当一切都ok的请求流看起来是这样的：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png)\n\n当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png)\n\n\n \n一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。\n在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png)\n\n \n\n当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。\n如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！\n\n\n网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。\n所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。\n\n\n\n<a name=\"principles\" />\n## What Design Principles Underlie Hystrix?\n\nHystrix works by:\n\n* 防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程\n* 隔离和减低负载，对无法及时处理时快速失败，而不是排队\n* 提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。\n* 采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。\n* 通过最近实时metrics、监控和警告来优化以满足近实时性的要求\n* 在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求\n* 能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求\n\n\n\n<a name=\"how\" />\n## How Does Hystrix Accomplish Its Goals?\n\nHystrix does this by:\n\n \n- 使用`HystrixCommand`或者`HystrixObservableCommand`包装所有的外部系统（或者依赖服务）调用，每个`HystrixCommand`或者`HystrixObservableCommand`在隔离的线程中/信号下执行（参考这个例子[command pattern](http://en.wikipedia.org/wiki/Command_pattern)）\n\n- 超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。\n\n- 为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。\n- 测量成功，失败（抛出异常），超时和线程拒绝。\n- 如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。\n- 当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。\n- 近实时监控度量，动态配置修改\n \n \n\n当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。\n\n \n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png)\n\n \n\n\n\n","slug":"hystrix/Hystrix简介","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emuq000bc9inhw9iz3df","content":"<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png\" alt=\"\"></p>\n<ol>\n<li><a href=\"#what\">What Is Hystrix?</a></li>\n<li><a href=\"#purpose\">What Is Hystrix For?</a></li>\n<li><a href=\"#problem\">What Problem Does Hystrix Solve?</a></li>\n<li><a href=\"#principles\">What Design Principles Underlie Hystrix?</a></li>\n<li><a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a></li>\n</ol>\n<p><a name=\"what\"></a></p>\n<h2 id=\"Hystrix是什么\"><a href=\"#Hystrix是什么\" class=\"headerlink\" title=\"Hystrix是什么?\"></a>Hystrix是什么?</h2><p>在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。</p>\n<h4 id=\"Hystrix的历史\"><a href=\"#Hystrix的历史\" class=\"headerlink\" title=\"Hystrix的历史\"></a>Hystrix的历史</h4><p>Hystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。</p>\n<p>下面的链接提供了围绕Hystrix和挑战，试图解决：</p>\n<ul>\n<li><a href=\"http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html\" target=\"_blank\" rel=\"external\">&ldquo;Making Netflix API More Resilient&rdquo;</a></li>\n<li><a href=\"http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html\" target=\"_blank\" rel=\"external\">&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;</a></li>\n<li><a href=\"https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012\" target=\"_blank\" rel=\"external\">&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;</a></li>\n<li><a href=\"http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html\" target=\"_blank\" rel=\"external\">&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;</a></li>\n<li>[&ldquo;Application Resilience Engineering &amp; Operations at Netflix&rdquo;] (<a href=\"https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix\" target=\"_blank\" rel=\"external\">https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix</a>)</li>\n</ul>\n<p><a name=\"purpose\"></a></p>\n<h2 id=\"Hystrix能做什么\"><a href=\"#Hystrix能做什么\" class=\"headerlink\" title=\"Hystrix能做什么?\"></a>Hystrix能做什么?</h2><p>Hystrix被设计为：</p>\n<ul>\n<li>保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障</li>\n<li>在复杂的分布式系统中阻止连锁故障反应</li>\n<li>快速失败和快速恢复</li>\n<li>Fallback降级和在可能的情况下优雅地降级</li>\n<li>启用近实时监测，报警和操作控制</li>\n</ul>\n<p><a name=\"problem\"></a></p>\n<h2 id=\"Hystrix解决了什么问题\"><a href=\"#Hystrix解决了什么问题\" class=\"headerlink\" title=\"Hystrix解决了什么问题?\"></a>Hystrix解决了什么问题?</h2><p>复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。</p>\n<p>例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：</p>\n<blockquote>\n<p>99.99<sup>30</sup>  =  99.7% uptime<br>10亿请求中的0.3%  = 3,000,000 次失败<br>即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用<br>随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.</p>\n</blockquote>\n<p><strong>现实通常会更残酷。</strong></p>\n<p><strong>如果你没有针对整个系统做快速恢复</strong>，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。</p>\n<hr>\n<p>当一切都ok的请求流看起来是这样的：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png\" alt=\"\"></p>\n<p>当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png\" alt=\"\"></p>\n<p>一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。<br>在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png\" alt=\"\"></p>\n<p>当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。<br>如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！</p>\n<p>网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。<br>所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。</p>\n<p><a name=\"principles\"></a></p>\n<h2 id=\"What-Design-Principles-Underlie-Hystrix\"><a href=\"#What-Design-Principles-Underlie-Hystrix\" class=\"headerlink\" title=\"What Design Principles Underlie Hystrix?\"></a>What Design Principles Underlie Hystrix?</h2><p>Hystrix works by:</p>\n<ul>\n<li>防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程</li>\n<li>隔离和减低负载，对无法及时处理时快速失败，而不是排队</li>\n<li>提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。</li>\n<li>采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。</li>\n<li>通过最近实时metrics、监控和警告来优化以满足近实时性的要求</li>\n<li>在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求</li>\n<li>能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求</li>\n</ul>\n<p><a name=\"how\"></a></p>\n<h2 id=\"How-Does-Hystrix-Accomplish-Its-Goals\"><a href=\"#How-Does-Hystrix-Accomplish-Its-Goals\" class=\"headerlink\" title=\"How Does Hystrix Accomplish Its Goals?\"></a>How Does Hystrix Accomplish Its Goals?</h2><p>Hystrix does this by:</p>\n<ul>\n<li><p>使用<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>包装所有的外部系统（或者依赖服务）调用，每个<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>在隔离的线程中/信号下执行（参考这个例子<a href=\"http://en.wikipedia.org/wiki/Command_pattern\" target=\"_blank\" rel=\"external\">command pattern</a>）</p>\n</li>\n<li><p>超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。</p>\n</li>\n<li><p>为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。</p>\n</li>\n<li>测量成功，失败（抛出异常），超时和线程拒绝。</li>\n<li>如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。</li>\n<li>当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。</li>\n<li>近实时监控度量，动态配置修改</li>\n</ul>\n<p>当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png\" alt=\"\"></p>\n<ol>\n<li><a href=\"#what\">What Is Hystrix?</a></li>\n<li><a href=\"#purpose\">What Is Hystrix For?</a></li>\n<li><a href=\"#problem\">What Problem Does Hystrix Solve?</a></li>\n<li><a href=\"#principles\">What Design Principles Underlie Hystrix?</a></li>\n<li><a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a></li>\n</ol>\n<p><a name=\"what\" /></p>\n<h2 id=\"Hystrix是什么\"><a href=\"#Hystrix是什么\" class=\"headerlink\" title=\"Hystrix是什么?\"></a>Hystrix是什么?</h2><p>在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。</p>\n<h4 id=\"Hystrix的历史\"><a href=\"#Hystrix的历史\" class=\"headerlink\" title=\"Hystrix的历史\"></a>Hystrix的历史</h4><p>Hystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。</p>\n<p>下面的链接提供了围绕Hystrix和挑战，试图解决：</p>\n<ul>\n<li><a href=\"http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html\">&ldquo;Making Netflix API More Resilient&rdquo;</a></li>\n<li><a href=\"http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html\">&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;</a></li>\n<li><a href=\"https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012\">&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;</a></li>\n<li><a href=\"http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html\">&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;</a></li>\n<li>[&ldquo;Application Resilience Engineering &amp; Operations at Netflix&rdquo;] (<a href=\"https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix\">https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix</a>)</li>\n</ul>\n<p><a name=\"purpose\" /></p>\n<h2 id=\"Hystrix能做什么\"><a href=\"#Hystrix能做什么\" class=\"headerlink\" title=\"Hystrix能做什么?\"></a>Hystrix能做什么?</h2><p>Hystrix被设计为：</p>\n<ul>\n<li>保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障</li>\n<li>在复杂的分布式系统中阻止连锁故障反应</li>\n<li>快速失败和快速恢复</li>\n<li>Fallback降级和在可能的情况下优雅地降级</li>\n<li>启用近实时监测，报警和操作控制</li>\n</ul>\n<p><a name=\"problem\" /></p>\n<h2 id=\"Hystrix解决了什么问题\"><a href=\"#Hystrix解决了什么问题\" class=\"headerlink\" title=\"Hystrix解决了什么问题?\"></a>Hystrix解决了什么问题?</h2><p>复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。</p>\n<p>例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：</p>\n<blockquote>\n<p>99.99<sup>30</sup>  =  99.7% uptime<br>10亿请求中的0.3%  = 3,000,000 次失败<br>即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用<br>随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.</p>\n</blockquote>\n<p><strong>现实通常会更残酷。</strong></p>\n<p><strong>如果你没有针对整个系统做快速恢复</strong>，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。</p>\n<hr>\n<p>当一切都ok的请求流看起来是这样的：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png\" alt=\"\"></p>\n<p>当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png\" alt=\"\"></p>\n<p>一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。<br>在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png\" alt=\"\"></p>\n<p>当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。<br>如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！</p>\n<p>网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。<br>所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。</p>\n<p><a name=\"principles\" /></p>\n<h2 id=\"What-Design-Principles-Underlie-Hystrix\"><a href=\"#What-Design-Principles-Underlie-Hystrix\" class=\"headerlink\" title=\"What Design Principles Underlie Hystrix?\"></a>What Design Principles Underlie Hystrix?</h2><p>Hystrix works by:</p>\n<ul>\n<li>防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程</li>\n<li>隔离和减低负载，对无法及时处理时快速失败，而不是排队</li>\n<li>提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。</li>\n<li>采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。</li>\n<li>通过最近实时metrics、监控和警告来优化以满足近实时性的要求</li>\n<li>在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求</li>\n<li>能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求</li>\n</ul>\n<p><a name=\"how\" /></p>\n<h2 id=\"How-Does-Hystrix-Accomplish-Its-Goals\"><a href=\"#How-Does-Hystrix-Accomplish-Its-Goals\" class=\"headerlink\" title=\"How Does Hystrix Accomplish Its Goals?\"></a>How Does Hystrix Accomplish Its Goals?</h2><p>Hystrix does this by:</p>\n<ul>\n<li><p>使用<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>包装所有的外部系统（或者依赖服务）调用，每个<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>在隔离的线程中/信号下执行（参考这个例子<a href=\"http://en.wikipedia.org/wiki/Command_pattern\">command pattern</a>）</p>\n</li>\n<li><p>超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。</p>\n</li>\n<li><p>为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。</p>\n</li>\n<li>测量成功，失败（抛出异常），超时和线程拒绝。</li>\n<li>如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。</li>\n<li>当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。</li>\n<li>近实时监控度量，动态配置修改</li>\n</ul>\n<p>当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png\" alt=\"\"></p>\n"},{"title":"Hystrix降级模式总结","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png","date":"2016-03-09T01:22:47.000Z","keywords":"hystrix","description":"Hystrix降级","_content":"\n## 失败回退降级模式\n失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。\n\n* 快速失败Fail Fast\n\t* 如果业务异常，就抛出一个异常\n* 静默失败Fail Silent\n\t* 失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等\n* Fallback: Static\n\t* 失败时，返回默认值来替代引起失败的原因\n* Fallback: Stubbed\n\t* 返回替代值，还没理解\n* Fallback: Cache via Network\n\t* 当后端服务失败时，从网络缓存获取返回值\n* Primary + Secondary with Fallback\n\t* 故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式\n* Client Doesn’t Perform Network Access\n\t* \n* Get-Set-Get with Request Cache Invalidation","source":"_posts/hystrix/Hystrix降级模式总结.md","raw":"---\ntitle: Hystrix降级模式总结\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png'\ndate: 2016-03-09 09:22:47\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\nkeywords: hystrix\ndescription: Hystrix降级\n---\n\n## 失败回退降级模式\n失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。\n\n* 快速失败Fail Fast\n\t* 如果业务异常，就抛出一个异常\n* 静默失败Fail Silent\n\t* 失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等\n* Fallback: Static\n\t* 失败时，返回默认值来替代引起失败的原因\n* Fallback: Stubbed\n\t* 返回替代值，还没理解\n* Fallback: Cache via Network\n\t* 当后端服务失败时，从网络缓存获取返回值\n* Primary + Secondary with Fallback\n\t* 故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式\n* Client Doesn’t Perform Network Access\n\t* \n* Get-Set-Get with Request Cache Invalidation","slug":"hystrix/Hystrix降级模式总结","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emus000ec9in93r8pqlp","content":"<h2 id=\"失败回退降级模式\"><a href=\"#失败回退降级模式\" class=\"headerlink\" title=\"失败回退降级模式\"></a>失败回退降级模式</h2><p>失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。</p>\n<ul>\n<li>快速失败Fail Fast<ul>\n<li>如果业务异常，就抛出一个异常</li>\n</ul>\n</li>\n<li>静默失败Fail Silent<ul>\n<li>失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等</li>\n</ul>\n</li>\n<li>Fallback: Static<ul>\n<li>失败时，返回默认值来替代引起失败的原因</li>\n</ul>\n</li>\n<li>Fallback: Stubbed<ul>\n<li>返回替代值，还没理解</li>\n</ul>\n</li>\n<li>Fallback: Cache via Network<ul>\n<li>当后端服务失败时，从网络缓存获取返回值</li>\n</ul>\n</li>\n<li>Primary + Secondary with Fallback<ul>\n<li>故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式</li>\n</ul>\n</li>\n<li>Client Doesn’t Perform Network Access<br>  * </li>\n<li>Get-Set-Get with Request Cache Invalidation</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"失败回退降级模式\"><a href=\"#失败回退降级模式\" class=\"headerlink\" title=\"失败回退降级模式\"></a>失败回退降级模式</h2><p>失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。</p>\n<ul>\n<li>快速失败Fail Fast<ul>\n<li>如果业务异常，就抛出一个异常</li>\n</ul>\n</li>\n<li>静默失败Fail Silent<ul>\n<li>失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等</li>\n</ul>\n</li>\n<li>Fallback: Static<ul>\n<li>失败时，返回默认值来替代引起失败的原因</li>\n</ul>\n</li>\n<li>Fallback: Stubbed<ul>\n<li>返回替代值，还没理解</li>\n</ul>\n</li>\n<li>Fallback: Cache via Network<ul>\n<li>当后端服务失败时，从网络缓存获取返回值</li>\n</ul>\n</li>\n<li>Primary + Secondary with Fallback<ul>\n<li>故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式</li>\n</ul>\n</li>\n<li>Client Doesn’t Perform Network Access<br>  * </li>\n<li>Get-Set-Get with Request Cache Invalidation</li>\n</ul>\n"},{"title":"Feign正确的使用方法和性能优化注意事项","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/P60724-115835.jpg","date":"2016-09-06T11:22:47.000Z","keywords":["Feign","微服务","Spring Cloud"],"description":null,"_content":"\n## Feign正确的使用方法和性能优化注意事项\n\n### 1. feign自定义Configuration和root 容器有效隔离。\n\n- 用@Configuration注解\n- 不能在主@ComponentScan (or @SpringBootApplication)范围内，从其包名上分离\n- 注意避免包扫描重叠，最好的方法是明确的指定包名\n\n### 2. Spring Cloud Netflix 提供了默认的Bean类型:\n\n* Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)\n* Encoder feignEncoder: SpringEncoder\n* Logger feignLogger: Slf4jLogger\n* Contract feignContract: SpringMvcContract\n* Feign.Builder feignBuilder: HystrixFeign.Builder\n\n### 3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\n\n* Logger.Level\n* Retryer\n* ErrorDecoder\n* Request.Options\n* Collection<RequestInterceptor>\n\n### 4. 自定义feign的消息编码解码器：\n\t\n不要在如下代码中getObject方法内new 对象，外部会频繁调用getObject方法。\n\t\n```java\n\tObjectFactory<HttpMessageConverters> messageConvertersObjectFactory = new ObjectFactory<HttpMessageConverters>() {\n\t@Override\n\tpublic HttpMessageConverters getObject() throws BeansException {\n\t\treturn httpMessageConverters;\n\t}\n\t};\n```\n\n### 5. 注意测试环境和生产环境，注意正确使用feign日志级别。\n\n### 6. apacheHttpclient或者其他client的正确配置：\n\t\n- apacheHttpclient自定义配置放在spring root context，不要在FeignContext，否则不会起作用。\n- apacheHttpclient 连接池配置合理地连接和其他参数\n\n### 7. Feign配置\n\n```properties\n#Hystrix支持，如果为true，hystrix库必须在classpath中\nfeign.hystrix.enabled=false\n \n#请求和响应GZIP压缩支持\nfeign.compression.request.enabled=true\nfeign.compression.response.enabled=true\n#支持压缩的mime types\nfeign.compression.request.enabled=true\nfeign.compression.request.mime-types=text/xml,application/xml,application/json\nfeign.compression.request.min-request-size=2048\n\n# 日志支持\nlogging.level.project.user.UserClient: DEBUG\n\t\n\n```\n\n### 8. Logger.Level支持\n\n必须为每一个Feign Client配置来告诉Feign如何输出日志，可选：\n\t\n* **NONE**, No logging (**DEFAULT**).\n* **BASIC**,  Log only the request method and URL and the response status code and execution time.\n* **HEADERS**, Log the basic information along with request and response headers.\n* **FULL**, Log the headers, body, and metadata for both requests and responses.\n\n### 9. FeignClient.fallback 正确的使用方法\n\n 配置的fallback class也必须在FeignClient Configuration中实例化，否则会报\n` java.lang.IllegalStateException: No fallback instance of type class `异常。\n\n例子：\n\n```java\n\t@FeignClient(name = \"hello\", fallback = HystrixClientFallback.class)\n\tpublic interface HystrixClient {\n\t    @RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n\t    Hello iFailSometimes();\n\t}\n\t\n\tpublic class HystrixClientFallback implements HystrixClient {\n\t    @Override\n\t    public Hello iFailSometimes() {\n\t        return new Hello(\"fallback\");\n\t    }\n\t}\n\t\n\t@Configuration\n\tpublic class FooConfiguration {\n\t    @Bean\n\t\t@Scope(\"prototype\")\n\t\tpublic Feign.Builder feignBuilder() {\n\t\t\treturn Feign.builder();\n\t\t}\n\t\t\n\t\t@Bean\n\t\tpublic HystrixClientFallback fb(){\n\t\t\treturn new HystrixClientFallback();\n\t\t}\n\t\t\n\t}\n\t\n```\n\n### 10. 使用Feign Client 和@RequestMapping时，注意事项\n \n \n当前工程中有和Feign Client中一样的Endpoint时，Feign Client的类上不能用@RequestMapping注解否则，当前工程该endpoint http请求且使用accpet时会报404.\n  \n \n下面的例子：\n \n\n**有一个 Controller**\n\n```java\n@RestController\n@RequestMapping(\"/v1/card\")\npublic class IndexApi {\n\n    @PostMapping(\"balance\")\n    @ResponseBody\n    public Info index() {\n        Info.Builder builder = new Info.Builder();\n        builder.withDetail(\"x\", 2);\n        builder.withDetail(\"y\", 2);\n        return builder.build();\n    }\n}\n\n```\n\n**有一个Feign Client**\n\n```java\n@FeignClient(\n        name = \"card\",\n        url = \"http://localhost:7913\",\n        fallback = CardFeignClientFallback.class,\n        configuration = FeignClientConfiguration.class\n)\n@RequestMapping(value = \"/v1/card\")\npublic interface CardFeignClient {\n\n    @RequestMapping(value = \"/balance\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    Info info();\n\n}\n```\n\nif @RequestMapping is used on class, when invoke http /v1/card/balance, like this :\n\n如果 @RequestMapping注解被用在FeignClient类上，当像如下代码请求/v1/card/balance时，注意有Accept header：\n\n```yaml\nContent-Type: application/json\nAccept: application/json\n\nPOST http://localhost:7913/v1/card/balance\n```\n\n\n那么会返回 404。\n\n**如果不包含Accept header时请求，则是OK：**\n\n```\nContent-Type:application/json\nPOST http://localhost:7913/v1/card/balance\n```\n\n\n**或者像下面不在Feign Client上使用@RequestMapping注解,请求也是ok，无论是否包含Accept:**\n\n```java\n\n@FeignClient(\n        name = \"card\",\n        url = \"http://localhost:7913\",\n        fallback = CardFeignClientFallback.class,\n        configuration = FeignClientConfiguration.class\n)\n\npublic interface CardFeignClient {\n\n    @RequestMapping(value = \"/v1/card/balance\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    Info info();\n\n}\n\n```\n \n\n\n\n ","source":"_posts/微服务/Feign使用性能优化.md","raw":"---\ntitle: Feign正确的使用方法和性能优化注意事项\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/P60724-115835.jpg'\ndate: 2016-09-06 19:22:47\ncategories:\n\t- 微服务\ntags:\n\t- Feign\n\t- 微服务\n\t- Spring Cloud\nkeywords:\n\t- Feign\n\t- 微服务\n\t- Spring Cloud\ndescription:\n---\n\n## Feign正确的使用方法和性能优化注意事项\n\n### 1. feign自定义Configuration和root 容器有效隔离。\n\n- 用@Configuration注解\n- 不能在主@ComponentScan (or @SpringBootApplication)范围内，从其包名上分离\n- 注意避免包扫描重叠，最好的方法是明确的指定包名\n\n### 2. Spring Cloud Netflix 提供了默认的Bean类型:\n\n* Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)\n* Encoder feignEncoder: SpringEncoder\n* Logger feignLogger: Slf4jLogger\n* Contract feignContract: SpringMvcContract\n* Feign.Builder feignBuilder: HystrixFeign.Builder\n\n### 3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\n\n* Logger.Level\n* Retryer\n* ErrorDecoder\n* Request.Options\n* Collection<RequestInterceptor>\n\n### 4. 自定义feign的消息编码解码器：\n\t\n不要在如下代码中getObject方法内new 对象，外部会频繁调用getObject方法。\n\t\n```java\n\tObjectFactory<HttpMessageConverters> messageConvertersObjectFactory = new ObjectFactory<HttpMessageConverters>() {\n\t@Override\n\tpublic HttpMessageConverters getObject() throws BeansException {\n\t\treturn httpMessageConverters;\n\t}\n\t};\n```\n\n### 5. 注意测试环境和生产环境，注意正确使用feign日志级别。\n\n### 6. apacheHttpclient或者其他client的正确配置：\n\t\n- apacheHttpclient自定义配置放在spring root context，不要在FeignContext，否则不会起作用。\n- apacheHttpclient 连接池配置合理地连接和其他参数\n\n### 7. Feign配置\n\n```properties\n#Hystrix支持，如果为true，hystrix库必须在classpath中\nfeign.hystrix.enabled=false\n \n#请求和响应GZIP压缩支持\nfeign.compression.request.enabled=true\nfeign.compression.response.enabled=true\n#支持压缩的mime types\nfeign.compression.request.enabled=true\nfeign.compression.request.mime-types=text/xml,application/xml,application/json\nfeign.compression.request.min-request-size=2048\n\n# 日志支持\nlogging.level.project.user.UserClient: DEBUG\n\t\n\n```\n\n### 8. Logger.Level支持\n\n必须为每一个Feign Client配置来告诉Feign如何输出日志，可选：\n\t\n* **NONE**, No logging (**DEFAULT**).\n* **BASIC**,  Log only the request method and URL and the response status code and execution time.\n* **HEADERS**, Log the basic information along with request and response headers.\n* **FULL**, Log the headers, body, and metadata for both requests and responses.\n\n### 9. FeignClient.fallback 正确的使用方法\n\n 配置的fallback class也必须在FeignClient Configuration中实例化，否则会报\n` java.lang.IllegalStateException: No fallback instance of type class `异常。\n\n例子：\n\n```java\n\t@FeignClient(name = \"hello\", fallback = HystrixClientFallback.class)\n\tpublic interface HystrixClient {\n\t    @RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n\t    Hello iFailSometimes();\n\t}\n\t\n\tpublic class HystrixClientFallback implements HystrixClient {\n\t    @Override\n\t    public Hello iFailSometimes() {\n\t        return new Hello(\"fallback\");\n\t    }\n\t}\n\t\n\t@Configuration\n\tpublic class FooConfiguration {\n\t    @Bean\n\t\t@Scope(\"prototype\")\n\t\tpublic Feign.Builder feignBuilder() {\n\t\t\treturn Feign.builder();\n\t\t}\n\t\t\n\t\t@Bean\n\t\tpublic HystrixClientFallback fb(){\n\t\t\treturn new HystrixClientFallback();\n\t\t}\n\t\t\n\t}\n\t\n```\n\n### 10. 使用Feign Client 和@RequestMapping时，注意事项\n \n \n当前工程中有和Feign Client中一样的Endpoint时，Feign Client的类上不能用@RequestMapping注解否则，当前工程该endpoint http请求且使用accpet时会报404.\n  \n \n下面的例子：\n \n\n**有一个 Controller**\n\n```java\n@RestController\n@RequestMapping(\"/v1/card\")\npublic class IndexApi {\n\n    @PostMapping(\"balance\")\n    @ResponseBody\n    public Info index() {\n        Info.Builder builder = new Info.Builder();\n        builder.withDetail(\"x\", 2);\n        builder.withDetail(\"y\", 2);\n        return builder.build();\n    }\n}\n\n```\n\n**有一个Feign Client**\n\n```java\n@FeignClient(\n        name = \"card\",\n        url = \"http://localhost:7913\",\n        fallback = CardFeignClientFallback.class,\n        configuration = FeignClientConfiguration.class\n)\n@RequestMapping(value = \"/v1/card\")\npublic interface CardFeignClient {\n\n    @RequestMapping(value = \"/balance\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    Info info();\n\n}\n```\n\nif @RequestMapping is used on class, when invoke http /v1/card/balance, like this :\n\n如果 @RequestMapping注解被用在FeignClient类上，当像如下代码请求/v1/card/balance时，注意有Accept header：\n\n```yaml\nContent-Type: application/json\nAccept: application/json\n\nPOST http://localhost:7913/v1/card/balance\n```\n\n\n那么会返回 404。\n\n**如果不包含Accept header时请求，则是OK：**\n\n```\nContent-Type:application/json\nPOST http://localhost:7913/v1/card/balance\n```\n\n\n**或者像下面不在Feign Client上使用@RequestMapping注解,请求也是ok，无论是否包含Accept:**\n\n```java\n\n@FeignClient(\n        name = \"card\",\n        url = \"http://localhost:7913\",\n        fallback = CardFeignClientFallback.class,\n        configuration = FeignClientConfiguration.class\n)\n\npublic interface CardFeignClient {\n\n    @RequestMapping(value = \"/v1/card/balance\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    Info info();\n\n}\n\n```\n \n\n\n\n ","slug":"微服务/Feign使用性能优化","published":1,"updated":"2016-11-24T09:08:09.000Z","_id":"civw4emuy000fc9in0noqfija","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Feign正确的使用方法和性能优化注意事项\"><a href=\"#Feign正确的使用方法和性能优化注意事项\" class=\"headerlink\" title=\"Feign正确的使用方法和性能优化注意事项\"></a>Feign正确的使用方法和性能优化注意事项</h2><h3 id=\"1-feign自定义Configuration和root-容器有效隔离。\"><a href=\"#1-feign自定义Configuration和root-容器有效隔离。\" class=\"headerlink\" title=\"1. feign自定义Configuration和root 容器有效隔离。\"></a>1. feign自定义Configuration和root 容器有效隔离。</h3><ul>\n<li>用@Configuration注解</li>\n<li>不能在主@ComponentScan (or @SpringBootApplication)范围内，从其包名上分离</li>\n<li>注意避免包扫描重叠，最好的方法是明确的指定包名</li>\n</ul>\n<h3 id=\"2-Spring-Cloud-Netflix-提供了默认的Bean类型\"><a href=\"#2-Spring-Cloud-Netflix-提供了默认的Bean类型\" class=\"headerlink\" title=\"2. Spring Cloud Netflix 提供了默认的Bean类型:\"></a>2. Spring Cloud Netflix 提供了默认的Bean类型:</h3><ul>\n<li>Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)</li>\n<li>Encoder feignEncoder: SpringEncoder</li>\n<li>Logger feignLogger: Slf4jLogger</li>\n<li>Contract feignContract: SpringMvcContract</li>\n<li>Feign.Builder feignBuilder: HystrixFeign.Builder</li>\n</ul>\n<h3 id=\"3-Spring-Cloud-Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\"><a href=\"#3-Spring-Cloud-Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\" class=\"headerlink\" title=\"3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\"></a>3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：</h3><ul>\n<li>Logger.Level</li>\n<li>Retryer</li>\n<li>ErrorDecoder</li>\n<li>Request.Options</li>\n<li>Collection<requestinterceptor></requestinterceptor></li>\n</ul>\n<h3 id=\"4-自定义feign的消息编码解码器：\"><a href=\"#4-自定义feign的消息编码解码器：\" class=\"headerlink\" title=\"4. 自定义feign的消息编码解码器：\"></a>4. 自定义feign的消息编码解码器：</h3><p>不要在如下代码中getObject方法内new 对象，外部会频繁调用getObject方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObjectFactory&lt;HttpMessageConverters&gt; messageConvertersObjectFactory = <span class=\"keyword\">new</span> ObjectFactory&lt;HttpMessageConverters&gt;() &#123;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverters <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> httpMessageConverters;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"5-注意测试环境和生产环境，注意正确使用feign日志级别。\"><a href=\"#5-注意测试环境和生产环境，注意正确使用feign日志级别。\" class=\"headerlink\" title=\"5. 注意测试环境和生产环境，注意正确使用feign日志级别。\"></a>5. 注意测试环境和生产环境，注意正确使用feign日志级别。</h3><h3 id=\"6-apacheHttpclient或者其他client的正确配置：\"><a href=\"#6-apacheHttpclient或者其他client的正确配置：\" class=\"headerlink\" title=\"6. apacheHttpclient或者其他client的正确配置：\"></a>6. apacheHttpclient或者其他client的正确配置：</h3><ul>\n<li>apacheHttpclient自定义配置放在spring root context，不要在FeignContext，否则不会起作用。</li>\n<li>apacheHttpclient 连接池配置合理地连接和其他参数</li>\n</ul>\n<h3 id=\"7-Feign配置\"><a href=\"#7-Feign配置\" class=\"headerlink\" title=\"7. Feign配置\"></a>7. Feign配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Hystrix支持，如果为true，hystrix库必须在classpath中</div><div class=\"line\">feign.hystrix.enabled=false</div><div class=\"line\"> </div><div class=\"line\">#请求和响应GZIP压缩支持</div><div class=\"line\">feign.compression.request.enabled=true</div><div class=\"line\">feign.compression.response.enabled=true</div><div class=\"line\">#支持压缩的mime types</div><div class=\"line\">feign.compression.request.enabled=true</div><div class=\"line\">feign.compression.request.mime-types=text/xml,application/xml,application/json</div><div class=\"line\">feign.compression.request.min-request-size=2048</div><div class=\"line\"></div><div class=\"line\"># 日志支持</div><div class=\"line\">logging.level.project.user.UserClient: DEBUG</div></pre></td></tr></table></figure>\n<h3 id=\"8-Logger-Level支持\"><a href=\"#8-Logger-Level支持\" class=\"headerlink\" title=\"8. Logger.Level支持\"></a>8. Logger.Level支持</h3><p>必须为每一个Feign Client配置来告诉Feign如何输出日志，可选：</p>\n<ul>\n<li><strong>NONE</strong>, No logging (<strong>DEFAULT</strong>).</li>\n<li><strong>BASIC</strong>,  Log only the request method and URL and the response status code and execution time.</li>\n<li><strong>HEADERS</strong>, Log the basic information along with request and response headers.</li>\n<li><strong>FULL</strong>, Log the headers, body, and metadata for both requests and responses.</li>\n</ul>\n<h3 id=\"9-FeignClient-fallback-正确的使用方法\"><a href=\"#9-FeignClient-fallback-正确的使用方法\" class=\"headerlink\" title=\"9. FeignClient.fallback 正确的使用方法\"></a>9. FeignClient.fallback 正确的使用方法</h3><p> 配置的fallback class也必须在FeignClient Configuration中实例化，否则会报<br><code>java.lang.IllegalStateException: No fallback instance of type class</code>异常。</p>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"hello\"</span>, fallback = HystrixClientFallback.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HystrixClient</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(method = RequestMethod.GET, value = <span class=\"string\">\"/hello\"</span>)</div><div class=\"line\">    <span class=\"function\">Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixClientFallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">HystrixClient</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hello(<span class=\"string\">\"fallback\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooConfiguration</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"meta\">@Scope</span>(<span class=\"string\">\"prototype\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">public</span> Feign.<span class=\"function\">Builder <span class=\"title\">feignBuilder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> Feign.builder();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HystrixClientFallback <span class=\"title\">fb</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixClientFallback();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"10-使用Feign-Client-和-RequestMapping时，注意事项\"><a href=\"#10-使用Feign-Client-和-RequestMapping时，注意事项\" class=\"headerlink\" title=\"10. 使用Feign Client 和@RequestMapping时，注意事项\"></a>10. 使用Feign Client 和@RequestMapping时，注意事项</h3><p>当前工程中有和Feign Client中一样的Endpoint时，Feign Client的类上不能用@RequestMapping注解否则，当前工程该endpoint http请求且使用accpet时会报404.</p>\n<p>下面的例子：</p>\n<p><strong>有一个 Controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/v1/card\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"balance\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Info <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Info.Builder builder = <span class=\"keyword\">new</span> Info.Builder();</div><div class=\"line\">        builder.withDetail(<span class=\"string\">\"x\"</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        builder.withDetail(<span class=\"string\">\"y\"</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> builder.build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>有一个Feign Client</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(</div><div class=\"line\">        name = <span class=\"string\">\"card\"</span>,</div><div class=\"line\">        url = <span class=\"string\">\"http://localhost:7913\"</span>,</div><div class=\"line\">        fallback = CardFeignClientFallback.class,</div><div class=\"line\">        configuration = FeignClientConfiguration.class</div><div class=\"line\">)</div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/v1/card\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CardFeignClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/balance\"</span>, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</div><div class=\"line\">    <span class=\"function\">Info <span class=\"title\">info</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>if @RequestMapping is used on class, when invoke http /v1/card/balance, like this :</p>\n<p>如果 @RequestMapping注解被用在FeignClient类上，当像如下代码请求/v1/card/balance时，注意有Accept header：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Content-Type:</span> application/json</div><div class=\"line\"><span class=\"attr\">Accept:</span> application/json</div><div class=\"line\"></div><div class=\"line\">POST http://localhost:<span class=\"number\">7913</span>/v1/card/balance</div></pre></td></tr></table></figure>\n<p>那么会返回 404。</p>\n<p><strong>如果不包含Accept header时请求，则是OK：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Type:application/json</div><div class=\"line\">POST http://localhost:7913/v1/card/balance</div></pre></td></tr></table></figure>\n<p><strong>或者像下面不在Feign Client上使用@RequestMapping注解,请求也是ok，无论是否包含Accept:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@FeignClient</span>(</div><div class=\"line\">        name = <span class=\"string\">\"card\"</span>,</div><div class=\"line\">        url = <span class=\"string\">\"http://localhost:7913\"</span>,</div><div class=\"line\">        fallback = CardFeignClientFallback.class,</div><div class=\"line\">        configuration = FeignClientConfiguration.class</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CardFeignClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/v1/card/balance\"</span>, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</div><div class=\"line\">    <span class=\"function\">Info <span class=\"title\">info</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Feign正确的使用方法和性能优化注意事项\"><a href=\"#Feign正确的使用方法和性能优化注意事项\" class=\"headerlink\" title=\"Feign正确的使用方法和性能优化注意事项\"></a>Feign正确的使用方法和性能优化注意事项</h2><h3 id=\"1-feign自定义Configuration和root-容器有效隔离。\"><a href=\"#1-feign自定义Configuration和root-容器有效隔离。\" class=\"headerlink\" title=\"1. feign自定义Configuration和root 容器有效隔离。\"></a>1. feign自定义Configuration和root 容器有效隔离。</h3><ul>\n<li>用@Configuration注解</li>\n<li>不能在主@ComponentScan (or @SpringBootApplication)范围内，从其包名上分离</li>\n<li>注意避免包扫描重叠，最好的方法是明确的指定包名</li>\n</ul>\n<h3 id=\"2-Spring-Cloud-Netflix-提供了默认的Bean类型\"><a href=\"#2-Spring-Cloud-Netflix-提供了默认的Bean类型\" class=\"headerlink\" title=\"2. Spring Cloud Netflix 提供了默认的Bean类型:\"></a>2. Spring Cloud Netflix 提供了默认的Bean类型:</h3><ul>\n<li>Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)</li>\n<li>Encoder feignEncoder: SpringEncoder</li>\n<li>Logger feignLogger: Slf4jLogger</li>\n<li>Contract feignContract: SpringMvcContract</li>\n<li>Feign.Builder feignBuilder: HystrixFeign.Builder</li>\n</ul>\n<h3 id=\"3-Spring-Cloud-Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\"><a href=\"#3-Spring-Cloud-Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\" class=\"headerlink\" title=\"3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\"></a>3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：</h3><ul>\n<li>Logger.Level</li>\n<li>Retryer</li>\n<li>ErrorDecoder</li>\n<li>Request.Options</li>\n<li>Collection<RequestInterceptor></li>\n</ul>\n<h3 id=\"4-自定义feign的消息编码解码器：\"><a href=\"#4-自定义feign的消息编码解码器：\" class=\"headerlink\" title=\"4. 自定义feign的消息编码解码器：\"></a>4. 自定义feign的消息编码解码器：</h3><p>不要在如下代码中getObject方法内new 对象，外部会频繁调用getObject方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObjectFactory&lt;HttpMessageConverters&gt; messageConvertersObjectFactory = <span class=\"keyword\">new</span> ObjectFactory&lt;HttpMessageConverters&gt;() &#123;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverters <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> httpMessageConverters;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"5-注意测试环境和生产环境，注意正确使用feign日志级别。\"><a href=\"#5-注意测试环境和生产环境，注意正确使用feign日志级别。\" class=\"headerlink\" title=\"5. 注意测试环境和生产环境，注意正确使用feign日志级别。\"></a>5. 注意测试环境和生产环境，注意正确使用feign日志级别。</h3><h3 id=\"6-apacheHttpclient或者其他client的正确配置：\"><a href=\"#6-apacheHttpclient或者其他client的正确配置：\" class=\"headerlink\" title=\"6. apacheHttpclient或者其他client的正确配置：\"></a>6. apacheHttpclient或者其他client的正确配置：</h3><ul>\n<li>apacheHttpclient自定义配置放在spring root context，不要在FeignContext，否则不会起作用。</li>\n<li>apacheHttpclient 连接池配置合理地连接和其他参数</li>\n</ul>\n<h3 id=\"7-Feign配置\"><a href=\"#7-Feign配置\" class=\"headerlink\" title=\"7. Feign配置\"></a>7. Feign配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Hystrix支持，如果为true，hystrix库必须在classpath中</div><div class=\"line\">feign.hystrix.enabled=false</div><div class=\"line\"> </div><div class=\"line\">#请求和响应GZIP压缩支持</div><div class=\"line\">feign.compression.request.enabled=true</div><div class=\"line\">feign.compression.response.enabled=true</div><div class=\"line\">#支持压缩的mime types</div><div class=\"line\">feign.compression.request.enabled=true</div><div class=\"line\">feign.compression.request.mime-types=text/xml,application/xml,application/json</div><div class=\"line\">feign.compression.request.min-request-size=2048</div><div class=\"line\"></div><div class=\"line\"># 日志支持</div><div class=\"line\">logging.level.project.user.UserClient: DEBUG</div></pre></td></tr></table></figure>\n<h3 id=\"8-Logger-Level支持\"><a href=\"#8-Logger-Level支持\" class=\"headerlink\" title=\"8. Logger.Level支持\"></a>8. Logger.Level支持</h3><p>必须为每一个Feign Client配置来告诉Feign如何输出日志，可选：</p>\n<ul>\n<li><strong>NONE</strong>, No logging (<strong>DEFAULT</strong>).</li>\n<li><strong>BASIC</strong>,  Log only the request method and URL and the response status code and execution time.</li>\n<li><strong>HEADERS</strong>, Log the basic information along with request and response headers.</li>\n<li><strong>FULL</strong>, Log the headers, body, and metadata for both requests and responses.</li>\n</ul>\n<h3 id=\"9-FeignClient-fallback-正确的使用方法\"><a href=\"#9-FeignClient-fallback-正确的使用方法\" class=\"headerlink\" title=\"9. FeignClient.fallback 正确的使用方法\"></a>9. FeignClient.fallback 正确的使用方法</h3><p> 配置的fallback class也必须在FeignClient Configuration中实例化，否则会报<br><code>java.lang.IllegalStateException: No fallback instance of type class</code>异常。</p>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"hello\"</span>, fallback = HystrixClientFallback.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HystrixClient</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(method = RequestMethod.GET, value = <span class=\"string\">\"/hello\"</span>)</div><div class=\"line\">    <span class=\"function\">Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixClientFallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">HystrixClient</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Hello <span class=\"title\">iFailSometimes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hello(<span class=\"string\">\"fallback\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooConfiguration</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"meta\">@Scope</span>(<span class=\"string\">\"prototype\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">public</span> Feign.<span class=\"function\">Builder <span class=\"title\">feignBuilder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> Feign.builder();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HystrixClientFallback <span class=\"title\">fb</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixClientFallback();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"10-使用Feign-Client-和-RequestMapping时，注意事项\"><a href=\"#10-使用Feign-Client-和-RequestMapping时，注意事项\" class=\"headerlink\" title=\"10. 使用Feign Client 和@RequestMapping时，注意事项\"></a>10. 使用Feign Client 和@RequestMapping时，注意事项</h3><p>当前工程中有和Feign Client中一样的Endpoint时，Feign Client的类上不能用@RequestMapping注解否则，当前工程该endpoint http请求且使用accpet时会报404.</p>\n<p>下面的例子：</p>\n<p><strong>有一个 Controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/v1/card\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"balance\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Info <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Info.Builder builder = <span class=\"keyword\">new</span> Info.Builder();</div><div class=\"line\">        builder.withDetail(<span class=\"string\">\"x\"</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        builder.withDetail(<span class=\"string\">\"y\"</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> builder.build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>有一个Feign Client</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(</div><div class=\"line\">        name = <span class=\"string\">\"card\"</span>,</div><div class=\"line\">        url = <span class=\"string\">\"http://localhost:7913\"</span>,</div><div class=\"line\">        fallback = CardFeignClientFallback.class,</div><div class=\"line\">        configuration = FeignClientConfiguration.class</div><div class=\"line\">)</div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/v1/card\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CardFeignClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/balance\"</span>, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</div><div class=\"line\">    <span class=\"function\">Info <span class=\"title\">info</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>if @RequestMapping is used on class, when invoke http /v1/card/balance, like this :</p>\n<p>如果 @RequestMapping注解被用在FeignClient类上，当像如下代码请求/v1/card/balance时，注意有Accept header：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Content-Type:</span> application/json</div><div class=\"line\"><span class=\"attr\">Accept:</span> application/json</div><div class=\"line\"></div><div class=\"line\">POST http://localhost:<span class=\"number\">7913</span>/v1/card/balance</div></pre></td></tr></table></figure>\n<p>那么会返回 404。</p>\n<p><strong>如果不包含Accept header时请求，则是OK：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Type:application/json</div><div class=\"line\">POST http://localhost:7913/v1/card/balance</div></pre></td></tr></table></figure>\n<p><strong>或者像下面不在Feign Client上使用@RequestMapping注解,请求也是ok，无论是否包含Accept:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@FeignClient</span>(</div><div class=\"line\">        name = <span class=\"string\">\"card\"</span>,</div><div class=\"line\">        url = <span class=\"string\">\"http://localhost:7913\"</span>,</div><div class=\"line\">        fallback = CardFeignClientFallback.class,</div><div class=\"line\">        configuration = FeignClientConfiguration.class</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CardFeignClient</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/v1/card/balance\"</span>, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</div><div class=\"line\">    <span class=\"function\">Info <span class=\"title\">info</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"RestTemplate遇上Hystrix","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/P60828-123503.jpg","date":"2016-09-02T01:20:00.000Z","keywords":null,"description":null,"_content":"\n# RestTemplate遇上Hystrix\n\n\n## RestTemplate集成Hystrix和Robbin\n\n查看RestTemplate源代码，可以看到RestTemplate继承了InterceptingHttpAccessor类，InterceptingHttpAccessor类通过ClientHttpRequestInterceptor接口提供了扩展功能。\n\n实现intercept方法，在该方法中封装HystrixCommand和Ribbon逻辑即可。\n\n下面的代码是集成了HystrixCommand的例子：\n\n```java\n@Override\n    public ClientHttpResponse intercept(\n            final HttpRequest request, final byte[] body,\n            final ClientHttpRequestExecution execution) throws IOException {\n        final URI originalUri = request.getURI();\n        String serviceName = mapCommandKey(originalUri);\n\n        log.info(\"{} :{} {} \", serviceName, request.getMethod().name(), originalUri.toString());\n        return new RestTemplateHystrixCommnad(serviceName, () -> {\n            return execution.execute(request, body);\n        }, hystrixFallback).execute();\n\n    }\n```\n\n下面是集成了HystrixCommand和Ribbon的例子\n\n```java\n@Override\n    public ClientHttpResponse intercept(\n            final HttpRequest request, final byte[] body,\n            final ClientHttpRequestExecution execution) throws IOException {\n        final URI originalUri = request.getURI();\n        String serviceName = mapCommandKey(originalUri);\n\n        log.info(\"{} :{} {} \", serviceName, request.getMethod().name(), originalUri.toString());\n        return new RestTemplateHystrixCommnad(serviceName, () -> {\n            return this.loadBalancer.execute(serviceName, instance -> {\n                HttpRequest serviceRequest = new HystrixLoadBalancerInterceptor.ServiceRequestWrapper(\n                        request,\n                        instance);\n                return execution.execute(serviceRequest, body);\n\n            });\n        }, hystrixFallback).execute();\n    }\n```\n\n2）RestTemplate支持Hystrix异步特性\n\nHystrix的执行在线程隔离模型下是支持异步的，因此也扩展一个RestTemplate异步执行。如下代码所示，通过调用`queue()`方法返回一个Future。\n\n```java\nFuture<String> fs = new CommandHelloWorld(\"World\").queue();\nString s = fs.get(); \n```\n这样可以修改RestOperations接口方法为异步方法：\n\n从：\n\n```java\n<T>  T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n```\n\n到：\n\n```java\n<T> Future<T> getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n```\n\n然后在原生的RestTemplate做一层代理，在代理层集成Hystrix和Ribbon，无论是JDK动态代理还是硬编码实现代理都变得容易，然后就可以这样来调用了：\n\n```java\nHystrixAsyncRestOperations asyncRestTemplate =null;\n//先依次调用\nFuture<String> future1 = asyncRestTemplate.getForObject(\"http://tietang.wang/\", String.class);\nFuture<String> future2 = asyncRestTemplate.getForObject(\"http://tietang.wang/2016/03/17/hystrix/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8Hystrix/\", String.class);\n//再依次获取调用结果\nString html1 = future1.get();\nString html2 = future2.get(100, TimeUnit.MILLISECONDS);//异步超时，建议\n```\n","source":"_posts/hystrix/RestTemplate遇上Hystrix.md","raw":"---\ntitle: RestTemplate遇上Hystrix\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/P60828-123503.jpg'\ndate: 2016-09-02 09:20:00\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\n\t- Circuit Breaker\nkeywords:\ndescription:\n---\n\n# RestTemplate遇上Hystrix\n\n\n## RestTemplate集成Hystrix和Robbin\n\n查看RestTemplate源代码，可以看到RestTemplate继承了InterceptingHttpAccessor类，InterceptingHttpAccessor类通过ClientHttpRequestInterceptor接口提供了扩展功能。\n\n实现intercept方法，在该方法中封装HystrixCommand和Ribbon逻辑即可。\n\n下面的代码是集成了HystrixCommand的例子：\n\n```java\n@Override\n    public ClientHttpResponse intercept(\n            final HttpRequest request, final byte[] body,\n            final ClientHttpRequestExecution execution) throws IOException {\n        final URI originalUri = request.getURI();\n        String serviceName = mapCommandKey(originalUri);\n\n        log.info(\"{} :{} {} \", serviceName, request.getMethod().name(), originalUri.toString());\n        return new RestTemplateHystrixCommnad(serviceName, () -> {\n            return execution.execute(request, body);\n        }, hystrixFallback).execute();\n\n    }\n```\n\n下面是集成了HystrixCommand和Ribbon的例子\n\n```java\n@Override\n    public ClientHttpResponse intercept(\n            final HttpRequest request, final byte[] body,\n            final ClientHttpRequestExecution execution) throws IOException {\n        final URI originalUri = request.getURI();\n        String serviceName = mapCommandKey(originalUri);\n\n        log.info(\"{} :{} {} \", serviceName, request.getMethod().name(), originalUri.toString());\n        return new RestTemplateHystrixCommnad(serviceName, () -> {\n            return this.loadBalancer.execute(serviceName, instance -> {\n                HttpRequest serviceRequest = new HystrixLoadBalancerInterceptor.ServiceRequestWrapper(\n                        request,\n                        instance);\n                return execution.execute(serviceRequest, body);\n\n            });\n        }, hystrixFallback).execute();\n    }\n```\n\n2）RestTemplate支持Hystrix异步特性\n\nHystrix的执行在线程隔离模型下是支持异步的，因此也扩展一个RestTemplate异步执行。如下代码所示，通过调用`queue()`方法返回一个Future。\n\n```java\nFuture<String> fs = new CommandHelloWorld(\"World\").queue();\nString s = fs.get(); \n```\n这样可以修改RestOperations接口方法为异步方法：\n\n从：\n\n```java\n<T>  T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n```\n\n到：\n\n```java\n<T> Future<T> getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n```\n\n然后在原生的RestTemplate做一层代理，在代理层集成Hystrix和Ribbon，无论是JDK动态代理还是硬编码实现代理都变得容易，然后就可以这样来调用了：\n\n```java\nHystrixAsyncRestOperations asyncRestTemplate =null;\n//先依次调用\nFuture<String> future1 = asyncRestTemplate.getForObject(\"http://tietang.wang/\", String.class);\nFuture<String> future2 = asyncRestTemplate.getForObject(\"http://tietang.wang/2016/03/17/hystrix/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8Hystrix/\", String.class);\n//再依次获取调用结果\nString html1 = future1.get();\nString html2 = future2.get(100, TimeUnit.MILLISECONDS);//异步超时，建议\n```\n","slug":"hystrix/RestTemplate遇上Hystrix","published":1,"updated":"2016-11-24T09:10:47.000Z","_id":"civw4emv3000gc9innm90zn84","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"RestTemplate遇上Hystrix\"><a href=\"#RestTemplate遇上Hystrix\" class=\"headerlink\" title=\"RestTemplate遇上Hystrix\"></a>RestTemplate遇上Hystrix</h1><h2 id=\"RestTemplate集成Hystrix和Robbin\"><a href=\"#RestTemplate集成Hystrix和Robbin\" class=\"headerlink\" title=\"RestTemplate集成Hystrix和Robbin\"></a>RestTemplate集成Hystrix和Robbin</h2><p>查看RestTemplate源代码，可以看到RestTemplate继承了InterceptingHttpAccessor类，InterceptingHttpAccessor类通过ClientHttpRequestInterceptor接口提供了扩展功能。</p>\n<p>实现intercept方法，在该方法中封装HystrixCommand和Ribbon逻辑即可。</p>\n<p>下面的代码是集成了HystrixCommand的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">intercept</span><span class=\"params\">(</span></span></div><div class=\"line\">            <span class=\"keyword\">final</span> HttpRequest request, <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] body,</div><div class=\"line\">            <span class=\"keyword\">final</span> ClientHttpRequestExecution execution) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> URI originalUri = request.getURI();</div><div class=\"line\">        String serviceName = mapCommandKey(originalUri);</div><div class=\"line\"></div><div class=\"line\">        log.info(<span class=\"string\">\"&#123;&#125; :&#123;&#125; &#123;&#125; \"</span>, serviceName, request.getMethod().name(), originalUri.toString());</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplateHystrixCommnad(serviceName, () -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> execution.execute(request, body);</div><div class=\"line\">        &#125;, hystrixFallback).execute();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>下面是集成了HystrixCommand和Ribbon的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">intercept</span><span class=\"params\">(</span></span></div><div class=\"line\">            <span class=\"keyword\">final</span> HttpRequest request, <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] body,</div><div class=\"line\">            <span class=\"keyword\">final</span> ClientHttpRequestExecution execution) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> URI originalUri = request.getURI();</div><div class=\"line\">        String serviceName = mapCommandKey(originalUri);</div><div class=\"line\"></div><div class=\"line\">        log.info(<span class=\"string\">\"&#123;&#125; :&#123;&#125; &#123;&#125; \"</span>, serviceName, request.getMethod().name(), originalUri.toString());</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplateHystrixCommnad(serviceName, () -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.loadBalancer.execute(serviceName, instance -&gt; &#123;</div><div class=\"line\">                HttpRequest serviceRequest = <span class=\"keyword\">new</span> HystrixLoadBalancerInterceptor.ServiceRequestWrapper(</div><div class=\"line\">                        request,</div><div class=\"line\">                        instance);</div><div class=\"line\">                <span class=\"keyword\">return</span> execution.execute(serviceRequest, body);</div><div class=\"line\"></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;, hystrixFallback).execute();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>2）RestTemplate支持Hystrix异步特性</p>\n<p>Hystrix的执行在线程隔离模型下是支持异步的，因此也扩展一个RestTemplate异步执行。如下代码所示，通过调用<code>queue()</code>方法返回一个Future。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Future&lt;String&gt; fs = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue();</div><div class=\"line\">String s = fs.get();</div></pre></td></tr></table></figure>\n<p>这样可以修改RestOperations接口方法为异步方法：</p>\n<p>从：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;T&gt;  <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</div></pre></td></tr></table></figure>\n<p>到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</div></pre></td></tr></table></figure>\n<p>然后在原生的RestTemplate做一层代理，在代理层集成Hystrix和Ribbon，无论是JDK动态代理还是硬编码实现代理都变得容易，然后就可以这样来调用了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">HystrixAsyncRestOperations asyncRestTemplate =<span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"comment\">//先依次调用</span></div><div class=\"line\">Future&lt;String&gt; future1 = asyncRestTemplate.getForObject(<span class=\"string\">\"http://tietang.wang/\"</span>, String.class);</div><div class=\"line\">Future&lt;String&gt; future2 = asyncRestTemplate.getForObject(<span class=\"string\">\"http://tietang.wang/2016/03/17/hystrix/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8Hystrix/\"</span>, String.class);</div><div class=\"line\"><span class=\"comment\">//再依次获取调用结果</span></div><div class=\"line\">String html1 = future1.get();</div><div class=\"line\">String html2 = future2.get(<span class=\"number\">100</span>, TimeUnit.MILLISECONDS);<span class=\"comment\">//异步超时，建议</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"RestTemplate遇上Hystrix\"><a href=\"#RestTemplate遇上Hystrix\" class=\"headerlink\" title=\"RestTemplate遇上Hystrix\"></a>RestTemplate遇上Hystrix</h1><h2 id=\"RestTemplate集成Hystrix和Robbin\"><a href=\"#RestTemplate集成Hystrix和Robbin\" class=\"headerlink\" title=\"RestTemplate集成Hystrix和Robbin\"></a>RestTemplate集成Hystrix和Robbin</h2><p>查看RestTemplate源代码，可以看到RestTemplate继承了InterceptingHttpAccessor类，InterceptingHttpAccessor类通过ClientHttpRequestInterceptor接口提供了扩展功能。</p>\n<p>实现intercept方法，在该方法中封装HystrixCommand和Ribbon逻辑即可。</p>\n<p>下面的代码是集成了HystrixCommand的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">intercept</span><span class=\"params\">(</div><div class=\"line\">            <span class=\"keyword\">final</span> HttpRequest request, <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] body,</div><div class=\"line\">            <span class=\"keyword\">final</span> ClientHttpRequestExecution execution)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> URI originalUri = request.getURI();</div><div class=\"line\">        String serviceName = mapCommandKey(originalUri);</div><div class=\"line\"></div><div class=\"line\">        log.info(<span class=\"string\">\"&#123;&#125; :&#123;&#125; &#123;&#125; \"</span>, serviceName, request.getMethod().name(), originalUri.toString());</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplateHystrixCommnad(serviceName, () -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> execution.execute(request, body);</div><div class=\"line\">        &#125;, hystrixFallback).execute();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>下面是集成了HystrixCommand和Ribbon的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">intercept</span><span class=\"params\">(</div><div class=\"line\">            <span class=\"keyword\">final</span> HttpRequest request, <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] body,</div><div class=\"line\">            <span class=\"keyword\">final</span> ClientHttpRequestExecution execution)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> URI originalUri = request.getURI();</div><div class=\"line\">        String serviceName = mapCommandKey(originalUri);</div><div class=\"line\"></div><div class=\"line\">        log.info(<span class=\"string\">\"&#123;&#125; :&#123;&#125; &#123;&#125; \"</span>, serviceName, request.getMethod().name(), originalUri.toString());</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplateHystrixCommnad(serviceName, () -&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.loadBalancer.execute(serviceName, instance -&gt; &#123;</div><div class=\"line\">                HttpRequest serviceRequest = <span class=\"keyword\">new</span> HystrixLoadBalancerInterceptor.ServiceRequestWrapper(</div><div class=\"line\">                        request,</div><div class=\"line\">                        instance);</div><div class=\"line\">                <span class=\"keyword\">return</span> execution.execute(serviceRequest, body);</div><div class=\"line\"></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;, hystrixFallback).execute();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>2）RestTemplate支持Hystrix异步特性</p>\n<p>Hystrix的执行在线程隔离模型下是支持异步的，因此也扩展一个RestTemplate异步执行。如下代码所示，通过调用<code>queue()</code>方法返回一个Future。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Future&lt;String&gt; fs = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue();</div><div class=\"line\">String s = fs.get();</div></pre></td></tr></table></figure>\n<p>这样可以修改RestOperations接口方法为异步方法：</p>\n<p>从：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;T&gt;  <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</div></pre></td></tr></table></figure>\n<p>到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</div></pre></td></tr></table></figure>\n<p>然后在原生的RestTemplate做一层代理，在代理层集成Hystrix和Ribbon，无论是JDK动态代理还是硬编码实现代理都变得容易，然后就可以这样来调用了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">HystrixAsyncRestOperations asyncRestTemplate =<span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"comment\">//先依次调用</span></div><div class=\"line\">Future&lt;String&gt; future1 = asyncRestTemplate.getForObject(<span class=\"string\">\"http://tietang.wang/\"</span>, String.class);</div><div class=\"line\">Future&lt;String&gt; future2 = asyncRestTemplate.getForObject(<span class=\"string\">\"http://tietang.wang/2016/03/17/hystrix/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8Hystrix/\"</span>, String.class);</div><div class=\"line\"><span class=\"comment\">//再依次获取调用结果</span></div><div class=\"line\">String html1 = future1.get();</div><div class=\"line\">String html2 = future2.get(<span class=\"number\">100</span>, TimeUnit.MILLISECONDS);<span class=\"comment\">//异步超时，建议</span></div></pre></td></tr></table></figure>\n"},{"title":"微服务之API网关设计","thumbnail":"images/m1.jpg","date":"2016-09-08T11:22:47.000Z","keywords":["微服务","Spring Cloud","Spring Boot","API Gateway","网关"],"description":null,"_content":"\n\n![P60528-094513-01.jpeg](http://upload-images.jianshu.io/upload_images/2519252-3f8e955deefa1708.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n微服务除了互相之间调用，还需要将API提供给外部应用访问，像浏览器，移动app，第三合作方等等，这就需要前段路由来管理后端微服务提供的服务。提供类似功能的应用有着多样化的名称，比如前置服务器/前置机、路由服务器、(反向)代理服务器，API网关服务器也是其中的一个叫法，只是场景和侧重点不一样。\n\nAPI网关，顾名思义，就是外部到内部的一道门，其主要功能：\n\n- 服务路由：将前段应用的调用请求路由定位并负载均衡到具体的后端微服务实例，对于前端应用看起来就是1个应用提供的服务，微服务对于前段应用来说就是黑盒，前段应用也不需要关心内部如何分布，由哪个微服务提供。主要有静态路由和动态路由。\n\t- 静态路由：有时候需要通过域名或者其他固定方式提供和配置路由表\n\t- 动态路由：通过服务发现服务，动态调整后端微服务的运行实例和路由表，为路由和负载均衡提供动态变化的服务注册信息。\n- 安全：统一集中的身份认证，安全控制。比如登录，签名，黑名单等等，还可以挖掘和开发更高级的安全策略。\n- 弹性：限流和容错，也是另一个层面的安全防护，防止突发的流量或者高峰流量冲击后端微服务而导致其服务不可用，另一方面可以在高峰期通过容错和降级保证核心服务的运行。\n- 监控：实时观察后端微服务的TPS、响应时间，失败数量等准确的信息。\n- 日志：记录所有请求的访问日志数据，可以为日志分析和查询提供统一支持。\n- 其他，当然还有很多需要统一集中管理的都可以在网关层解决。\n\n在Spring Cloud Netflix中使用Zuul来作为API Gateway组件，并结合Undertow，可以满足大部分性能和网关功能需求了(更高要求可以参考：https://github.com/tietang/ngx-lua-zuul)，Zuul + Undertow一般性能延迟，包括JVM和网络延迟在10%~20%，JVM延迟可以控制到10ms以内。另一方面，Zuul有强大的可定制化，通过ZuulFilter可以定制开发更多的网关功能。如下图所示：在Spring Cloud技术上，Zuul集成了Hystrix，Ribbon，Eureka Client等强大的技术栈，提供了开箱即用的Spring Cloud微服务网关功能。Zuul的强大之处是自由定制，这样对于很多老项目微服务化后，就不能按照Spring Cloud默认的动态路由规则运行，因此在其基础上定制了一些路由规则功能，更好的适应老项目微服务化。\n\n![API gateway](<http://7xiovs.com1.z0.glb.clouddn.com/API-Gateway.png>)\n\n**定制的路由规则的主要功能:**\n\n\n1. 路由表中包含源路径，微服务名称，目标路径。\n2. Endpoint粒度配置支持。\n3. 路由支持1对1精确路由。\n4. 源路径可以`前缀/**`格式来模糊路由。\n5. 目标路径可以使用`前缀/**`格式来装配目标路径。\n6. 保留默认动态路由规则：`服务名称/**` --> 是否截去前缀 --> 目标路径。\n7. 保留默认动态路由规则是否支持截去前缀的配置参数`stripPrefix`特性。\n8. 路由规则可以在不重启服务动态更新，这个功能通过外化配置来支持。\n9. 匹配股则采取谁先匹配路由谁，也就是说在路由表中有2个或以上的路由规则可能被匹配到时，匹配最先查询到的规则。\n\n**路由规则格式采用properties格式：**\n\n> 源路径 = 微服务名称, 目标路径\n\n启动时读取配置并解析，放入路由表。请求时通过查询匹配到合适的路由转发。\n\n例如：\n\n```\n/api/v1/trade=trade,/v1/trade\n/api/customer/**=customer,/api/v1/**\n/api/user/**=user\n\n```\n在上面的例子中：\n\n- /api/v1/trade会精确的路由到trade微服务的/v1/trade；\n- /api/customer/开头的api会路由转发到customer微服务的/api/v1/\\*\\*，其中后面的\\*\\*会被前面的\\*\\*部分替换，比如/api/customer/card->/api/v1/card的转换。\n- /api/user/开头的api会路由转发到user微服务的/api/user/**，endppoint不变。\n\n\n如果在Eureka Server中已经注册了微服务`payment`,那么在zuul启动后会自动添加路由规则，如果stripPrefix=false:\n\n```\n/payment/**=payment,/payment/**\n```\n如果stripPrefix=true:\n\n```\n/payment/**=payment,/payment/**\n```\n\nAPI网关通过部署多个实例来保证可用性，前端通过Nginx来负载均衡。\n","source":"_posts/微服务/微服务之API网关设计.md","raw":"---\ntitle: 微服务之API网关设计\nthumbnail: 'images/m1.jpg'\ndate: 2016-09-08 19:22:47\ncategories:\n\t- 微服务\ntags:\n\t- spring-cloud\n\t- 微服务\n\t- Spring Boot\n\t- API Gateway\n\t- 网关\nkeywords:\n\t- 微服务\n\t- Spring Cloud\n\t- Spring Boot\n\t- API Gateway\n\t- 网关\ndescription:\n---\n\n\n![P60528-094513-01.jpeg](http://upload-images.jianshu.io/upload_images/2519252-3f8e955deefa1708.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n微服务除了互相之间调用，还需要将API提供给外部应用访问，像浏览器，移动app，第三合作方等等，这就需要前段路由来管理后端微服务提供的服务。提供类似功能的应用有着多样化的名称，比如前置服务器/前置机、路由服务器、(反向)代理服务器，API网关服务器也是其中的一个叫法，只是场景和侧重点不一样。\n\nAPI网关，顾名思义，就是外部到内部的一道门，其主要功能：\n\n- 服务路由：将前段应用的调用请求路由定位并负载均衡到具体的后端微服务实例，对于前端应用看起来就是1个应用提供的服务，微服务对于前段应用来说就是黑盒，前段应用也不需要关心内部如何分布，由哪个微服务提供。主要有静态路由和动态路由。\n\t- 静态路由：有时候需要通过域名或者其他固定方式提供和配置路由表\n\t- 动态路由：通过服务发现服务，动态调整后端微服务的运行实例和路由表，为路由和负载均衡提供动态变化的服务注册信息。\n- 安全：统一集中的身份认证，安全控制。比如登录，签名，黑名单等等，还可以挖掘和开发更高级的安全策略。\n- 弹性：限流和容错，也是另一个层面的安全防护，防止突发的流量或者高峰流量冲击后端微服务而导致其服务不可用，另一方面可以在高峰期通过容错和降级保证核心服务的运行。\n- 监控：实时观察后端微服务的TPS、响应时间，失败数量等准确的信息。\n- 日志：记录所有请求的访问日志数据，可以为日志分析和查询提供统一支持。\n- 其他，当然还有很多需要统一集中管理的都可以在网关层解决。\n\n在Spring Cloud Netflix中使用Zuul来作为API Gateway组件，并结合Undertow，可以满足大部分性能和网关功能需求了(更高要求可以参考：https://github.com/tietang/ngx-lua-zuul)，Zuul + Undertow一般性能延迟，包括JVM和网络延迟在10%~20%，JVM延迟可以控制到10ms以内。另一方面，Zuul有强大的可定制化，通过ZuulFilter可以定制开发更多的网关功能。如下图所示：在Spring Cloud技术上，Zuul集成了Hystrix，Ribbon，Eureka Client等强大的技术栈，提供了开箱即用的Spring Cloud微服务网关功能。Zuul的强大之处是自由定制，这样对于很多老项目微服务化后，就不能按照Spring Cloud默认的动态路由规则运行，因此在其基础上定制了一些路由规则功能，更好的适应老项目微服务化。\n\n![API gateway](<http://7xiovs.com1.z0.glb.clouddn.com/API-Gateway.png>)\n\n**定制的路由规则的主要功能:**\n\n\n1. 路由表中包含源路径，微服务名称，目标路径。\n2. Endpoint粒度配置支持。\n3. 路由支持1对1精确路由。\n4. 源路径可以`前缀/**`格式来模糊路由。\n5. 目标路径可以使用`前缀/**`格式来装配目标路径。\n6. 保留默认动态路由规则：`服务名称/**` --> 是否截去前缀 --> 目标路径。\n7. 保留默认动态路由规则是否支持截去前缀的配置参数`stripPrefix`特性。\n8. 路由规则可以在不重启服务动态更新，这个功能通过外化配置来支持。\n9. 匹配股则采取谁先匹配路由谁，也就是说在路由表中有2个或以上的路由规则可能被匹配到时，匹配最先查询到的规则。\n\n**路由规则格式采用properties格式：**\n\n> 源路径 = 微服务名称, 目标路径\n\n启动时读取配置并解析，放入路由表。请求时通过查询匹配到合适的路由转发。\n\n例如：\n\n```\n/api/v1/trade=trade,/v1/trade\n/api/customer/**=customer,/api/v1/**\n/api/user/**=user\n\n```\n在上面的例子中：\n\n- /api/v1/trade会精确的路由到trade微服务的/v1/trade；\n- /api/customer/开头的api会路由转发到customer微服务的/api/v1/\\*\\*，其中后面的\\*\\*会被前面的\\*\\*部分替换，比如/api/customer/card->/api/v1/card的转换。\n- /api/user/开头的api会路由转发到user微服务的/api/user/**，endppoint不变。\n\n\n如果在Eureka Server中已经注册了微服务`payment`,那么在zuul启动后会自动添加路由规则，如果stripPrefix=false:\n\n```\n/payment/**=payment,/payment/**\n```\n如果stripPrefix=true:\n\n```\n/payment/**=payment,/payment/**\n```\n\nAPI网关通过部署多个实例来保证可用性，前端通过Nginx来负载均衡。\n","slug":"微服务/微服务之API网关设计","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emv8000jc9infu0mozlx","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-3f8e955deefa1708.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"P60528-094513-01.jpeg\"></p>\n<p>微服务除了互相之间调用，还需要将API提供给外部应用访问，像浏览器，移动app，第三合作方等等，这就需要前段路由来管理后端微服务提供的服务。提供类似功能的应用有着多样化的名称，比如前置服务器/前置机、路由服务器、(反向)代理服务器，API网关服务器也是其中的一个叫法，只是场景和侧重点不一样。</p>\n<p>API网关，顾名思义，就是外部到内部的一道门，其主要功能：</p>\n<ul>\n<li>服务路由：将前段应用的调用请求路由定位并负载均衡到具体的后端微服务实例，对于前端应用看起来就是1个应用提供的服务，微服务对于前段应用来说就是黑盒，前段应用也不需要关心内部如何分布，由哪个微服务提供。主要有静态路由和动态路由。<ul>\n<li>静态路由：有时候需要通过域名或者其他固定方式提供和配置路由表</li>\n<li>动态路由：通过服务发现服务，动态调整后端微服务的运行实例和路由表，为路由和负载均衡提供动态变化的服务注册信息。</li>\n</ul>\n</li>\n<li>安全：统一集中的身份认证，安全控制。比如登录，签名，黑名单等等，还可以挖掘和开发更高级的安全策略。</li>\n<li>弹性：限流和容错，也是另一个层面的安全防护，防止突发的流量或者高峰流量冲击后端微服务而导致其服务不可用，另一方面可以在高峰期通过容错和降级保证核心服务的运行。</li>\n<li>监控：实时观察后端微服务的TPS、响应时间，失败数量等准确的信息。</li>\n<li>日志：记录所有请求的访问日志数据，可以为日志分析和查询提供统一支持。</li>\n<li>其他，当然还有很多需要统一集中管理的都可以在网关层解决。</li>\n</ul>\n<p>在Spring Cloud Netflix中使用Zuul来作为API Gateway组件，并结合Undertow，可以满足大部分性能和网关功能需求了(更高要求可以参考：<a href=\"https://github.com/tietang/ngx-lua-zuul)，Zuul\" target=\"_blank\" rel=\"external\">https://github.com/tietang/ngx-lua-zuul)，Zuul</a> + Undertow一般性能延迟，包括JVM和网络延迟在10%~20%，JVM延迟可以控制到10ms以内。另一方面，Zuul有强大的可定制化，通过ZuulFilter可以定制开发更多的网关功能。如下图所示：在Spring Cloud技术上，Zuul集成了Hystrix，Ribbon，Eureka Client等强大的技术栈，提供了开箱即用的Spring Cloud微服务网关功能。Zuul的强大之处是自由定制，这样对于很多老项目微服务化后，就不能按照Spring Cloud默认的动态路由规则运行，因此在其基础上定制了一些路由规则功能，更好的适应老项目微服务化。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/API-Gateway.png\" alt=\"API gateway\"></p>\n<p><strong>定制的路由规则的主要功能:</strong></p>\n<ol>\n<li>路由表中包含源路径，微服务名称，目标路径。</li>\n<li>Endpoint粒度配置支持。</li>\n<li>路由支持1对1精确路由。</li>\n<li>源路径可以<code>前缀/**</code>格式来模糊路由。</li>\n<li>目标路径可以使用<code>前缀/**</code>格式来装配目标路径。</li>\n<li>保留默认动态路由规则：<code>服务名称/**</code> –&gt; 是否截去前缀 –&gt; 目标路径。</li>\n<li>保留默认动态路由规则是否支持截去前缀的配置参数<code>stripPrefix</code>特性。</li>\n<li>路由规则可以在不重启服务动态更新，这个功能通过外化配置来支持。</li>\n<li>匹配股则采取谁先匹配路由谁，也就是说在路由表中有2个或以上的路由规则可能被匹配到时，匹配最先查询到的规则。</li>\n</ol>\n<p><strong>路由规则格式采用properties格式：</strong></p>\n<blockquote>\n<p>源路径 = 微服务名称, 目标路径</p>\n</blockquote>\n<p>启动时读取配置并解析，放入路由表。请求时通过查询匹配到合适的路由转发。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/api/v1/trade=trade,/v1/trade</div><div class=\"line\">/api/customer/**=customer,/api/v1/**</div><div class=\"line\">/api/user/**=user</div></pre></td></tr></table></figure>\n<p>在上面的例子中：</p>\n<ul>\n<li>/api/v1/trade会精确的路由到trade微服务的/v1/trade；</li>\n<li>/api/customer/开头的api会路由转发到customer微服务的/api/v1/**，其中后面的**会被前面的**部分替换，比如/api/customer/card-&gt;/api/v1/card的转换。</li>\n<li>/api/user/开头的api会路由转发到user微服务的/api/user/**，endppoint不变。</li>\n</ul>\n<p>如果在Eureka Server中已经注册了微服务<code>payment</code>,那么在zuul启动后会自动添加路由规则，如果stripPrefix=false:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/payment/**=payment,/payment/**</div></pre></td></tr></table></figure>\n<p>如果stripPrefix=true:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/payment/**=payment,/payment/**</div></pre></td></tr></table></figure>\n<p>API网关通过部署多个实例来保证可用性，前端通过Nginx来负载均衡。</p>\n","excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-3f8e955deefa1708.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"P60528-094513-01.jpeg\"></p>\n<p>微服务除了互相之间调用，还需要将API提供给外部应用访问，像浏览器，移动app，第三合作方等等，这就需要前段路由来管理后端微服务提供的服务。提供类似功能的应用有着多样化的名称，比如前置服务器/前置机、路由服务器、(反向)代理服务器，API网关服务器也是其中的一个叫法，只是场景和侧重点不一样。</p>\n<p>API网关，顾名思义，就是外部到内部的一道门，其主要功能：</p>\n<ul>\n<li>服务路由：将前段应用的调用请求路由定位并负载均衡到具体的后端微服务实例，对于前端应用看起来就是1个应用提供的服务，微服务对于前段应用来说就是黑盒，前段应用也不需要关心内部如何分布，由哪个微服务提供。主要有静态路由和动态路由。<ul>\n<li>静态路由：有时候需要通过域名或者其他固定方式提供和配置路由表</li>\n<li>动态路由：通过服务发现服务，动态调整后端微服务的运行实例和路由表，为路由和负载均衡提供动态变化的服务注册信息。</li>\n</ul>\n</li>\n<li>安全：统一集中的身份认证，安全控制。比如登录，签名，黑名单等等，还可以挖掘和开发更高级的安全策略。</li>\n<li>弹性：限流和容错，也是另一个层面的安全防护，防止突发的流量或者高峰流量冲击后端微服务而导致其服务不可用，另一方面可以在高峰期通过容错和降级保证核心服务的运行。</li>\n<li>监控：实时观察后端微服务的TPS、响应时间，失败数量等准确的信息。</li>\n<li>日志：记录所有请求的访问日志数据，可以为日志分析和查询提供统一支持。</li>\n<li>其他，当然还有很多需要统一集中管理的都可以在网关层解决。</li>\n</ul>\n<p>在Spring Cloud Netflix中使用Zuul来作为API Gateway组件，并结合Undertow，可以满足大部分性能和网关功能需求了(更高要求可以参考：<a href=\"https://github.com/tietang/ngx-lua-zuul)，Zuul\">https://github.com/tietang/ngx-lua-zuul)，Zuul</a> + Undertow一般性能延迟，包括JVM和网络延迟在10%~20%，JVM延迟可以控制到10ms以内。另一方面，Zuul有强大的可定制化，通过ZuulFilter可以定制开发更多的网关功能。如下图所示：在Spring Cloud技术上，Zuul集成了Hystrix，Ribbon，Eureka Client等强大的技术栈，提供了开箱即用的Spring Cloud微服务网关功能。Zuul的强大之处是自由定制，这样对于很多老项目微服务化后，就不能按照Spring Cloud默认的动态路由规则运行，因此在其基础上定制了一些路由规则功能，更好的适应老项目微服务化。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/API-Gateway.png\" alt=\"API gateway\"></p>\n<p><strong>定制的路由规则的主要功能:</strong></p>\n<ol>\n<li>路由表中包含源路径，微服务名称，目标路径。</li>\n<li>Endpoint粒度配置支持。</li>\n<li>路由支持1对1精确路由。</li>\n<li>源路径可以<code>前缀/**</code>格式来模糊路由。</li>\n<li>目标路径可以使用<code>前缀/**</code>格式来装配目标路径。</li>\n<li>保留默认动态路由规则：<code>服务名称/**</code> –&gt; 是否截去前缀 –&gt; 目标路径。</li>\n<li>保留默认动态路由规则是否支持截去前缀的配置参数<code>stripPrefix</code>特性。</li>\n<li>路由规则可以在不重启服务动态更新，这个功能通过外化配置来支持。</li>\n<li>匹配股则采取谁先匹配路由谁，也就是说在路由表中有2个或以上的路由规则可能被匹配到时，匹配最先查询到的规则。</li>\n</ol>\n<p><strong>路由规则格式采用properties格式：</strong></p>\n<blockquote>\n<p>源路径 = 微服务名称, 目标路径</p>\n</blockquote>\n<p>启动时读取配置并解析，放入路由表。请求时通过查询匹配到合适的路由转发。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/api/v1/trade=trade,/v1/trade</div><div class=\"line\">/api/customer/**=customer,/api/v1/**</div><div class=\"line\">/api/user/**=user</div></pre></td></tr></table></figure>\n<p>在上面的例子中：</p>\n<ul>\n<li>/api/v1/trade会精确的路由到trade微服务的/v1/trade；</li>\n<li>/api/customer/开头的api会路由转发到customer微服务的/api/v1/**，其中后面的**会被前面的**部分替换，比如/api/customer/card-&gt;/api/v1/card的转换。</li>\n<li>/api/user/开头的api会路由转发到user微服务的/api/user/**，endppoint不变。</li>\n</ul>\n<p>如果在Eureka Server中已经注册了微服务<code>payment</code>,那么在zuul启动后会自动添加路由规则，如果stripPrefix=false:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/payment/**=payment,/payment/**</div></pre></td></tr></table></figure>\n<p>如果stripPrefix=true:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/payment/**=payment,/payment/**</div></pre></td></tr></table></figure>\n<p>API网关通过部署多个实例来保证可用性，前端通过Nginx来负载均衡。</p>\n"},{"title":"微服务下分布式事务问题","thumbnail":"images/m1.jpg","date":"2016-09-08T11:22:47.000Z","keywords":["微服务","Spring Cloud","Spring Boot","分布式事务"],"description":null,"_content":"\n\n\n![IMG_20160925_143422.jpg](http://upload-images.jianshu.io/upload_images/2519252-f3c6ae1fcc9ee375.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n\n用`数据一致性`来描述更贴切一些，在微服务化后，分布式事务上有很多选择，像**多阶段提交、补偿模式、可靠事件、TCC**等等，多阶段提交强一致性好但很难提升吞吐，为了吞吐基本上都是选择了最终一致性的分布式事务模型。补偿模式、可靠事件、TCC都属于最终一致性的范畴，都被广泛采用。无论采用哪种模式，都应该在特定业务场景下选择合适的分布式事务模型，并且具体场景具体分析了。这些模型也有很多分享参考，不再废话，下面着重介绍另一种分布式事务模型。\n\n### 交叉事务模型\n\n最初是2个数据源，我把它叫做`双事务`，扩展后支持多个数据源叫做`交叉事务`，这种事务适用于有2个或多个DataSource的场景下来保证数据的事务完整性，吞吐和一致性效果都很不错，这种事务模型利用了JDBC事务，基本思路是先执行DML SQL，出现异常或者需要回滚时依次回滚已经执行事务，最后再执行提交, 并且实现难度也不大，下面是伪代码：\n\n```java\nList<Connection> connections = new ArrayList<>();\nint i = 0;\ntry {\n    for (Connection connection : connections) {\n       boolean isExecuted= execute(connection);\n        i++;\n        if(!isExecuted){\n            throw new SQLException();\n        }\n    }\n} catch (SQLException e) {\n    for (int j = 0; j <= i; j++) {\n        connections.get(j).rollback();\n    }\n} finally {\n    for (Connection connection : connections) {\n        connection.commit();\n    }\n\n}\n\n```\n\n\n交叉事务要配合实际的JDBC事务和一些锁机制才能很好的工作，交叉事务很好的解决了多数据源的问题，但不是任何场景都适用，我总结了适用场景供大家参考：\n\n1. 每个数据源事务处理要求很快，通常是零点几~十几毫秒，**不适合长事务慢事务**。\n2. 通过建立多个数据源来工作，不是网络接口。\n3. 每个数据源事务中要**配合锁机制保证数据一致性**，where id=? for update行锁或者乐观锁都可以，但必须保证整个个事务过程中不允许被其他事务修改。\n\n**这个事务模型在这样一个测试模型下的测试结果：**\n\n在多线程下随机对10组数据做随机更新，并记录下测试的最终状态，最后读取数据库最后实际数据比较。在这样的测试模型，每秒大约3000的事务，多次测试结果均显示无不一致数据，效果很好，后期的实际业务测试下也显示出其一致性和性能都不错。\n","source":"_posts/微服务/微服务下分布式事务问题.md","raw":"\n---\ntitle: 微服务下分布式事务问题\nthumbnail: 'images/m1.jpg'\ndate: 2016-09-08 19:22:47\ncategories:\n\t- 微服务\ntags:\n\t- spring-cloud\n\t- 微服务\n\t- Spring Boot\n\t- 分布式事务\nkeywords:\n\t- 微服务\n\t- Spring Cloud\n\t- Spring Boot\n\t- 分布式事务\ndescription:\n---\n\n\n\n![IMG_20160925_143422.jpg](http://upload-images.jianshu.io/upload_images/2519252-f3c6ae1fcc9ee375.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n\n用`数据一致性`来描述更贴切一些，在微服务化后，分布式事务上有很多选择，像**多阶段提交、补偿模式、可靠事件、TCC**等等，多阶段提交强一致性好但很难提升吞吐，为了吞吐基本上都是选择了最终一致性的分布式事务模型。补偿模式、可靠事件、TCC都属于最终一致性的范畴，都被广泛采用。无论采用哪种模式，都应该在特定业务场景下选择合适的分布式事务模型，并且具体场景具体分析了。这些模型也有很多分享参考，不再废话，下面着重介绍另一种分布式事务模型。\n\n### 交叉事务模型\n\n最初是2个数据源，我把它叫做`双事务`，扩展后支持多个数据源叫做`交叉事务`，这种事务适用于有2个或多个DataSource的场景下来保证数据的事务完整性，吞吐和一致性效果都很不错，这种事务模型利用了JDBC事务，基本思路是先执行DML SQL，出现异常或者需要回滚时依次回滚已经执行事务，最后再执行提交, 并且实现难度也不大，下面是伪代码：\n\n```java\nList<Connection> connections = new ArrayList<>();\nint i = 0;\ntry {\n    for (Connection connection : connections) {\n       boolean isExecuted= execute(connection);\n        i++;\n        if(!isExecuted){\n            throw new SQLException();\n        }\n    }\n} catch (SQLException e) {\n    for (int j = 0; j <= i; j++) {\n        connections.get(j).rollback();\n    }\n} finally {\n    for (Connection connection : connections) {\n        connection.commit();\n    }\n\n}\n\n```\n\n\n交叉事务要配合实际的JDBC事务和一些锁机制才能很好的工作，交叉事务很好的解决了多数据源的问题，但不是任何场景都适用，我总结了适用场景供大家参考：\n\n1. 每个数据源事务处理要求很快，通常是零点几~十几毫秒，**不适合长事务慢事务**。\n2. 通过建立多个数据源来工作，不是网络接口。\n3. 每个数据源事务中要**配合锁机制保证数据一致性**，where id=? for update行锁或者乐观锁都可以，但必须保证整个个事务过程中不允许被其他事务修改。\n\n**这个事务模型在这样一个测试模型下的测试结果：**\n\n在多线程下随机对10组数据做随机更新，并记录下测试的最终状态，最后读取数据库最后实际数据比较。在这样的测试模型，每秒大约3000的事务，多次测试结果均显示无不一致数据，效果很好，后期的实际业务测试下也显示出其一致性和性能都不错。\n","slug":"微服务/微服务下分布式事务问题","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emva000kc9inj3i0wnjw","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-f3c6ae1fcc9ee375.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"IMG_20160925_143422.jpg\"></p>\n<p>用<code>数据一致性</code>来描述更贴切一些，在微服务化后，分布式事务上有很多选择，像<strong>多阶段提交、补偿模式、可靠事件、TCC</strong>等等，多阶段提交强一致性好但很难提升吞吐，为了吞吐基本上都是选择了最终一致性的分布式事务模型。补偿模式、可靠事件、TCC都属于最终一致性的范畴，都被广泛采用。无论采用哪种模式，都应该在特定业务场景下选择合适的分布式事务模型，并且具体场景具体分析了。这些模型也有很多分享参考，不再废话，下面着重介绍另一种分布式事务模型。</p>\n<h3 id=\"交叉事务模型\"><a href=\"#交叉事务模型\" class=\"headerlink\" title=\"交叉事务模型\"></a>交叉事务模型</h3><p>最初是2个数据源，我把它叫做<code>双事务</code>，扩展后支持多个数据源叫做<code>交叉事务</code>，这种事务适用于有2个或多个DataSource的场景下来保证数据的事务完整性，吞吐和一致性效果都很不错，这种事务模型利用了JDBC事务，基本思路是先执行DML SQL，出现异常或者需要回滚时依次回滚已经执行事务，最后再执行提交, 并且实现难度也不大，下面是伪代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Connection&gt; connections = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Connection connection : connections) &#123;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> isExecuted= execute(connection);</div><div class=\"line\">        i++;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!isExecuted)&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= i; j++) &#123;</div><div class=\"line\">        connections.get(j).rollback();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Connection connection : connections) &#123;</div><div class=\"line\">        connection.commit();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>交叉事务要配合实际的JDBC事务和一些锁机制才能很好的工作，交叉事务很好的解决了多数据源的问题，但不是任何场景都适用，我总结了适用场景供大家参考：</p>\n<ol>\n<li>每个数据源事务处理要求很快，通常是零点几~十几毫秒，<strong>不适合长事务慢事务</strong>。</li>\n<li>通过建立多个数据源来工作，不是网络接口。</li>\n<li>每个数据源事务中要<strong>配合锁机制保证数据一致性</strong>，where id=? for update行锁或者乐观锁都可以，但必须保证整个个事务过程中不允许被其他事务修改。</li>\n</ol>\n<p><strong>这个事务模型在这样一个测试模型下的测试结果：</strong></p>\n<p>在多线程下随机对10组数据做随机更新，并记录下测试的最终状态，最后读取数据库最后实际数据比较。在这样的测试模型，每秒大约3000的事务，多次测试结果均显示无不一致数据，效果很好，后期的实际业务测试下也显示出其一致性和性能都不错。</p>\n","excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-f3c6ae1fcc9ee375.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"IMG_20160925_143422.jpg\"></p>\n<p>用<code>数据一致性</code>来描述更贴切一些，在微服务化后，分布式事务上有很多选择，像<strong>多阶段提交、补偿模式、可靠事件、TCC</strong>等等，多阶段提交强一致性好但很难提升吞吐，为了吞吐基本上都是选择了最终一致性的分布式事务模型。补偿模式、可靠事件、TCC都属于最终一致性的范畴，都被广泛采用。无论采用哪种模式，都应该在特定业务场景下选择合适的分布式事务模型，并且具体场景具体分析了。这些模型也有很多分享参考，不再废话，下面着重介绍另一种分布式事务模型。</p>\n<h3 id=\"交叉事务模型\"><a href=\"#交叉事务模型\" class=\"headerlink\" title=\"交叉事务模型\"></a>交叉事务模型</h3><p>最初是2个数据源，我把它叫做<code>双事务</code>，扩展后支持多个数据源叫做<code>交叉事务</code>，这种事务适用于有2个或多个DataSource的场景下来保证数据的事务完整性，吞吐和一致性效果都很不错，这种事务模型利用了JDBC事务，基本思路是先执行DML SQL，出现异常或者需要回滚时依次回滚已经执行事务，最后再执行提交, 并且实现难度也不大，下面是伪代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Connection&gt; connections = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Connection connection : connections) &#123;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> isExecuted= execute(connection);</div><div class=\"line\">        i++;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!isExecuted)&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= i; j++) &#123;</div><div class=\"line\">        connections.get(j).rollback();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Connection connection : connections) &#123;</div><div class=\"line\">        connection.commit();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>交叉事务要配合实际的JDBC事务和一些锁机制才能很好的工作，交叉事务很好的解决了多数据源的问题，但不是任何场景都适用，我总结了适用场景供大家参考：</p>\n<ol>\n<li>每个数据源事务处理要求很快，通常是零点几~十几毫秒，<strong>不适合长事务慢事务</strong>。</li>\n<li>通过建立多个数据源来工作，不是网络接口。</li>\n<li>每个数据源事务中要<strong>配合锁机制保证数据一致性</strong>，where id=? for update行锁或者乐观锁都可以，但必须保证整个个事务过程中不允许被其他事务修改。</li>\n</ol>\n<p><strong>这个事务模型在这样一个测试模型下的测试结果：</strong></p>\n<p>在多线程下随机对10组数据做随机更新，并记录下测试的最终状态，最后读取数据库最后实际数据比较。在这样的测试模型，每秒大约3000的事务，多次测试结果均显示无不一致数据，效果很好，后期的实际业务测试下也显示出其一致性和性能都不错。</p>\n"},{"title":"微服务之Eureka服务发现","thumbnail":"images/m1.jpg","date":"2016-09-08T11:22:47.000Z","keywords":["微服务","Spring Cloud","Spring Boot","Eureka","服务发现"],"description":null,"_content":"\n\n\n![](http://upload-images.jianshu.io/upload_images/2519252-3691e262041c9cdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n当调用API或者发起网络通信的时候，无论如何我们都要知道被调用方的IP和服务端口，大部分情况是通过域名和服务端口，事实上基于DNS的服务发现，因为DNS缓存、无法自治和其他不利因素的存在，有很多局限。传统的DNS方式，都是通过nginx或者其他代理软件来实现，物理机器的ip和port都是固定的，那么nginx中配置的服务ip和port也是固定的，服务列表的更新只能通过手动来做，但如果后端服务很多时，手动更新容易出错，效率也很低，这在后端服务发生故障时，不可用时间就可能会加长。在微服务中，尤其是使用了Docker等虚拟化技术的微服务，其IP和port都是动态分配的，服务实例数也是动态变化的，那么就需要精细而准确的服务发现机制。当微服务app启动后，告诉其他服务自己的ip和端口，这里的其他服务就是Eureka Server和Eureka Client，这样其他服务就知道这个服务有多少实例在线，都在哪些地方，方便去负载均衡和调用。\n\nEureka属于客户端发现模式，客户端负责决定相应服务实例的网络位置，并且对请求实现负载均衡。客户端从一个服务注册服务中查询所有可用服务实例的库，并缓存到本地。服务调用时，客户端使用负载均衡算法从多个后端服务实例中选择出一个，然后发出请求。Eureka分为Eureka Server和Eureka client， Eureka Server是一个服务注册中心，为服务实例注册管理和查询可用实例提供了REST API，并可以用其定位、负载均衡、故障恢复后端服务的中间层服务。在服务启动后，Eureka Client向服务注册中心注册服务同时会拉去注册中心注册表副本；在服务停止的时候，Eureka Client向服务注册中心注销服务；服务注册后，Eureka Client会定时的发送心跳来刷新服务的最新状态。\n\n客户端发现模式的优点是服务调用、负载均衡不需要和Eureka Server通信，直接使用本地注册表副本，因此Eureka Server不可用时是不会影响正常的服务调用，性能也不会因为网络延迟和服务端延迟受到影响。但其缺点也很明显，但某个服务不可用时，各个Eureka Client不能及时的知道，需要1~3个心跳周期才能感知，但是，由于基于Netflix的服务调用端都会使用Hystrix来容错和降级，当服务调用不可用时Hystrix也能及时感知到，通过熔断机制来降级服务调用，因此弥补了基于客户端服务发现的时效性的缺点。\n\nEureka Server采用的是对等通信(P2P),无中心化的架构，无master/slave区分，每一个server都是对等的，既是Server又是Client,所以其集群方式可以自由发挥，可以各点互连，也可以接力互连。Eureka Server通过运行多个实例以及彼此之间互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向另一个节点。利用Eureka Server这种架构特性， 我在Eureka Server Cluster的部署时采用了三角形通信模型，三角形是一个很好的均衡模型，既是各点互连，又是接力互连，三角形本身就是一个稳定性几何形状，有着稳固、坚定搜索、耐压的特点，家具、建筑、交通等各种行业都有应用。如下图所示，Eureka Cluster的每个实例都和另外2个实例通信交互。\n![](<http://7xiovs.com1.z0.glb.clouddn.com/eureka_cluster.png>)\n\n\n","source":"_posts/微服务/微服务之Eureka服务发现.md","raw":"---\ntitle: 微服务之Eureka服务发现\nthumbnail: 'images/m1.jpg'\ndate: 2016-09-08 19:22:47\ncategories:\n\t- 微服务\ntags:\n\t- spring-cloud\n\t- 微服务\n\t- Spring Boot\n\t- Eureka\n\t- 服务发现\nkeywords:\n\t- 微服务\n\t- Spring Cloud\n\t- Spring Boot\n\t- Eureka\n\t- 服务发现\ndescription:\n---\n\n\n\n![](http://upload-images.jianshu.io/upload_images/2519252-3691e262041c9cdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n当调用API或者发起网络通信的时候，无论如何我们都要知道被调用方的IP和服务端口，大部分情况是通过域名和服务端口，事实上基于DNS的服务发现，因为DNS缓存、无法自治和其他不利因素的存在，有很多局限。传统的DNS方式，都是通过nginx或者其他代理软件来实现，物理机器的ip和port都是固定的，那么nginx中配置的服务ip和port也是固定的，服务列表的更新只能通过手动来做，但如果后端服务很多时，手动更新容易出错，效率也很低，这在后端服务发生故障时，不可用时间就可能会加长。在微服务中，尤其是使用了Docker等虚拟化技术的微服务，其IP和port都是动态分配的，服务实例数也是动态变化的，那么就需要精细而准确的服务发现机制。当微服务app启动后，告诉其他服务自己的ip和端口，这里的其他服务就是Eureka Server和Eureka Client，这样其他服务就知道这个服务有多少实例在线，都在哪些地方，方便去负载均衡和调用。\n\nEureka属于客户端发现模式，客户端负责决定相应服务实例的网络位置，并且对请求实现负载均衡。客户端从一个服务注册服务中查询所有可用服务实例的库，并缓存到本地。服务调用时，客户端使用负载均衡算法从多个后端服务实例中选择出一个，然后发出请求。Eureka分为Eureka Server和Eureka client， Eureka Server是一个服务注册中心，为服务实例注册管理和查询可用实例提供了REST API，并可以用其定位、负载均衡、故障恢复后端服务的中间层服务。在服务启动后，Eureka Client向服务注册中心注册服务同时会拉去注册中心注册表副本；在服务停止的时候，Eureka Client向服务注册中心注销服务；服务注册后，Eureka Client会定时的发送心跳来刷新服务的最新状态。\n\n客户端发现模式的优点是服务调用、负载均衡不需要和Eureka Server通信，直接使用本地注册表副本，因此Eureka Server不可用时是不会影响正常的服务调用，性能也不会因为网络延迟和服务端延迟受到影响。但其缺点也很明显，但某个服务不可用时，各个Eureka Client不能及时的知道，需要1~3个心跳周期才能感知，但是，由于基于Netflix的服务调用端都会使用Hystrix来容错和降级，当服务调用不可用时Hystrix也能及时感知到，通过熔断机制来降级服务调用，因此弥补了基于客户端服务发现的时效性的缺点。\n\nEureka Server采用的是对等通信(P2P),无中心化的架构，无master/slave区分，每一个server都是对等的，既是Server又是Client,所以其集群方式可以自由发挥，可以各点互连，也可以接力互连。Eureka Server通过运行多个实例以及彼此之间互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向另一个节点。利用Eureka Server这种架构特性， 我在Eureka Server Cluster的部署时采用了三角形通信模型，三角形是一个很好的均衡模型，既是各点互连，又是接力互连，三角形本身就是一个稳定性几何形状，有着稳固、坚定搜索、耐压的特点，家具、建筑、交通等各种行业都有应用。如下图所示，Eureka Cluster的每个实例都和另外2个实例通信交互。\n![](<http://7xiovs.com1.z0.glb.clouddn.com/eureka_cluster.png>)\n\n\n","slug":"微服务/微服务之Eureka服务发现","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emvh000nc9inpl9irw55","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-3691e262041c9cdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"\"></p>\n<p>当调用API或者发起网络通信的时候，无论如何我们都要知道被调用方的IP和服务端口，大部分情况是通过域名和服务端口，事实上基于DNS的服务发现，因为DNS缓存、无法自治和其他不利因素的存在，有很多局限。传统的DNS方式，都是通过nginx或者其他代理软件来实现，物理机器的ip和port都是固定的，那么nginx中配置的服务ip和port也是固定的，服务列表的更新只能通过手动来做，但如果后端服务很多时，手动更新容易出错，效率也很低，这在后端服务发生故障时，不可用时间就可能会加长。在微服务中，尤其是使用了Docker等虚拟化技术的微服务，其IP和port都是动态分配的，服务实例数也是动态变化的，那么就需要精细而准确的服务发现机制。当微服务app启动后，告诉其他服务自己的ip和端口，这里的其他服务就是Eureka Server和Eureka Client，这样其他服务就知道这个服务有多少实例在线，都在哪些地方，方便去负载均衡和调用。</p>\n<p>Eureka属于客户端发现模式，客户端负责决定相应服务实例的网络位置，并且对请求实现负载均衡。客户端从一个服务注册服务中查询所有可用服务实例的库，并缓存到本地。服务调用时，客户端使用负载均衡算法从多个后端服务实例中选择出一个，然后发出请求。Eureka分为Eureka Server和Eureka client， Eureka Server是一个服务注册中心，为服务实例注册管理和查询可用实例提供了REST API，并可以用其定位、负载均衡、故障恢复后端服务的中间层服务。在服务启动后，Eureka Client向服务注册中心注册服务同时会拉去注册中心注册表副本；在服务停止的时候，Eureka Client向服务注册中心注销服务；服务注册后，Eureka Client会定时的发送心跳来刷新服务的最新状态。</p>\n<p>客户端发现模式的优点是服务调用、负载均衡不需要和Eureka Server通信，直接使用本地注册表副本，因此Eureka Server不可用时是不会影响正常的服务调用，性能也不会因为网络延迟和服务端延迟受到影响。但其缺点也很明显，但某个服务不可用时，各个Eureka Client不能及时的知道，需要1~3个心跳周期才能感知，但是，由于基于Netflix的服务调用端都会使用Hystrix来容错和降级，当服务调用不可用时Hystrix也能及时感知到，通过熔断机制来降级服务调用，因此弥补了基于客户端服务发现的时效性的缺点。</p>\n<p>Eureka Server采用的是对等通信(P2P),无中心化的架构，无master/slave区分，每一个server都是对等的，既是Server又是Client,所以其集群方式可以自由发挥，可以各点互连，也可以接力互连。Eureka Server通过运行多个实例以及彼此之间互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向另一个节点。利用Eureka Server这种架构特性， 我在Eureka Server Cluster的部署时采用了三角形通信模型，三角形是一个很好的均衡模型，既是各点互连，又是接力互连，三角形本身就是一个稳定性几何形状，有着稳固、坚定搜索、耐压的特点，家具、建筑、交通等各种行业都有应用。如下图所示，Eureka Cluster的每个实例都和另外2个实例通信交互。<br><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/eureka_cluster.png\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-3691e262041c9cdd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"\"></p>\n<p>当调用API或者发起网络通信的时候，无论如何我们都要知道被调用方的IP和服务端口，大部分情况是通过域名和服务端口，事实上基于DNS的服务发现，因为DNS缓存、无法自治和其他不利因素的存在，有很多局限。传统的DNS方式，都是通过nginx或者其他代理软件来实现，物理机器的ip和port都是固定的，那么nginx中配置的服务ip和port也是固定的，服务列表的更新只能通过手动来做，但如果后端服务很多时，手动更新容易出错，效率也很低，这在后端服务发生故障时，不可用时间就可能会加长。在微服务中，尤其是使用了Docker等虚拟化技术的微服务，其IP和port都是动态分配的，服务实例数也是动态变化的，那么就需要精细而准确的服务发现机制。当微服务app启动后，告诉其他服务自己的ip和端口，这里的其他服务就是Eureka Server和Eureka Client，这样其他服务就知道这个服务有多少实例在线，都在哪些地方，方便去负载均衡和调用。</p>\n<p>Eureka属于客户端发现模式，客户端负责决定相应服务实例的网络位置，并且对请求实现负载均衡。客户端从一个服务注册服务中查询所有可用服务实例的库，并缓存到本地。服务调用时，客户端使用负载均衡算法从多个后端服务实例中选择出一个，然后发出请求。Eureka分为Eureka Server和Eureka client， Eureka Server是一个服务注册中心，为服务实例注册管理和查询可用实例提供了REST API，并可以用其定位、负载均衡、故障恢复后端服务的中间层服务。在服务启动后，Eureka Client向服务注册中心注册服务同时会拉去注册中心注册表副本；在服务停止的时候，Eureka Client向服务注册中心注销服务；服务注册后，Eureka Client会定时的发送心跳来刷新服务的最新状态。</p>\n<p>客户端发现模式的优点是服务调用、负载均衡不需要和Eureka Server通信，直接使用本地注册表副本，因此Eureka Server不可用时是不会影响正常的服务调用，性能也不会因为网络延迟和服务端延迟受到影响。但其缺点也很明显，但某个服务不可用时，各个Eureka Client不能及时的知道，需要1~3个心跳周期才能感知，但是，由于基于Netflix的服务调用端都会使用Hystrix来容错和降级，当服务调用不可用时Hystrix也能及时感知到，通过熔断机制来降级服务调用，因此弥补了基于客户端服务发现的时效性的缺点。</p>\n<p>Eureka Server采用的是对等通信(P2P),无中心化的架构，无master/slave区分，每一个server都是对等的，既是Server又是Client,所以其集群方式可以自由发挥，可以各点互连，也可以接力互连。Eureka Server通过运行多个实例以及彼此之间互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向另一个节点。利用Eureka Server这种架构特性， 我在Eureka Server Cluster的部署时采用了三角形通信模型，三角形是一个很好的均衡模型，既是各点互连，又是接力互连，三角形本身就是一个稳定性几何形状，有着稳固、坚定搜索、耐压的特点，家具、建筑、交通等各种行业都有应用。如下图所示，Eureka Cluster的每个实例都和另外2个实例通信交互。<br><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/eureka_cluster.png\" alt=\"\"></p>\n"},{"title":"微服务之spring-cloud分布式外部化和中心化配置管理","thumbnail":"images/m1.jpg","date":"2016-09-08T11:22:47.000Z","keywords":["微服务","Spring Cloud","Spring Boot","分布式配置管理"],"description":null,"_content":"\n![DPP_0001.jpg](http://upload-images.jianshu.io/upload_images/2519252-16f4dd62aebd0502.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n微服务化之后，应用的数量剧增，零时需要调整配置参数时，无论是运维直接在服务器上修改还是工程中修改配置后重新打包部署，对运维来说工作量是巨大的，而且人为的操作会加大出错的几率，那么外化和中心化配置可以更好的解决分布式环境的配置问题。Spring Cloud提供了2种方式的外化配置：\n\n1. Spring Cloud Config 通过本地文件系统，git/svn仓库来管理配置文件，可以满足基本外化需求，但不能精细的管理配置项。\n2. Spring Cloud Zookeeper Config 通过Zookeeper分级命名空间来储存配置项数据，并且支持基础上下文和profile命名空间，另外Zookeeper可以实时监听节点变化和通知机制，应该是首选。\n\nSpring Cloud Zookeeper Config提供的功能：\n\n- 和Spring Boot无缝集成，能完全无缝替代properties或yml文件的配置。\n- 支持默认上下文命名空间。\n- 支持profile命名空间。\n- 支持应用名称命名空间。\n- 命名空间上支持配置的继承。\n- 支持更改实时通知和endpoint `/refresh`被动刷新，该特性不太好用。\n\nSpring Cloud Zookeeper Config 基本能满足要求了，但其实时通知机制会造成应用暂停体验不好，需要初始化操作的配置（比如数据库连接池，http连接池等）实时更新的意义不大。需要实时更新的是那些在运行时从配置缓存中实时获取的参数，因此在此基础上增加基于Spring Cloud Zookeeper Config和CuratorFramework的实时通知组件，基本设计思路是这样的：\n\n1. 每一个需要动态更新的节点下增加push_status节点，任意值。\n2. 监听push_status节点的值变事件（NodeDataChanged）。\n3. 当修改push_status节点值时，会通知所有监听该节点的应用端。\n4. 应用端收到NodeDataChanged事件，递归获取push_status节点下所有的节点数据，并更新配置缓存。\n","source":"_posts/微服务/微服务之spring-cloud分布式外部化和中心化配置管理.md","raw":"---\ntitle: 微服务之spring-cloud分布式外部化和中心化配置管理\nthumbnail: 'images/m1.jpg'\ndate: 2016-09-08 19:22:47\ncategories:\n\t- 微服务\ntags:\n\t- spring-cloud\n\t- 微服务\n\t- Spring Boot\n\t- 分布式配置管理\nkeywords:\n\t- 微服务\n\t- Spring Cloud\n\t- Spring Boot\n\t- 分布式配置管理\ndescription:\n---\n\n![DPP_0001.jpg](http://upload-images.jianshu.io/upload_images/2519252-16f4dd62aebd0502.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n微服务化之后，应用的数量剧增，零时需要调整配置参数时，无论是运维直接在服务器上修改还是工程中修改配置后重新打包部署，对运维来说工作量是巨大的，而且人为的操作会加大出错的几率，那么外化和中心化配置可以更好的解决分布式环境的配置问题。Spring Cloud提供了2种方式的外化配置：\n\n1. Spring Cloud Config 通过本地文件系统，git/svn仓库来管理配置文件，可以满足基本外化需求，但不能精细的管理配置项。\n2. Spring Cloud Zookeeper Config 通过Zookeeper分级命名空间来储存配置项数据，并且支持基础上下文和profile命名空间，另外Zookeeper可以实时监听节点变化和通知机制，应该是首选。\n\nSpring Cloud Zookeeper Config提供的功能：\n\n- 和Spring Boot无缝集成，能完全无缝替代properties或yml文件的配置。\n- 支持默认上下文命名空间。\n- 支持profile命名空间。\n- 支持应用名称命名空间。\n- 命名空间上支持配置的继承。\n- 支持更改实时通知和endpoint `/refresh`被动刷新，该特性不太好用。\n\nSpring Cloud Zookeeper Config 基本能满足要求了，但其实时通知机制会造成应用暂停体验不好，需要初始化操作的配置（比如数据库连接池，http连接池等）实时更新的意义不大。需要实时更新的是那些在运行时从配置缓存中实时获取的参数，因此在此基础上增加基于Spring Cloud Zookeeper Config和CuratorFramework的实时通知组件，基本设计思路是这样的：\n\n1. 每一个需要动态更新的节点下增加push_status节点，任意值。\n2. 监听push_status节点的值变事件（NodeDataChanged）。\n3. 当修改push_status节点值时，会通知所有监听该节点的应用端。\n4. 应用端收到NodeDataChanged事件，递归获取push_status节点下所有的节点数据，并更新配置缓存。\n","slug":"微服务/微服务之spring-cloud分布式外部化和中心化配置管理","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emvl000pc9inzjvr275f","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-16f4dd62aebd0502.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"DPP_0001.jpg\"></p>\n<p>微服务化之后，应用的数量剧增，零时需要调整配置参数时，无论是运维直接在服务器上修改还是工程中修改配置后重新打包部署，对运维来说工作量是巨大的，而且人为的操作会加大出错的几率，那么外化和中心化配置可以更好的解决分布式环境的配置问题。Spring Cloud提供了2种方式的外化配置：</p>\n<ol>\n<li>Spring Cloud Config 通过本地文件系统，git/svn仓库来管理配置文件，可以满足基本外化需求，但不能精细的管理配置项。</li>\n<li>Spring Cloud Zookeeper Config 通过Zookeeper分级命名空间来储存配置项数据，并且支持基础上下文和profile命名空间，另外Zookeeper可以实时监听节点变化和通知机制，应该是首选。</li>\n</ol>\n<p>Spring Cloud Zookeeper Config提供的功能：</p>\n<ul>\n<li>和Spring Boot无缝集成，能完全无缝替代properties或yml文件的配置。</li>\n<li>支持默认上下文命名空间。</li>\n<li>支持profile命名空间。</li>\n<li>支持应用名称命名空间。</li>\n<li>命名空间上支持配置的继承。</li>\n<li>支持更改实时通知和endpoint <code>/refresh</code>被动刷新，该特性不太好用。</li>\n</ul>\n<p>Spring Cloud Zookeeper Config 基本能满足要求了，但其实时通知机制会造成应用暂停体验不好，需要初始化操作的配置（比如数据库连接池，http连接池等）实时更新的意义不大。需要实时更新的是那些在运行时从配置缓存中实时获取的参数，因此在此基础上增加基于Spring Cloud Zookeeper Config和CuratorFramework的实时通知组件，基本设计思路是这样的：</p>\n<ol>\n<li>每一个需要动态更新的节点下增加push_status节点，任意值。</li>\n<li>监听push_status节点的值变事件（NodeDataChanged）。</li>\n<li>当修改push_status节点值时，会通知所有监听该节点的应用端。</li>\n<li>应用端收到NodeDataChanged事件，递归获取push_status节点下所有的节点数据，并更新配置缓存。</li>\n</ol>\n","excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-16f4dd62aebd0502.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"DPP_0001.jpg\"></p>\n<p>微服务化之后，应用的数量剧增，零时需要调整配置参数时，无论是运维直接在服务器上修改还是工程中修改配置后重新打包部署，对运维来说工作量是巨大的，而且人为的操作会加大出错的几率，那么外化和中心化配置可以更好的解决分布式环境的配置问题。Spring Cloud提供了2种方式的外化配置：</p>\n<ol>\n<li>Spring Cloud Config 通过本地文件系统，git/svn仓库来管理配置文件，可以满足基本外化需求，但不能精细的管理配置项。</li>\n<li>Spring Cloud Zookeeper Config 通过Zookeeper分级命名空间来储存配置项数据，并且支持基础上下文和profile命名空间，另外Zookeeper可以实时监听节点变化和通知机制，应该是首选。</li>\n</ol>\n<p>Spring Cloud Zookeeper Config提供的功能：</p>\n<ul>\n<li>和Spring Boot无缝集成，能完全无缝替代properties或yml文件的配置。</li>\n<li>支持默认上下文命名空间。</li>\n<li>支持profile命名空间。</li>\n<li>支持应用名称命名空间。</li>\n<li>命名空间上支持配置的继承。</li>\n<li>支持更改实时通知和endpoint <code>/refresh</code>被动刷新，该特性不太好用。</li>\n</ul>\n<p>Spring Cloud Zookeeper Config 基本能满足要求了，但其实时通知机制会造成应用暂停体验不好，需要初始化操作的配置（比如数据库连接池，http连接池等）实时更新的意义不大。需要实时更新的是那些在运行时从配置缓存中实时获取的参数，因此在此基础上增加基于Spring Cloud Zookeeper Config和CuratorFramework的实时通知组件，基本设计思路是这样的：</p>\n<ol>\n<li>每一个需要动态更新的节点下增加push_status节点，任意值。</li>\n<li>监听push_status节点的值变事件（NodeDataChanged）。</li>\n<li>当修改push_status节点值时，会通知所有监听该节点的应用端。</li>\n<li>应用端收到NodeDataChanged事件，递归获取push_status节点下所有的节点数据，并更新配置缓存。</li>\n</ol>\n"},{"title":"微服务之微","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60606-200127.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30","date":"2016-06-02T01:20:00.000Z","keywords":null,"description":null,"_content":" \n \n\n\n 单一职责\n","source":"_posts/微服务/微服务之微.md","raw":"---\ntitle: 微服务之微\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60606-200127.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30'\ndate: 2016-06-02 09:20:00\ncategories:\n\t- 微服务 \ntags:\n\t- 微服务\nkeywords:\ndescription:\n---\n \n \n\n\n 单一职责\n","slug":"微服务/微服务之微","published":1,"updated":"2016-11-09T02:58:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emvp000tc9inp9jlehnz","content":"<p> 单一职责</p>\n","excerpt":"","more":"<p> 单一职责</p>\n"},{"title":"微服务优缺点论述","thumbnail":"images/m1.jpg","date":"2016-09-10T11:22:47.000Z","keywords":["微服务","Spring Cloud","Spring Boot"],"description":null,"_content":"\n![IMG_20161026_142532.jpg](http://upload-images.jianshu.io/upload_images/2519252-a51def43c01ae44e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n随着业务发展，业务功能的堆叠和复杂化，团队壮大，代码量也增加，各种问题开始凸显：\n\n* 代码结构开始变得混乱，难以管理，提交冲突，改一处引多处。\n* 沟通成本变高。\n* 代码维护难：“修复越多，缺陷越多”。\n* 引入和集成技术变得困难，依赖版本冲突，新特性无法使用。\n\n最后开发效率也开始下降，代码维护的成本提高。\n\n上线后稳定性不高，更大几率的影响可靠性和可用性，所有功能都运行在一个进程中，任何一个功能中出现bug，比如内存泄露，逻辑死循环耗尽CPU等，可以导致整个应用挂掉。\n其中几个高并发功能，也不得不部署将所有功能增加部署实例，内存和CPU利用不够充分，灵活性也变差。\n\n其缺点也很明显：\n\n- 运维工作量增加，应用运维管理复杂。\n- 代码重复率增加，团队自治带来的重复劳动。\n- 分布式系统固有的复杂性和缺点：网络延迟，不可靠，负载均衡，调用，事务等等\n\n微服务架构可以从一定程度上解决或缓解上述问题，但它也不是万能的，但也带来了一系列的非功能性需求，比如说分布式事务、自动化运维，服务发现，服务路由等额外需求，但其带来的好处以及克服其缺点总结如下：\n\n- 服务发现带来很多自运维特性。\n- 单一职责原则在各种各种场景的解耦合\n- 业务开发：只关注小团队所熟悉和负责的业务，做到专而精，并且容易实现持续交付。\n- 代码管理：无论多git repository还是多maven module都可以做到一般的代码隔离，尤其是积累很多年的代码，拆分后更清晰不混乱，易管理。\n- 技术实现：处理的业务不同，可能会采取不同的技术栈，如果是单体，依赖有冲突的时候不得不花时间fix冲突或者妥协放弃集成。微服务拆分后，相互独立，集成新技术更容易。\n- 测试：尤其是对单元测试和自动化测试更有好处，但对于整个集成测试却带来了挑战，通过可视化运维系统和一个完整的测试环境搭建，以及架构上适当调整，成熟化测试环境后，可以弥补这种不便。\n- 独立部署，快速而出错几率比较低，但运维量比较大，但通过可视化自动运维系统来克服。\n- 运行时的隔离，这个是显而易见的，就跟汽车道路一样，谁跑谁的道，互补干扰。\n- 分布式事务也有很多成熟的参考方案来解决：补偿型，可靠事件型，TCC型等。\n- 服务调用上，可以通过超时、隔离、服务发现负载均衡提高可用性和可靠性。\n- 网络延迟，可以采用轻量级协议和连接池技术等来弥补。\n","source":"_posts/微服务/微服务优缺点论述.md","raw":"---\ntitle: 微服务优缺点论述\nthumbnail: 'images/m1.jpg'\ndate: 2016-09-10 19:22:47\ncategories:\n\t- 微服务\ntags:\n\t- spring-cloud\n\t- 微服务\n\t- Spring Boot\nkeywords:\n\t- 微服务\n\t- Spring Cloud\n\t- Spring Boot\ndescription:\n---\n\n![IMG_20161026_142532.jpg](http://upload-images.jianshu.io/upload_images/2519252-a51def43c01ae44e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400)\n\n随着业务发展，业务功能的堆叠和复杂化，团队壮大，代码量也增加，各种问题开始凸显：\n\n* 代码结构开始变得混乱，难以管理，提交冲突，改一处引多处。\n* 沟通成本变高。\n* 代码维护难：“修复越多，缺陷越多”。\n* 引入和集成技术变得困难，依赖版本冲突，新特性无法使用。\n\n最后开发效率也开始下降，代码维护的成本提高。\n\n上线后稳定性不高，更大几率的影响可靠性和可用性，所有功能都运行在一个进程中，任何一个功能中出现bug，比如内存泄露，逻辑死循环耗尽CPU等，可以导致整个应用挂掉。\n其中几个高并发功能，也不得不部署将所有功能增加部署实例，内存和CPU利用不够充分，灵活性也变差。\n\n其缺点也很明显：\n\n- 运维工作量增加，应用运维管理复杂。\n- 代码重复率增加，团队自治带来的重复劳动。\n- 分布式系统固有的复杂性和缺点：网络延迟，不可靠，负载均衡，调用，事务等等\n\n微服务架构可以从一定程度上解决或缓解上述问题，但它也不是万能的，但也带来了一系列的非功能性需求，比如说分布式事务、自动化运维，服务发现，服务路由等额外需求，但其带来的好处以及克服其缺点总结如下：\n\n- 服务发现带来很多自运维特性。\n- 单一职责原则在各种各种场景的解耦合\n- 业务开发：只关注小团队所熟悉和负责的业务，做到专而精，并且容易实现持续交付。\n- 代码管理：无论多git repository还是多maven module都可以做到一般的代码隔离，尤其是积累很多年的代码，拆分后更清晰不混乱，易管理。\n- 技术实现：处理的业务不同，可能会采取不同的技术栈，如果是单体，依赖有冲突的时候不得不花时间fix冲突或者妥协放弃集成。微服务拆分后，相互独立，集成新技术更容易。\n- 测试：尤其是对单元测试和自动化测试更有好处，但对于整个集成测试却带来了挑战，通过可视化运维系统和一个完整的测试环境搭建，以及架构上适当调整，成熟化测试环境后，可以弥补这种不便。\n- 独立部署，快速而出错几率比较低，但运维量比较大，但通过可视化自动运维系统来克服。\n- 运行时的隔离，这个是显而易见的，就跟汽车道路一样，谁跑谁的道，互补干扰。\n- 分布式事务也有很多成熟的参考方案来解决：补偿型，可靠事件型，TCC型等。\n- 服务调用上，可以通过超时、隔离、服务发现负载均衡提高可用性和可靠性。\n- 网络延迟，可以采用轻量级协议和连接池技术等来弥补。\n","slug":"微服务/微服务优缺点论述","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emvv000vc9in4lzl5bsn","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-a51def43c01ae44e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400\" alt=\"IMG_20161026_142532.jpg\"></p>\n<p>随着业务发展，业务功能的堆叠和复杂化，团队壮大，代码量也增加，各种问题开始凸显：</p>\n<ul>\n<li>代码结构开始变得混乱，难以管理，提交冲突，改一处引多处。</li>\n<li>沟通成本变高。</li>\n<li>代码维护难：“修复越多，缺陷越多”。</li>\n<li>引入和集成技术变得困难，依赖版本冲突，新特性无法使用。</li>\n</ul>\n<p>最后开发效率也开始下降，代码维护的成本提高。</p>\n<p>上线后稳定性不高，更大几率的影响可靠性和可用性，所有功能都运行在一个进程中，任何一个功能中出现bug，比如内存泄露，逻辑死循环耗尽CPU等，可以导致整个应用挂掉。<br>其中几个高并发功能，也不得不部署将所有功能增加部署实例，内存和CPU利用不够充分，灵活性也变差。</p>\n<p>其缺点也很明显：</p>\n<ul>\n<li>运维工作量增加，应用运维管理复杂。</li>\n<li>代码重复率增加，团队自治带来的重复劳动。</li>\n<li>分布式系统固有的复杂性和缺点：网络延迟，不可靠，负载均衡，调用，事务等等</li>\n</ul>\n<p>微服务架构可以从一定程度上解决或缓解上述问题，但它也不是万能的，但也带来了一系列的非功能性需求，比如说分布式事务、自动化运维，服务发现，服务路由等额外需求，但其带来的好处以及克服其缺点总结如下：</p>\n<ul>\n<li>服务发现带来很多自运维特性。</li>\n<li>单一职责原则在各种各种场景的解耦合</li>\n<li>业务开发：只关注小团队所熟悉和负责的业务，做到专而精，并且容易实现持续交付。</li>\n<li>代码管理：无论多git repository还是多maven module都可以做到一般的代码隔离，尤其是积累很多年的代码，拆分后更清晰不混乱，易管理。</li>\n<li>技术实现：处理的业务不同，可能会采取不同的技术栈，如果是单体，依赖有冲突的时候不得不花时间fix冲突或者妥协放弃集成。微服务拆分后，相互独立，集成新技术更容易。</li>\n<li>测试：尤其是对单元测试和自动化测试更有好处，但对于整个集成测试却带来了挑战，通过可视化运维系统和一个完整的测试环境搭建，以及架构上适当调整，成熟化测试环境后，可以弥补这种不便。</li>\n<li>独立部署，快速而出错几率比较低，但运维量比较大，但通过可视化自动运维系统来克服。</li>\n<li>运行时的隔离，这个是显而易见的，就跟汽车道路一样，谁跑谁的道，互补干扰。</li>\n<li>分布式事务也有很多成熟的参考方案来解决：补偿型，可靠事件型，TCC型等。</li>\n<li>服务调用上，可以通过超时、隔离、服务发现负载均衡提高可用性和可靠性。</li>\n<li>网络延迟，可以采用轻量级协议和连接池技术等来弥补。</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-a51def43c01ae44e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400\" alt=\"IMG_20161026_142532.jpg\"></p>\n<p>随着业务发展，业务功能的堆叠和复杂化，团队壮大，代码量也增加，各种问题开始凸显：</p>\n<ul>\n<li>代码结构开始变得混乱，难以管理，提交冲突，改一处引多处。</li>\n<li>沟通成本变高。</li>\n<li>代码维护难：“修复越多，缺陷越多”。</li>\n<li>引入和集成技术变得困难，依赖版本冲突，新特性无法使用。</li>\n</ul>\n<p>最后开发效率也开始下降，代码维护的成本提高。</p>\n<p>上线后稳定性不高，更大几率的影响可靠性和可用性，所有功能都运行在一个进程中，任何一个功能中出现bug，比如内存泄露，逻辑死循环耗尽CPU等，可以导致整个应用挂掉。<br>其中几个高并发功能，也不得不部署将所有功能增加部署实例，内存和CPU利用不够充分，灵活性也变差。</p>\n<p>其缺点也很明显：</p>\n<ul>\n<li>运维工作量增加，应用运维管理复杂。</li>\n<li>代码重复率增加，团队自治带来的重复劳动。</li>\n<li>分布式系统固有的复杂性和缺点：网络延迟，不可靠，负载均衡，调用，事务等等</li>\n</ul>\n<p>微服务架构可以从一定程度上解决或缓解上述问题，但它也不是万能的，但也带来了一系列的非功能性需求，比如说分布式事务、自动化运维，服务发现，服务路由等额外需求，但其带来的好处以及克服其缺点总结如下：</p>\n<ul>\n<li>服务发现带来很多自运维特性。</li>\n<li>单一职责原则在各种各种场景的解耦合</li>\n<li>业务开发：只关注小团队所熟悉和负责的业务，做到专而精，并且容易实现持续交付。</li>\n<li>代码管理：无论多git repository还是多maven module都可以做到一般的代码隔离，尤其是积累很多年的代码，拆分后更清晰不混乱，易管理。</li>\n<li>技术实现：处理的业务不同，可能会采取不同的技术栈，如果是单体，依赖有冲突的时候不得不花时间fix冲突或者妥协放弃集成。微服务拆分后，相互独立，集成新技术更容易。</li>\n<li>测试：尤其是对单元测试和自动化测试更有好处，但对于整个集成测试却带来了挑战，通过可视化运维系统和一个完整的测试环境搭建，以及架构上适当调整，成熟化测试环境后，可以弥补这种不便。</li>\n<li>独立部署，快速而出错几率比较低，但运维量比较大，但通过可视化自动运维系统来克服。</li>\n<li>运行时的隔离，这个是显而易见的，就跟汽车道路一样，谁跑谁的道，互补干扰。</li>\n<li>分布式事务也有很多成熟的参考方案来解决：补偿型，可靠事件型，TCC型等。</li>\n<li>服务调用上，可以通过超时、隔离、服务发现负载均衡提高可用性和可靠性。</li>\n<li>网络延迟，可以采用轻量级协议和连接池技术等来弥补。</li>\n</ul>\n"},{"title":"微服务实施spring-cloud中踩过的坑","thumbnail":"images/m1.jpg","date":"2016-09-08T11:22:47.000Z","keywords":["微服务","Spring Cloud","Spring Boot"],"description":null,"_content":"\n![P61023-131735-01.jpg](http://upload-images.jianshu.io/upload_images/2519252-d2cc7d03dc185c51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 注册IP问题\n\n早期的Spring Cloud Eureka在注册获取网卡IP时，不能区分外网网卡和内网网卡，如果安装了虚拟机和docker也不能区分虚拟网卡，每次启动注册的IP都有可能不一样，如果要注册为外网网卡IP，那运行带宽就不够，这个bug应该说是比较严重的问题，因此重写了网卡IP获取的逻辑来解决，同时也反馈给了spring cloud团队，再后期的版本中添加了网卡接口排序和通过名称过滤的功能来得到解决。\n\n## HealthCheck的问题\n\n在一些极小概率的情况下，会导致Eureka Server 下线微服务实例，出现“Remote status from Eureka server is down”的问题，即便是重启微服务也无济于事，不过已经有码友在spring cloud 官方github贴出了解决方法的issue。\n\n## Zookeeper版本带来的性能问题\n\n现象是一个团队在实施微服务时，发现部署到服务器上的微服务，在没有任何请求时，仍然CPU占用20~30%；匪夷所思的是，同样的微服务包在本地开发机器、本地物理机、本地虚拟机运行并未出现。通过jvisualvm观察,如下图：\n\n![](<http://7xiovs.com1.z0.glb.clouddn.com/zk_jvisualvm.png>)\n\n可以看到和Zookeeper有关，同时我的另一个Demo微服务在任何环境下却未出现该问题。比较jar中依赖包之后发现，2个包中唯一不一样的是Apache Curator版本，一个是2.8.0, spring cloud默认依赖的版本；没问题的是Apache Curator 2.9.1。**Apache Curator 2.8.0 BUG！！！**在[Apache Curator 2.9.1 Release Notes](<https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12314425&version= 12332392>也发现了对此bug的描述。升级到2.9.1问题解决，皆大欢喜。同时上报此bug给Spring Cloud团队，升级Apache Curator版本。\n\n## Feign使用不当带来的性能问题\n\nFeign在Spring容器中使用了独立应用上下文，要注意命名空间上隔离，详情参考：[**Feign正确的使用方法和性能优化注意事项**](<http://tietang.wang/2016/09/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Feign%E4%BD%BF%E7%94%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/>) |http://www.jianshu.com/p/191d45210d16来绕过坑。\n\n这几个坑是不能容忍的，踩过其他小坑就不计其数了，但都不伤大雅，可以替代。\n","source":"_posts/微服务/微服务实施spring-cloud中踩过的坑.md","raw":"---\ntitle: 微服务实施spring-cloud中踩过的坑\nthumbnail: 'images/m1.jpg'\ndate: 2016-09-08 19:22:47\ncategories:\n\t- 微服务\ntags:\n\t- spring-cloud\n\t- 微服务\n\t- Spring Boot\nkeywords:\n\t- 微服务\n\t- Spring Cloud\n\t- Spring Boot\ndescription:\n---\n\n![P61023-131735-01.jpg](http://upload-images.jianshu.io/upload_images/2519252-d2cc7d03dc185c51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 注册IP问题\n\n早期的Spring Cloud Eureka在注册获取网卡IP时，不能区分外网网卡和内网网卡，如果安装了虚拟机和docker也不能区分虚拟网卡，每次启动注册的IP都有可能不一样，如果要注册为外网网卡IP，那运行带宽就不够，这个bug应该说是比较严重的问题，因此重写了网卡IP获取的逻辑来解决，同时也反馈给了spring cloud团队，再后期的版本中添加了网卡接口排序和通过名称过滤的功能来得到解决。\n\n## HealthCheck的问题\n\n在一些极小概率的情况下，会导致Eureka Server 下线微服务实例，出现“Remote status from Eureka server is down”的问题，即便是重启微服务也无济于事，不过已经有码友在spring cloud 官方github贴出了解决方法的issue。\n\n## Zookeeper版本带来的性能问题\n\n现象是一个团队在实施微服务时，发现部署到服务器上的微服务，在没有任何请求时，仍然CPU占用20~30%；匪夷所思的是，同样的微服务包在本地开发机器、本地物理机、本地虚拟机运行并未出现。通过jvisualvm观察,如下图：\n\n![](<http://7xiovs.com1.z0.glb.clouddn.com/zk_jvisualvm.png>)\n\n可以看到和Zookeeper有关，同时我的另一个Demo微服务在任何环境下却未出现该问题。比较jar中依赖包之后发现，2个包中唯一不一样的是Apache Curator版本，一个是2.8.0, spring cloud默认依赖的版本；没问题的是Apache Curator 2.9.1。**Apache Curator 2.8.0 BUG！！！**在[Apache Curator 2.9.1 Release Notes](<https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12314425&version= 12332392>也发现了对此bug的描述。升级到2.9.1问题解决，皆大欢喜。同时上报此bug给Spring Cloud团队，升级Apache Curator版本。\n\n## Feign使用不当带来的性能问题\n\nFeign在Spring容器中使用了独立应用上下文，要注意命名空间上隔离，详情参考：[**Feign正确的使用方法和性能优化注意事项**](<http://tietang.wang/2016/09/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Feign%E4%BD%BF%E7%94%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/>) |http://www.jianshu.com/p/191d45210d16来绕过坑。\n\n这几个坑是不能容忍的，踩过其他小坑就不计其数了，但都不伤大雅，可以替代。\n","slug":"微服务/微服务实施spring-cloud中踩过的坑","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emvy000yc9inpin3zk3u","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-d2cc7d03dc185c51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"P61023-131735-01.jpg\"></p>\n<h2 id=\"注册IP问题\"><a href=\"#注册IP问题\" class=\"headerlink\" title=\"注册IP问题\"></a>注册IP问题</h2><p>早期的Spring Cloud Eureka在注册获取网卡IP时，不能区分外网网卡和内网网卡，如果安装了虚拟机和docker也不能区分虚拟网卡，每次启动注册的IP都有可能不一样，如果要注册为外网网卡IP，那运行带宽就不够，这个bug应该说是比较严重的问题，因此重写了网卡IP获取的逻辑来解决，同时也反馈给了spring cloud团队，再后期的版本中添加了网卡接口排序和通过名称过滤的功能来得到解决。</p>\n<h2 id=\"HealthCheck的问题\"><a href=\"#HealthCheck的问题\" class=\"headerlink\" title=\"HealthCheck的问题\"></a>HealthCheck的问题</h2><p>在一些极小概率的情况下，会导致Eureka Server 下线微服务实例，出现“Remote status from Eureka server is down”的问题，即便是重启微服务也无济于事，不过已经有码友在spring cloud 官方github贴出了解决方法的issue。</p>\n<h2 id=\"Zookeeper版本带来的性能问题\"><a href=\"#Zookeeper版本带来的性能问题\" class=\"headerlink\" title=\"Zookeeper版本带来的性能问题\"></a>Zookeeper版本带来的性能问题</h2><p>现象是一个团队在实施微服务时，发现部署到服务器上的微服务，在没有任何请求时，仍然CPU占用20~30%；匪夷所思的是，同样的微服务包在本地开发机器、本地物理机、本地虚拟机运行并未出现。通过jvisualvm观察,如下图：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/zk_jvisualvm.png\" alt=\"\"></p>\n<p>可以看到和Zookeeper有关，同时我的另一个Demo微服务在任何环境下却未出现该问题。比较jar中依赖包之后发现，2个包中唯一不一样的是Apache Curator版本，一个是2.8.0, spring cloud默认依赖的版本；没问题的是Apache Curator 2.9.1。<strong>Apache Curator 2.8.0 BUG！！！</strong>在[Apache Curator 2.9.1 Release Notes](<https: 12332392=\"\" issues.apache.org=\"\" jira=\"\" secure=\"\" releasenote.jspa?projectid=\"12314425&version=\">也发现了对此bug的描述。升级到2.9.1问题解决，皆大欢喜。同时上报此bug给Spring Cloud团队，升级Apache Curator版本。</https:></p>\n<h2 id=\"Feign使用不当带来的性能问题\"><a href=\"#Feign使用不当带来的性能问题\" class=\"headerlink\" title=\"Feign使用不当带来的性能问题\"></a>Feign使用不当带来的性能问题</h2><p>Feign在Spring容器中使用了独立应用上下文，要注意命名空间上隔离，详情参考：<a href=\"http://tietang.wang/2016/09/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Feign%E4%BD%BF%E7%94%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/\" target=\"_blank\" rel=\"external\"><strong>Feign正确的使用方法和性能优化注意事项</strong></a> |<a href=\"http://www.jianshu.com/p/191d45210d16来绕过坑。\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/191d45210d16来绕过坑。</a></p>\n<p>这几个坑是不能容忍的，踩过其他小坑就不计其数了，但都不伤大雅，可以替代。</p>\n","excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-d2cc7d03dc185c51.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"P61023-131735-01.jpg\"></p>\n<h2 id=\"注册IP问题\"><a href=\"#注册IP问题\" class=\"headerlink\" title=\"注册IP问题\"></a>注册IP问题</h2><p>早期的Spring Cloud Eureka在注册获取网卡IP时，不能区分外网网卡和内网网卡，如果安装了虚拟机和docker也不能区分虚拟网卡，每次启动注册的IP都有可能不一样，如果要注册为外网网卡IP，那运行带宽就不够，这个bug应该说是比较严重的问题，因此重写了网卡IP获取的逻辑来解决，同时也反馈给了spring cloud团队，再后期的版本中添加了网卡接口排序和通过名称过滤的功能来得到解决。</p>\n<h2 id=\"HealthCheck的问题\"><a href=\"#HealthCheck的问题\" class=\"headerlink\" title=\"HealthCheck的问题\"></a>HealthCheck的问题</h2><p>在一些极小概率的情况下，会导致Eureka Server 下线微服务实例，出现“Remote status from Eureka server is down”的问题，即便是重启微服务也无济于事，不过已经有码友在spring cloud 官方github贴出了解决方法的issue。</p>\n<h2 id=\"Zookeeper版本带来的性能问题\"><a href=\"#Zookeeper版本带来的性能问题\" class=\"headerlink\" title=\"Zookeeper版本带来的性能问题\"></a>Zookeeper版本带来的性能问题</h2><p>现象是一个团队在实施微服务时，发现部署到服务器上的微服务，在没有任何请求时，仍然CPU占用20~30%；匪夷所思的是，同样的微服务包在本地开发机器、本地物理机、本地虚拟机运行并未出现。通过jvisualvm观察,如下图：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/zk_jvisualvm.png\" alt=\"\"></p>\n<p>可以看到和Zookeeper有关，同时我的另一个Demo微服务在任何环境下却未出现该问题。比较jar中依赖包之后发现，2个包中唯一不一样的是Apache Curator版本，一个是2.8.0, spring cloud默认依赖的版本；没问题的是Apache Curator 2.9.1。<strong>Apache Curator 2.8.0 BUG！！！</strong>在[Apache Curator 2.9.1 Release Notes](<https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12314425&version= 12332392>也发现了对此bug的描述。升级到2.9.1问题解决，皆大欢喜。同时上报此bug给Spring Cloud团队，升级Apache Curator版本。</p>\n<h2 id=\"Feign使用不当带来的性能问题\"><a href=\"#Feign使用不当带来的性能问题\" class=\"headerlink\" title=\"Feign使用不当带来的性能问题\"></a>Feign使用不当带来的性能问题</h2><p>Feign在Spring容器中使用了独立应用上下文，要注意命名空间上隔离，详情参考：<a href=\"http://tietang.wang/2016/09/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Feign%E4%BD%BF%E7%94%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/\"><strong>Feign正确的使用方法和性能优化注意事项</strong></a> |<a href=\"http://www.jianshu.com/p/191d45210d16来绕过坑。\">http://www.jianshu.com/p/191d45210d16来绕过坑。</a></p>\n<p>这几个坑是不能容忍的，踩过其他小坑就不计其数了，但都不伤大雅，可以替代。</p>\n"},{"title":"微服务拆分实践","thumbnail":"images/m1.jpg","date":"2016-09-08T11:22:47.000Z","keywords":["微服务","Spring Cloud","Spring Boot"],"description":null,"_content":"![IMG_20161026_144514.jpg](http://upload-images.jianshu.io/upload_images/2519252-54c30064a539893e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n\n说到微服务就不得不说拆分了，服务拆分要有一些指导依据。\n\n\n### 拆分依据\n\n微服务的理论知识有大量的分享，这里是我对微服务理论基础认识的一些观点：\n\n* 小，且专注于做一件事情，即满足[单一职责原则](<http://www.infoq.com/cn/articles/single-responsibility-in-software-development>)。 关于单一职责可以阅读我的另一篇文章[《软件开发中的单一职责》](<http://www.infoq.com/cn/articles/single-responsibility-in-software-development>)\n* 运行在独立的进程中。\n* 轻量级的通信机制，RPC或者HTTP或者MQ。\n* 松耦合，独立部署。\n* 康威定律：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。\n\n\n**服务拆分依据结合上面的理论基础充分考虑了以下因素：**\n\n- 业务和领域模型\n- 技术、业务量等其他因素\n- 团队\n\n业务应该说是最实在的，也是最好理解而且最容易把握的。虽然领域的有界上下文从理论上能指导拆分，但是万万需要拆分的不是一个全新的系统，而是一个在线上稳定运行了很长时间的，很多人一砖一瓦堆砌起来的，并且仍然在持续添砖加瓦，不管是桥梁，还是高楼，我们的目的是让系统运行的更健壮，而不是拆成七零八碎，所对于这样的老系统，用领域拆分需要结合团队现状，理论结合实际，事半功倍。\n\t\t\n运行时隔离也是很重要的拆分依据，会根据一些具有特定功能的API单独拆分出来作为一个微服务，和其他微服务隔离，避免相互影响，避免一个老鼠害了一锅汤。比如一些文件上传一类的API，特征是响应时间长，对IO依赖比较多，其线程池需要特殊配置；比如多线程利用CPU来换取响应时间的等等。\n\n对于康威定理，究竟是团队影响拆分，还是拆分影响团队，那就需要均衡利弊了。如果是因为拆分微服务，而拆分了团队，那势必会影响到团队的稳定性和团队成员的归属感，尤其是一个组建很久的老团队。反之，团队负责多种业务，也没有明显的职责区分，就要考虑是否拆分团队，明确拆分后的团队职责。\n\t\n对于正在运行的系统，如何拆分和拆分为多大的粒度，事实上是不能有太过理论化理想化，更需要深入项目本身和该项目团队，了解业务，人和代码。不能是拆迁队，也不是修缮，应该是拆成各种形状的合理大小的积木。\n\n孰重孰轻很难说明白，团队不一样项目不一样，实践就不一样，找到适合自己团队的方法。\n\n### 拆分粒度\n\n拆分粒度不应该过分追求细粒度，要考虑适中不能过大或过小。按照单一职责原则和康威定律，在业务域、团队还有技术上平衡粒度。拆分后的代码应该是易控制，易维护的，业务职责也是明确单一的。 \n\n### 拆分过程实践\n\n在拆分过程不得不考虑的是业务在跑，砖在砌，不能停，而且拆分工作也必须得进行，过程上不能一部到位，必须一步一步走，也由于此拆分后落地上线也要稳妥。所以，过程上，我也采用了比较稳妥的战术，**先拆分为maven module，然后在拆分为微服务可部署构件**。这样的好处是，拆分过程不影响业务迭代，而且可以随意组合成单体应用和微服务app，并且还可以事先测试和验证拆分，最大限度的降低微服务化实施的风险。\n\n**下面是拆分代码过程实践经验：**\n \n1). **设计module骨架**\n\nmodule骨架的设计是基础，影响最终拆分结果，拆分成功的向导。按照技术，业务，部署打包，测试这几个维度来规划设计，下面是一个参考。\n\n**最终骨架模型：**\n\n```\nroot web app\n\twebapp  //war module，打包为单体war，整体部署\n\tmicro-services //微服务pom module\n\t\tuser-service\n\t\tcustomer-service\n\t\torder-service\n\t\tother-service\n\t\tapi-gateway\n\tbiz //业务相关的module\n\t\tentitys \t\t\t//所有实体类\n\t\tbiz-base\t\t\t//一些无法拆分的代码上有依赖的服务\n\t\tbiz-user\t\t\t//用户业务\n\t\tbiz-customer\t\t//客户业务\n\t\tbiz-order\t\t\t//订单业务\n\t\t...\t\t\t\t\t\n\tcommons\n\t\tasync-framework  //一部框架\n\t\tutils\t\t\t\t//工具类\n\n```\n\n2). **拆分技术commons**\n\n作为第一步，先对整个工程按业务和功能进行了maven多module的拆分。拆分过程没有技巧可言，一步一步走，一步一个脚印。首先是分离出技术上的commons，感觉这应该是最好拆分的了，把相关的类重构到一个包里，在分离出一个module即可。实际过程并非如此，因为是老项目，这类commons也并没有想象的容易，经过很多人的添砖加瓦，并没有完全按照[单一职责原则](<http://www.infoq.com/cn/articles/single-responsibility-in-software-development>)来砌，根本就是把业务特征的代码也放到了技术类代码中，不过review代码后感觉还好，微遵循的毕竟是少数，那就先重构代码，把业务特性的砖从类里移出去。\n\n3). **拆分entity**\n\n很多在业务代码上都会共享entity类，通常没法也没法把entity类分门别类，最简单就是把所有的entity类放到一个module，谁需要谁依赖的原则。entity类也没有太多jar依赖和业务依赖，也不会形成污染源。\n\n4). **公共业务**\n\n同commons和entity方法，不在复述，也被各个业务依赖，这种业务大部分是过渡性的，在未来迭代演进时可以通过其他方式抽象集成。\n\n5). **拆分业务代码**\n\n拆分业务是最痛苦的事情了，这个要看原来的代码整洁度和互相依赖程度，一般采取2中方法：\n\n- 新建业务module，加入基础module的pom依赖，再从源module复制和该业务module相关的代码（包括单元测试代码）过来，解决编译错误和单元测试错误，完成本业务拆分。\n- 从源module复制一个新业务module，保持代码一致，先删除和本义务无关的代码（包括单元测试代码），再删除无关的pom依赖，解决编译错误和单元测试错误，完成本业务拆分。\n\n选择哪种方法，可以根据代码整洁度和互相依赖程度，如果代码很整洁且相互依赖较弱，可以采取前者，否则就采取后者。\n\n6). **拆分微服务**\n\n有了以上的拆分基础，可以在合适的业务迭代将各个微服务module迁移到不同的代码仓库，完成进一步隔离管理。\n","source":"_posts/微服务/微服务拆分实践.md","raw":"---\ntitle: 微服务拆分实践\nthumbnail: 'images/m1.jpg'\ndate: 2016-09-08 19:22:47\ncategories:\n\t- 微服务\ntags:\n\t- spring-cloud\n\t- 微服务\n\t- Spring Boot\nkeywords:\n\t- 微服务\n\t- Spring Cloud\n\t- Spring Boot\ndescription:\n---\n![IMG_20161026_144514.jpg](http://upload-images.jianshu.io/upload_images/2519252-54c30064a539893e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n\n说到微服务就不得不说拆分了，服务拆分要有一些指导依据。\n\n\n### 拆分依据\n\n微服务的理论知识有大量的分享，这里是我对微服务理论基础认识的一些观点：\n\n* 小，且专注于做一件事情，即满足[单一职责原则](<http://www.infoq.com/cn/articles/single-responsibility-in-software-development>)。 关于单一职责可以阅读我的另一篇文章[《软件开发中的单一职责》](<http://www.infoq.com/cn/articles/single-responsibility-in-software-development>)\n* 运行在独立的进程中。\n* 轻量级的通信机制，RPC或者HTTP或者MQ。\n* 松耦合，独立部署。\n* 康威定律：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。\n\n\n**服务拆分依据结合上面的理论基础充分考虑了以下因素：**\n\n- 业务和领域模型\n- 技术、业务量等其他因素\n- 团队\n\n业务应该说是最实在的，也是最好理解而且最容易把握的。虽然领域的有界上下文从理论上能指导拆分，但是万万需要拆分的不是一个全新的系统，而是一个在线上稳定运行了很长时间的，很多人一砖一瓦堆砌起来的，并且仍然在持续添砖加瓦，不管是桥梁，还是高楼，我们的目的是让系统运行的更健壮，而不是拆成七零八碎，所对于这样的老系统，用领域拆分需要结合团队现状，理论结合实际，事半功倍。\n\t\t\n运行时隔离也是很重要的拆分依据，会根据一些具有特定功能的API单独拆分出来作为一个微服务，和其他微服务隔离，避免相互影响，避免一个老鼠害了一锅汤。比如一些文件上传一类的API，特征是响应时间长，对IO依赖比较多，其线程池需要特殊配置；比如多线程利用CPU来换取响应时间的等等。\n\n对于康威定理，究竟是团队影响拆分，还是拆分影响团队，那就需要均衡利弊了。如果是因为拆分微服务，而拆分了团队，那势必会影响到团队的稳定性和团队成员的归属感，尤其是一个组建很久的老团队。反之，团队负责多种业务，也没有明显的职责区分，就要考虑是否拆分团队，明确拆分后的团队职责。\n\t\n对于正在运行的系统，如何拆分和拆分为多大的粒度，事实上是不能有太过理论化理想化，更需要深入项目本身和该项目团队，了解业务，人和代码。不能是拆迁队，也不是修缮，应该是拆成各种形状的合理大小的积木。\n\n孰重孰轻很难说明白，团队不一样项目不一样，实践就不一样，找到适合自己团队的方法。\n\n### 拆分粒度\n\n拆分粒度不应该过分追求细粒度，要考虑适中不能过大或过小。按照单一职责原则和康威定律，在业务域、团队还有技术上平衡粒度。拆分后的代码应该是易控制，易维护的，业务职责也是明确单一的。 \n\n### 拆分过程实践\n\n在拆分过程不得不考虑的是业务在跑，砖在砌，不能停，而且拆分工作也必须得进行，过程上不能一部到位，必须一步一步走，也由于此拆分后落地上线也要稳妥。所以，过程上，我也采用了比较稳妥的战术，**先拆分为maven module，然后在拆分为微服务可部署构件**。这样的好处是，拆分过程不影响业务迭代，而且可以随意组合成单体应用和微服务app，并且还可以事先测试和验证拆分，最大限度的降低微服务化实施的风险。\n\n**下面是拆分代码过程实践经验：**\n \n1). **设计module骨架**\n\nmodule骨架的设计是基础，影响最终拆分结果，拆分成功的向导。按照技术，业务，部署打包，测试这几个维度来规划设计，下面是一个参考。\n\n**最终骨架模型：**\n\n```\nroot web app\n\twebapp  //war module，打包为单体war，整体部署\n\tmicro-services //微服务pom module\n\t\tuser-service\n\t\tcustomer-service\n\t\torder-service\n\t\tother-service\n\t\tapi-gateway\n\tbiz //业务相关的module\n\t\tentitys \t\t\t//所有实体类\n\t\tbiz-base\t\t\t//一些无法拆分的代码上有依赖的服务\n\t\tbiz-user\t\t\t//用户业务\n\t\tbiz-customer\t\t//客户业务\n\t\tbiz-order\t\t\t//订单业务\n\t\t...\t\t\t\t\t\n\tcommons\n\t\tasync-framework  //一部框架\n\t\tutils\t\t\t\t//工具类\n\n```\n\n2). **拆分技术commons**\n\n作为第一步，先对整个工程按业务和功能进行了maven多module的拆分。拆分过程没有技巧可言，一步一步走，一步一个脚印。首先是分离出技术上的commons，感觉这应该是最好拆分的了，把相关的类重构到一个包里，在分离出一个module即可。实际过程并非如此，因为是老项目，这类commons也并没有想象的容易，经过很多人的添砖加瓦，并没有完全按照[单一职责原则](<http://www.infoq.com/cn/articles/single-responsibility-in-software-development>)来砌，根本就是把业务特征的代码也放到了技术类代码中，不过review代码后感觉还好，微遵循的毕竟是少数，那就先重构代码，把业务特性的砖从类里移出去。\n\n3). **拆分entity**\n\n很多在业务代码上都会共享entity类，通常没法也没法把entity类分门别类，最简单就是把所有的entity类放到一个module，谁需要谁依赖的原则。entity类也没有太多jar依赖和业务依赖，也不会形成污染源。\n\n4). **公共业务**\n\n同commons和entity方法，不在复述，也被各个业务依赖，这种业务大部分是过渡性的，在未来迭代演进时可以通过其他方式抽象集成。\n\n5). **拆分业务代码**\n\n拆分业务是最痛苦的事情了，这个要看原来的代码整洁度和互相依赖程度，一般采取2中方法：\n\n- 新建业务module，加入基础module的pom依赖，再从源module复制和该业务module相关的代码（包括单元测试代码）过来，解决编译错误和单元测试错误，完成本业务拆分。\n- 从源module复制一个新业务module，保持代码一致，先删除和本义务无关的代码（包括单元测试代码），再删除无关的pom依赖，解决编译错误和单元测试错误，完成本业务拆分。\n\n选择哪种方法，可以根据代码整洁度和互相依赖程度，如果代码很整洁且相互依赖较弱，可以采取前者，否则就采取后者。\n\n6). **拆分微服务**\n\n有了以上的拆分基础，可以在合适的业务迭代将各个微服务module迁移到不同的代码仓库，完成进一步隔离管理。\n","slug":"微服务/微服务拆分实践","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emw00011c9indopdn0ee","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-54c30064a539893e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"IMG_20161026_144514.jpg\"></p>\n<p>说到微服务就不得不说拆分了，服务拆分要有一些指导依据。</p>\n<h3 id=\"拆分依据\"><a href=\"#拆分依据\" class=\"headerlink\" title=\"拆分依据\"></a>拆分依据</h3><p>微服务的理论知识有大量的分享，这里是我对微服务理论基础认识的一些观点：</p>\n<ul>\n<li>小，且专注于做一件事情，即满足<a href=\"http://www.infoq.com/cn/articles/single-responsibility-in-software-development\" target=\"_blank\" rel=\"external\">单一职责原则</a>。 关于单一职责可以阅读我的另一篇文章<a href=\"http://www.infoq.com/cn/articles/single-responsibility-in-software-development\" target=\"_blank\" rel=\"external\">《软件开发中的单一职责》</a></li>\n<li>运行在独立的进程中。</li>\n<li>轻量级的通信机制，RPC或者HTTP或者MQ。</li>\n<li>松耦合，独立部署。</li>\n<li>康威定律：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。</li>\n</ul>\n<p><strong>服务拆分依据结合上面的理论基础充分考虑了以下因素：</strong></p>\n<ul>\n<li>业务和领域模型</li>\n<li>技术、业务量等其他因素</li>\n<li>团队</li>\n</ul>\n<p>业务应该说是最实在的，也是最好理解而且最容易把握的。虽然领域的有界上下文从理论上能指导拆分，但是万万需要拆分的不是一个全新的系统，而是一个在线上稳定运行了很长时间的，很多人一砖一瓦堆砌起来的，并且仍然在持续添砖加瓦，不管是桥梁，还是高楼，我们的目的是让系统运行的更健壮，而不是拆成七零八碎，所对于这样的老系统，用领域拆分需要结合团队现状，理论结合实际，事半功倍。</p>\n<p>运行时隔离也是很重要的拆分依据，会根据一些具有特定功能的API单独拆分出来作为一个微服务，和其他微服务隔离，避免相互影响，避免一个老鼠害了一锅汤。比如一些文件上传一类的API，特征是响应时间长，对IO依赖比较多，其线程池需要特殊配置；比如多线程利用CPU来换取响应时间的等等。</p>\n<p>对于康威定理，究竟是团队影响拆分，还是拆分影响团队，那就需要均衡利弊了。如果是因为拆分微服务，而拆分了团队，那势必会影响到团队的稳定性和团队成员的归属感，尤其是一个组建很久的老团队。反之，团队负责多种业务，也没有明显的职责区分，就要考虑是否拆分团队，明确拆分后的团队职责。</p>\n<p>对于正在运行的系统，如何拆分和拆分为多大的粒度，事实上是不能有太过理论化理想化，更需要深入项目本身和该项目团队，了解业务，人和代码。不能是拆迁队，也不是修缮，应该是拆成各种形状的合理大小的积木。</p>\n<p>孰重孰轻很难说明白，团队不一样项目不一样，实践就不一样，找到适合自己团队的方法。</p>\n<h3 id=\"拆分粒度\"><a href=\"#拆分粒度\" class=\"headerlink\" title=\"拆分粒度\"></a>拆分粒度</h3><p>拆分粒度不应该过分追求细粒度，要考虑适中不能过大或过小。按照单一职责原则和康威定律，在业务域、团队还有技术上平衡粒度。拆分后的代码应该是易控制，易维护的，业务职责也是明确单一的。 </p>\n<h3 id=\"拆分过程实践\"><a href=\"#拆分过程实践\" class=\"headerlink\" title=\"拆分过程实践\"></a>拆分过程实践</h3><p>在拆分过程不得不考虑的是业务在跑，砖在砌，不能停，而且拆分工作也必须得进行，过程上不能一部到位，必须一步一步走，也由于此拆分后落地上线也要稳妥。所以，过程上，我也采用了比较稳妥的战术，<strong>先拆分为maven module，然后在拆分为微服务可部署构件</strong>。这样的好处是，拆分过程不影响业务迭代，而且可以随意组合成单体应用和微服务app，并且还可以事先测试和验证拆分，最大限度的降低微服务化实施的风险。</p>\n<p><strong>下面是拆分代码过程实践经验：</strong></p>\n<p>1). <strong>设计module骨架</strong></p>\n<p>module骨架的设计是基础，影响最终拆分结果，拆分成功的向导。按照技术，业务，部署打包，测试这几个维度来规划设计，下面是一个参考。</p>\n<p><strong>最终骨架模型：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">root web app</div><div class=\"line\">\twebapp  //war module，打包为单体war，整体部署</div><div class=\"line\">\tmicro-services //微服务pom module</div><div class=\"line\">\t\tuser-service</div><div class=\"line\">\t\tcustomer-service</div><div class=\"line\">\t\torder-service</div><div class=\"line\">\t\tother-service</div><div class=\"line\">\t\tapi-gateway</div><div class=\"line\">\tbiz //业务相关的module</div><div class=\"line\">\t\tentitys \t\t\t//所有实体类</div><div class=\"line\">\t\tbiz-base\t\t\t//一些无法拆分的代码上有依赖的服务</div><div class=\"line\">\t\tbiz-user\t\t\t//用户业务</div><div class=\"line\">\t\tbiz-customer\t\t//客户业务</div><div class=\"line\">\t\tbiz-order\t\t\t//订单业务</div><div class=\"line\">\t\t...\t\t\t\t\t</div><div class=\"line\">\tcommons</div><div class=\"line\">\t\tasync-framework  //一部框架</div><div class=\"line\">\t\tutils\t\t\t\t//工具类</div></pre></td></tr></table></figure>\n<p>2). <strong>拆分技术commons</strong></p>\n<p>作为第一步，先对整个工程按业务和功能进行了maven多module的拆分。拆分过程没有技巧可言，一步一步走，一步一个脚印。首先是分离出技术上的commons，感觉这应该是最好拆分的了，把相关的类重构到一个包里，在分离出一个module即可。实际过程并非如此，因为是老项目，这类commons也并没有想象的容易，经过很多人的添砖加瓦，并没有完全按照<a href=\"http://www.infoq.com/cn/articles/single-responsibility-in-software-development\" target=\"_blank\" rel=\"external\">单一职责原则</a>来砌，根本就是把业务特征的代码也放到了技术类代码中，不过review代码后感觉还好，微遵循的毕竟是少数，那就先重构代码，把业务特性的砖从类里移出去。</p>\n<p>3). <strong>拆分entity</strong></p>\n<p>很多在业务代码上都会共享entity类，通常没法也没法把entity类分门别类，最简单就是把所有的entity类放到一个module，谁需要谁依赖的原则。entity类也没有太多jar依赖和业务依赖，也不会形成污染源。</p>\n<p>4). <strong>公共业务</strong></p>\n<p>同commons和entity方法，不在复述，也被各个业务依赖，这种业务大部分是过渡性的，在未来迭代演进时可以通过其他方式抽象集成。</p>\n<p>5). <strong>拆分业务代码</strong></p>\n<p>拆分业务是最痛苦的事情了，这个要看原来的代码整洁度和互相依赖程度，一般采取2中方法：</p>\n<ul>\n<li>新建业务module，加入基础module的pom依赖，再从源module复制和该业务module相关的代码（包括单元测试代码）过来，解决编译错误和单元测试错误，完成本业务拆分。</li>\n<li>从源module复制一个新业务module，保持代码一致，先删除和本义务无关的代码（包括单元测试代码），再删除无关的pom依赖，解决编译错误和单元测试错误，完成本业务拆分。</li>\n</ul>\n<p>选择哪种方法，可以根据代码整洁度和互相依赖程度，如果代码很整洁且相互依赖较弱，可以采取前者，否则就采取后者。</p>\n<p>6). <strong>拆分微服务</strong></p>\n<p>有了以上的拆分基础，可以在合适的业务迭代将各个微服务module迁移到不同的代码仓库，完成进一步隔离管理。</p>\n","excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2519252-54c30064a539893e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"IMG_20161026_144514.jpg\"></p>\n<p>说到微服务就不得不说拆分了，服务拆分要有一些指导依据。</p>\n<h3 id=\"拆分依据\"><a href=\"#拆分依据\" class=\"headerlink\" title=\"拆分依据\"></a>拆分依据</h3><p>微服务的理论知识有大量的分享，这里是我对微服务理论基础认识的一些观点：</p>\n<ul>\n<li>小，且专注于做一件事情，即满足<a href=\"http://www.infoq.com/cn/articles/single-responsibility-in-software-development\">单一职责原则</a>。 关于单一职责可以阅读我的另一篇文章<a href=\"http://www.infoq.com/cn/articles/single-responsibility-in-software-development\">《软件开发中的单一职责》</a></li>\n<li>运行在独立的进程中。</li>\n<li>轻量级的通信机制，RPC或者HTTP或者MQ。</li>\n<li>松耦合，独立部署。</li>\n<li>康威定律：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。</li>\n</ul>\n<p><strong>服务拆分依据结合上面的理论基础充分考虑了以下因素：</strong></p>\n<ul>\n<li>业务和领域模型</li>\n<li>技术、业务量等其他因素</li>\n<li>团队</li>\n</ul>\n<p>业务应该说是最实在的，也是最好理解而且最容易把握的。虽然领域的有界上下文从理论上能指导拆分，但是万万需要拆分的不是一个全新的系统，而是一个在线上稳定运行了很长时间的，很多人一砖一瓦堆砌起来的，并且仍然在持续添砖加瓦，不管是桥梁，还是高楼，我们的目的是让系统运行的更健壮，而不是拆成七零八碎，所对于这样的老系统，用领域拆分需要结合团队现状，理论结合实际，事半功倍。</p>\n<p>运行时隔离也是很重要的拆分依据，会根据一些具有特定功能的API单独拆分出来作为一个微服务，和其他微服务隔离，避免相互影响，避免一个老鼠害了一锅汤。比如一些文件上传一类的API，特征是响应时间长，对IO依赖比较多，其线程池需要特殊配置；比如多线程利用CPU来换取响应时间的等等。</p>\n<p>对于康威定理，究竟是团队影响拆分，还是拆分影响团队，那就需要均衡利弊了。如果是因为拆分微服务，而拆分了团队，那势必会影响到团队的稳定性和团队成员的归属感，尤其是一个组建很久的老团队。反之，团队负责多种业务，也没有明显的职责区分，就要考虑是否拆分团队，明确拆分后的团队职责。</p>\n<p>对于正在运行的系统，如何拆分和拆分为多大的粒度，事实上是不能有太过理论化理想化，更需要深入项目本身和该项目团队，了解业务，人和代码。不能是拆迁队，也不是修缮，应该是拆成各种形状的合理大小的积木。</p>\n<p>孰重孰轻很难说明白，团队不一样项目不一样，实践就不一样，找到适合自己团队的方法。</p>\n<h3 id=\"拆分粒度\"><a href=\"#拆分粒度\" class=\"headerlink\" title=\"拆分粒度\"></a>拆分粒度</h3><p>拆分粒度不应该过分追求细粒度，要考虑适中不能过大或过小。按照单一职责原则和康威定律，在业务域、团队还有技术上平衡粒度。拆分后的代码应该是易控制，易维护的，业务职责也是明确单一的。 </p>\n<h3 id=\"拆分过程实践\"><a href=\"#拆分过程实践\" class=\"headerlink\" title=\"拆分过程实践\"></a>拆分过程实践</h3><p>在拆分过程不得不考虑的是业务在跑，砖在砌，不能停，而且拆分工作也必须得进行，过程上不能一部到位，必须一步一步走，也由于此拆分后落地上线也要稳妥。所以，过程上，我也采用了比较稳妥的战术，<strong>先拆分为maven module，然后在拆分为微服务可部署构件</strong>。这样的好处是，拆分过程不影响业务迭代，而且可以随意组合成单体应用和微服务app，并且还可以事先测试和验证拆分，最大限度的降低微服务化实施的风险。</p>\n<p><strong>下面是拆分代码过程实践经验：</strong></p>\n<p>1). <strong>设计module骨架</strong></p>\n<p>module骨架的设计是基础，影响最终拆分结果，拆分成功的向导。按照技术，业务，部署打包，测试这几个维度来规划设计，下面是一个参考。</p>\n<p><strong>最终骨架模型：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">root web app</div><div class=\"line\">\twebapp  //war module，打包为单体war，整体部署</div><div class=\"line\">\tmicro-services //微服务pom module</div><div class=\"line\">\t\tuser-service</div><div class=\"line\">\t\tcustomer-service</div><div class=\"line\">\t\torder-service</div><div class=\"line\">\t\tother-service</div><div class=\"line\">\t\tapi-gateway</div><div class=\"line\">\tbiz //业务相关的module</div><div class=\"line\">\t\tentitys \t\t\t//所有实体类</div><div class=\"line\">\t\tbiz-base\t\t\t//一些无法拆分的代码上有依赖的服务</div><div class=\"line\">\t\tbiz-user\t\t\t//用户业务</div><div class=\"line\">\t\tbiz-customer\t\t//客户业务</div><div class=\"line\">\t\tbiz-order\t\t\t//订单业务</div><div class=\"line\">\t\t...\t\t\t\t\t</div><div class=\"line\">\tcommons</div><div class=\"line\">\t\tasync-framework  //一部框架</div><div class=\"line\">\t\tutils\t\t\t\t//工具类</div></pre></td></tr></table></figure>\n<p>2). <strong>拆分技术commons</strong></p>\n<p>作为第一步，先对整个工程按业务和功能进行了maven多module的拆分。拆分过程没有技巧可言，一步一步走，一步一个脚印。首先是分离出技术上的commons，感觉这应该是最好拆分的了，把相关的类重构到一个包里，在分离出一个module即可。实际过程并非如此，因为是老项目，这类commons也并没有想象的容易，经过很多人的添砖加瓦，并没有完全按照<a href=\"http://www.infoq.com/cn/articles/single-responsibility-in-software-development\">单一职责原则</a>来砌，根本就是把业务特征的代码也放到了技术类代码中，不过review代码后感觉还好，微遵循的毕竟是少数，那就先重构代码，把业务特性的砖从类里移出去。</p>\n<p>3). <strong>拆分entity</strong></p>\n<p>很多在业务代码上都会共享entity类，通常没法也没法把entity类分门别类，最简单就是把所有的entity类放到一个module，谁需要谁依赖的原则。entity类也没有太多jar依赖和业务依赖，也不会形成污染源。</p>\n<p>4). <strong>公共业务</strong></p>\n<p>同commons和entity方法，不在复述，也被各个业务依赖，这种业务大部分是过渡性的，在未来迭代演进时可以通过其他方式抽象集成。</p>\n<p>5). <strong>拆分业务代码</strong></p>\n<p>拆分业务是最痛苦的事情了，这个要看原来的代码整洁度和互相依赖程度，一般采取2中方法：</p>\n<ul>\n<li>新建业务module，加入基础module的pom依赖，再从源module复制和该业务module相关的代码（包括单元测试代码）过来，解决编译错误和单元测试错误，完成本业务拆分。</li>\n<li>从源module复制一个新业务module，保持代码一致，先删除和本义务无关的代码（包括单元测试代码），再删除无关的pom依赖，解决编译错误和单元测试错误，完成本业务拆分。</li>\n</ul>\n<p>选择哪种方法，可以根据代码整洁度和互相依赖程度，如果代码很整洁且相互依赖较弱，可以采取前者，否则就采取后者。</p>\n<p>6). <strong>拆分微服务</strong></p>\n<p>有了以上的拆分基础，可以在合适的业务迭代将各个微服务module迁移到不同的代码仓库，完成进一步隔离管理。</p>\n"},{"title":"负载均衡之加权轮询算法","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60606-172810.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30","date":"2016-06-16T01:06:33.000Z","keywords":"负载均衡,加权轮询,算法","description":null,"_content":"\n\n# 负载均衡之加权轮询算法\n\n## 算法举例说明\n\n 服务实例\t| 权重 \n ---|---|\n 127.0.0.1:8001\t| 1\n 127.0.0.1:8002 | 2\n 127.0.0.1:8003\t| 3\n\n  \n### 共有三个实例，总权重为6，那么实现效果应该为每调用6次：\n\n- 每个实例应该被调用权重次数\n- 权重数大的优先被调用\n\n### 根据以上说明，那么进行排列组合：\n\n- 先按照权重大小排序\n- 把权重数做为调用次数排列\n\n **排列的结果是这样的：**\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3\n2|\t127.0.0.1:8003|\t3\n3|\t127.0.0.1:8003|\t3\n4|\t127.0.0.1:8002|\t2\n5|\t127.0.0.1:8002|\t2\n6|\t127.0.0.1:8001|\t1\n\n貌似没问题，但每个实例调用不是交替的，分布不够均匀，改进一下重新排列组合：\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3\n2|\t127.0.0.1:8002|\t2\n3|\t127.0.0.1:8003|\t3\n4|\t127.0.0.1:8002|\t2\n5|\t127.0.0.1:8003|\t3\n6|\t127.0.0.1:8001|\t1\n\n或者\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3   \n2|\t127.0.0.1:8002|\t2\n3|\t127.0.0.1:8003|\t3\n4|\t127.0.0.1:8001|\t1\n5|\t127.0.0.1:8003|\t3\n6|\t127.0.0.1:8002|\t2\n\n\n2个权重变量：weight，current_weight\n\n### weight\n配置的固定不变的权重\n\n### current_weight\n\n会动态调整的权重，初始化为0，运行时动态调整。\n选取开始时，先重新调整current_weight= current_weight+weight，然后通过current_weight值从大到小排序，选择current_weight值最大的（实际编程中不一定要排序，可以直接取最大的）；\n然后重新计算被选择的current_weight值= current_weight-总weight。\n\n下面是用Lua脚本实现的该算法：\n\n ```lua\n \n function _M:next()\n\tlocal servers=self.servers\n \tlocal totalWeight = totalWeight(servers)\n \tfor k,v in pairs(servers) do\n\t\tv.cweight=v.weight+v.cweight\n\tend\n\n\ttable.sort( servers, \n\t\tfunction (a,b)\n\t\t\treturn a.cweight>b.cweight\n\t\tend \n\t)\n\tselected=servers[1]\n\tselected.cweight=selected.cweight-totalWeight\n\n\treturn selected\n\n end\n \n ```\n \n\n\n\n\n\n\n\n\n\n","source":"_posts/技术/负载均衡之加权轮询算法.md","raw":"---\ntitle: 负载均衡之加权轮询算法\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60606-172810.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30'\ndate: 2016-06-16 09:06:33\ncategories:\n\t- 技术\n\t- 算法\ntags:\n\t- 负载均衡\n\t- 加权轮询\n\t- 轮询\n\t- 算法\nkeywords: 负载均衡,加权轮询,算法\ndescription:\n---\n\n\n# 负载均衡之加权轮询算法\n\n## 算法举例说明\n\n 服务实例\t| 权重 \n ---|---|\n 127.0.0.1:8001\t| 1\n 127.0.0.1:8002 | 2\n 127.0.0.1:8003\t| 3\n\n  \n### 共有三个实例，总权重为6，那么实现效果应该为每调用6次：\n\n- 每个实例应该被调用权重次数\n- 权重数大的优先被调用\n\n### 根据以上说明，那么进行排列组合：\n\n- 先按照权重大小排序\n- 把权重数做为调用次数排列\n\n **排列的结果是这样的：**\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3\n2|\t127.0.0.1:8003|\t3\n3|\t127.0.0.1:8003|\t3\n4|\t127.0.0.1:8002|\t2\n5|\t127.0.0.1:8002|\t2\n6|\t127.0.0.1:8001|\t1\n\n貌似没问题，但每个实例调用不是交替的，分布不够均匀，改进一下重新排列组合：\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3\n2|\t127.0.0.1:8002|\t2\n3|\t127.0.0.1:8003|\t3\n4|\t127.0.0.1:8002|\t2\n5|\t127.0.0.1:8003|\t3\n6|\t127.0.0.1:8001|\t1\n\n或者\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3   \n2|\t127.0.0.1:8002|\t2\n3|\t127.0.0.1:8003|\t3\n4|\t127.0.0.1:8001|\t1\n5|\t127.0.0.1:8003|\t3\n6|\t127.0.0.1:8002|\t2\n\n\n2个权重变量：weight，current_weight\n\n### weight\n配置的固定不变的权重\n\n### current_weight\n\n会动态调整的权重，初始化为0，运行时动态调整。\n选取开始时，先重新调整current_weight= current_weight+weight，然后通过current_weight值从大到小排序，选择current_weight值最大的（实际编程中不一定要排序，可以直接取最大的）；\n然后重新计算被选择的current_weight值= current_weight-总weight。\n\n下面是用Lua脚本实现的该算法：\n\n ```lua\n \n function _M:next()\n\tlocal servers=self.servers\n \tlocal totalWeight = totalWeight(servers)\n \tfor k,v in pairs(servers) do\n\t\tv.cweight=v.weight+v.cweight\n\tend\n\n\ttable.sort( servers, \n\t\tfunction (a,b)\n\t\t\treturn a.cweight>b.cweight\n\t\tend \n\t)\n\tselected=servers[1]\n\tselected.cweight=selected.cweight-totalWeight\n\n\treturn selected\n\n end\n \n ```\n \n\n\n\n\n\n\n\n\n\n","slug":"技术/负载均衡之加权轮询算法","published":1,"updated":"2016-11-24T09:09:00.000Z","_id":"civw4emw40015c9inpoilr8tv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"负载均衡之加权轮询算法\"><a href=\"#负载均衡之加权轮询算法\" class=\"headerlink\" title=\"负载均衡之加权轮询算法\"></a>负载均衡之加权轮询算法</h1><h2 id=\"算法举例说明\"><a href=\"#算法举例说明\" class=\"headerlink\" title=\"算法举例说明\"></a>算法举例说明</h2><table>\n<thead>\n<tr>\n<th>服务实例</th>\n<th>权重 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n<tr>\n<td> 127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td> 127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"共有三个实例，总权重为6，那么实现效果应该为每调用6次：\"><a href=\"#共有三个实例，总权重为6，那么实现效果应该为每调用6次：\" class=\"headerlink\" title=\"共有三个实例，总权重为6，那么实现效果应该为每调用6次：\"></a>共有三个实例，总权重为6，那么实现效果应该为每调用6次：</h3><ul>\n<li>每个实例应该被调用权重次数</li>\n<li>权重数大的优先被调用</li>\n</ul>\n<h3 id=\"根据以上说明，那么进行排列组合：\"><a href=\"#根据以上说明，那么进行排列组合：\" class=\"headerlink\" title=\"根据以上说明，那么进行排列组合：\"></a>根据以上说明，那么进行排列组合：</h3><ul>\n<li>先按照权重大小排序</li>\n<li><p>把权重数做为调用次数排列</p>\n<p><strong>排列的结果是这样的：</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>貌似没问题，但每个实例调用不是交替的，分布不够均匀，改进一下重新排列组合：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>或者</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3   </td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>2个权重变量：weight，current_weight</p>\n<h3 id=\"weight\"><a href=\"#weight\" class=\"headerlink\" title=\"weight\"></a>weight</h3><p>配置的固定不变的权重</p>\n<h3 id=\"current-weight\"><a href=\"#current-weight\" class=\"headerlink\" title=\"current_weight\"></a>current_weight</h3><p>会动态调整的权重，初始化为0，运行时动态调整。<br>选取开始时，先重新调整current_weight= current_weight+weight，然后通过current_weight值从大到小排序，选择current_weight值最大的（实际编程中不一定要排序，可以直接取最大的）；<br>然后重新计算被选择的current_weight值= current_weight-总weight。</p>\n<p>下面是用Lua脚本实现的该算法：</p>\n <figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_M:next</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"keyword\">local</span> servers=self.servers</div><div class=\"line\">\t<span class=\"keyword\">local</span> totalWeight = totalWeight(servers)</div><div class=\"line\">\t<span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(servers) <span class=\"keyword\">do</span></div><div class=\"line\">\tv.cweight=v.weight+v.cweight</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">table</span>.sort( servers, </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a,b)</span></span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.cweight&gt;b.cweight</div><div class=\"line\">\t<span class=\"keyword\">end</span> </div><div class=\"line\">)</div><div class=\"line\">selected=servers[<span class=\"number\">1</span>]</div><div class=\"line\">selected.cweight=selected.cweight-totalWeight</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> selected</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"负载均衡之加权轮询算法\"><a href=\"#负载均衡之加权轮询算法\" class=\"headerlink\" title=\"负载均衡之加权轮询算法\"></a>负载均衡之加权轮询算法</h1><h2 id=\"算法举例说明\"><a href=\"#算法举例说明\" class=\"headerlink\" title=\"算法举例说明\"></a>算法举例说明</h2><table>\n<thead>\n<tr>\n<th>服务实例</th>\n<th>权重 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n<tr>\n<td> 127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td> 127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"共有三个实例，总权重为6，那么实现效果应该为每调用6次：\"><a href=\"#共有三个实例，总权重为6，那么实现效果应该为每调用6次：\" class=\"headerlink\" title=\"共有三个实例，总权重为6，那么实现效果应该为每调用6次：\"></a>共有三个实例，总权重为6，那么实现效果应该为每调用6次：</h3><ul>\n<li>每个实例应该被调用权重次数</li>\n<li>权重数大的优先被调用</li>\n</ul>\n<h3 id=\"根据以上说明，那么进行排列组合：\"><a href=\"#根据以上说明，那么进行排列组合：\" class=\"headerlink\" title=\"根据以上说明，那么进行排列组合：\"></a>根据以上说明，那么进行排列组合：</h3><ul>\n<li>先按照权重大小排序</li>\n<li><p>把权重数做为调用次数排列</p>\n<p><strong>排列的结果是这样的：</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>貌似没问题，但每个实例调用不是交替的，分布不够均匀，改进一下重新排列组合：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>或者</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3   </td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>2个权重变量：weight，current_weight</p>\n<h3 id=\"weight\"><a href=\"#weight\" class=\"headerlink\" title=\"weight\"></a>weight</h3><p>配置的固定不变的权重</p>\n<h3 id=\"current-weight\"><a href=\"#current-weight\" class=\"headerlink\" title=\"current_weight\"></a>current_weight</h3><p>会动态调整的权重，初始化为0，运行时动态调整。<br>选取开始时，先重新调整current_weight= current_weight+weight，然后通过current_weight值从大到小排序，选择current_weight值最大的（实际编程中不一定要排序，可以直接取最大的）；<br>然后重新计算被选择的current_weight值= current_weight-总weight。</p>\n<p>下面是用Lua脚本实现的该算法：</p>\n <figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_M:next</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"keyword\">local</span> servers=self.servers</div><div class=\"line\">\t<span class=\"keyword\">local</span> totalWeight = totalWeight(servers)</div><div class=\"line\">\t<span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(servers) <span class=\"keyword\">do</span></div><div class=\"line\">\tv.cweight=v.weight+v.cweight</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">table</span>.sort( servers, </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a,b)</span></span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a.cweight&gt;b.cweight</div><div class=\"line\">\t<span class=\"keyword\">end</span> </div><div class=\"line\">)</div><div class=\"line\">selected=servers[<span class=\"number\">1</span>]</div><div class=\"line\">selected.cweight=selected.cweight-totalWeight</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> selected</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n"},{"title":"Matthew Lien-Bleeding Wolves","thumbnail":"http://ftp.ytbbs.com/attachments/forum/day_081028/20081028_ae33dbbe16d4417e2b55GlDpalRfZsm4.jpg","date":"2016-02-22T05:22:54.000Z","keywords":null,"description":null,"_content":"\n\n \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n ","source":"_posts/music/Matthew-Lien-Bleeding-Wolves.md","raw":"---\ntitle: Matthew Lien-Bleeding Wolves\nthumbnail: 'http://ftp.ytbbs.com/attachments/forum/day_081028/20081028_ae33dbbe16d4417e2b55GlDpalRfZsm4.jpg'\ndate: 2016-02-22 13:22:54\ncategories: music\ntags:\nkeywords:\ndescription:\n---\n\n\n \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n ","slug":"music/Matthew-Lien-Bleeding-Wolves","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emw80017c9inpoyb2znf","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n","excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n"},{"title":"软件开发中的单一职责","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60607-090345.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30","date":"2016-06-28T01:06:33.000Z","keywords":"单一职责","description":null,"_content":"\n# 软件开发中的单一职责\n\n \n最近在实践微服务化过程中，对其“单一职责”原则深有体会。\n那么只有微服务化才可以单一职责，才可以解耦吗？答案是否定的。\n\n单一职责原则是这样定义的：单一的功能，并且完全封装起来。\n\n我们做后端Java开发的，应该最熟悉的就是标准的3层架构了，尤其是使用Spring.io体系的：Controller，Service，Dao/Repository。为什么要分层？就是为了保证单一职责，数据模型的事情交给Controller，业务逻辑的事情交给Service，和数据打交道的事情就交给Dao/Repository。有时候或者有些人会分层分的更多，4层，5层，我自己也这样干过，说白了也是为了保证单一职责，3层不能满足单一职责了，耦合度高了，就分。\n\n我们都知道一个webapp在经过一定时间的开发后，就惨不忍睹，即便是有标准的分层，页面或模板文件一大堆，最初的很清晰的3层标准架构也变味了，Controller，Service，Dao/Repository各层之间、Service之间、Dao/Repository之间互相调用，一团乱麻。这个时候没改一行代码都有可能一个老鼠害了一锅汤，bug就如同蚂蚁洞。\n\n### 这些问题最后就造成：\n\n- 可扩展性灵活性差，出现性能问题\n- 业务变更和开发困难，维护成本很高，交付时间长\n- 回归测试量很大\n- ...\n\n为了解决这些问题，就需要时时刻刻清楚的记住“**单一职责**”，**单一职责**可以用到软件开发的任何地方。\n\n应该说职责分离来解耦是最常用最有效的架构方法，这能够很大限度的简化一切。\n\n### 下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说**单一职责**：\n\n## 类方法/函数\n\n这应该是最小的能体现**单一职责**的程序单元了。最熟悉的最典型的莫过于Helper/Utils类方法了，但这种类方法的特征很明显，也很容易遵循单一职责，99%以上的开发人员都可以做到。但不仅仅这样的类方法要遵循单一职责原则，每一个类方法都应该遵循**单一职责**原则，尤其是一些处理业务逻辑的类方法更要遵循**单一职责**原则，处理业务的类方法通常要配合类的单一职责原则进行，下节中讨论。\n\n因此，这也是为什么很多TL要求类方法代码行数保持在20行左右，其实就是为了保证单一职责，20行左右是一个**经验粗略数字**，当然，10行或者30行来完成类方法也是可以的。大部分单一职责的类方法用20行左右的代码就够了，如果超过20行就要考虑是否保证了单一职责了。那我们在**迭代重构**的过程中就要考虑拆分这样的类方法来保证单一职责。\n\n类方法的单一职责是最单纯的，很具体的，不惨杂任何额外信息，只关心输入、输出、和职责；一定要明确地定义类方法的职责，保证在迭代中不被错误的扩张，调用方错误的使用。\n\n## 类/函数文件\n\t\n要用面向对象的设计方法，**单一职责原则**来定义类。开发人员一定要很好地理解“单一职责原则”，具有面向对象的抽象思维能力。\n\n当在迭代中一个类过于庞大或者快速膨胀，说明已经有坏味道了，这时候就需要考虑用单一职责原则或者面向对象的分析方法来重构和重新定义类了，通常就是要抽象和拆分类，否则将来会变成一个方法容器。\n\n把类比作一个人，她的职责就是完成自己职责范围内的事情，如果她什么事情都管，就叫多管闲事，可以想象她多管闲事的后果了，会搅得鸡犬不宁。同样，类也是，类如果多管闲事，那会搅得真个应用不稳定，漏洞百出，还很难修复。所以说定义一个类，要明确这个类的职责。使用面向对象的分析和设计方法，能很好地准确定义一个类的职责范围，通常就要用到封装、继承、多态和抽象等设计方法。\n\n \n## 包结构/文件夹\n\n分层就是最常用的架构方法之一，分层具体体现在分包和分类，就是分门别类的意思。俗话说，物以类聚，人以群分。\n\n包结构在单一职责原则上是类的补充，职责范围进一步扩大。如果把一个类叫做一个人，那么包就是一个最小单位的团队，职责就是负责一类特定事情。\n如何分包呢？那就要用到分类学的知识了，要以什么特征来分，可能不仅仅只有一种特征，比如，先用公司域名来做基础包名，这里叫一级包名；然后再用一个特定的有意义的标识作为二级子包名；之后按分层（web,dao,service等等）方法做三级包名，也可以先按照业务再按分层。例如：\n\n```\n\n域名：tietang.wang\n有个项目叫：social\n那么我可以这样分：\nwang.tietang\n\t- social\n\t\t- web\n\t\t- service\n\t\t- dao\n\t\t- commons\n\n也可以这样：\n\nwang.tietang\n\t- commons\n\t- user\n\t\t- web\n\t\t- service\n\t\t- dao\n\t- relation\n\t\t- web\n\t\t- service\n\t\t- dao\t \t\t\n\t\t\t\n\n\n```\n\n## 多工程/module\n\n通常以多maven module或者gradle 多module形式存在，来保证单一职责。\n当业务量还没有达到服务拆分的火候，又需要规整项目结构，通常在一个app发展的太庞大时或者在工程建设初期采取，从文件系统上隔离，通过module依赖来集成。需要注意的是这样的架构或拆分不是随意的，要以单一职责原则来拆分，更具体一点就是要根据业务，技术框架功能等特性来拆分。\n\n比如，按技术组件拆分，通常会有一些技术组件，可以把她放到commons module，如果有多种类型的技术组件，就拆分为commons module的子module；也可以直接将这些技术组件拆分为独立的工程，存在于独立的git/svn仓库，独立管理，专人负责；其他哪些module需要就依赖她。那拆分的这些技术组件的每一个应该遵循单一职责原则，例如数据分片的框架，NIO基础网络框架等等。\n\n比如，按业务拆分，例如有用户，订单，商品，支付，那么就按照这些业务拆分为子module，每一个子module就只负责自己的业务逻辑，也遵循单一职责。\n\n那每个module的职责范围又比类和包更大，这个时候职责也更模糊，有时候很难把握，对于技术组件可能相对清晰，业务module就要熟悉业务，明确业务边界。\n\n多module拆分后也是为将来服务化埋下伏笔，同时在物理文件系统比较清晰了，那在依赖管理上也要掌握好保持清晰的依赖逻辑，把握好单一职责原则。\n\n## 微服务/可部署单元\n\n微服务，从运行时隔离，但业务量发展到一定时候，从单体或者多module工程拆分或演化出来，可独立打包可独立部署并复合单一原则的application，当然了微服务所体现的价值不仅仅是隔离和独立部署，还有很多这里可以参考[单体应用与微服务优缺点辨析](<http://www.infoq.com/cn/news/2015/04/single-app-micro-service>)。单一职责在微服务中的价值是最重要的，包含了app层面和开发app的团队层面，微服务的大部分优点都可以围绕单一职责来张开。\n\n## 团队\n\n先引用《韩非子·扬权》中的一段文字：\n\n```\n夫物者有所宜，材者有所施，各处其宜，故上下无为。 \n使鸡司夜，令狸执鼠，皆用其能，上乃无事。\n上有所长，事乃不方。 \n矜而好能，下之所欺：辩惠好生，下因其材。\n上下易用，国故不治。\n\n```\n\n**参考：**\n\t\n- 原文：http://www.shici8.com/bookview_3501.html\n- 译文：http://www.shici8.com/article_8539.html\n\n各得其所，各司其职。所以，团队也要遵循单一职责原则，这样才能很好地管理团队成员的时间，提高效率。一个人专注做一件事情的效率远高于同时关注多件事情的。同样一个人一直管理和维护同一份代码要比多人同时维护多份代码的效率高很多。每一个人都有自己的个性，他有自己的擅长，让每一个人专注自己擅长的事情，那肯定事半功倍，整个团队绩效肯定也很突出。\n\n \n总之，引用古文名句说明了所有：\n\n- 物以类聚，人以群分。\n- 天下之事，分合交替，分久必合，合久必分！\n- 使鸡司夜，令狸执鼠，皆用其能，上乃无事。\n \n\n \n### 参考：\n\n [http://www.jianshu.com/p/f9d15827465d](<http://www.jianshu.com/p/f9d15827465d>)\n \n [https://zh.wikipedia.org/wiki/单一功能原则](<https://zh.wikipedia.org/wiki/单一功能原则>)\n\n\n\n\n\n\n","source":"_posts/技术/软件开发中的单一职责.md","raw":"---\ntitle: 软件开发中的单一职责\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60607-090345.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30'\ndate: 2016-06-28 09:06:33\ncategories:\n\t- 技术\n\t- 杂谈\ntags:\n\t- 单一职责\n\t- 软件开发\n\t- 微服务\n\nkeywords: 单一职责\ndescription:\n---\n\n# 软件开发中的单一职责\n\n \n最近在实践微服务化过程中，对其“单一职责”原则深有体会。\n那么只有微服务化才可以单一职责，才可以解耦吗？答案是否定的。\n\n单一职责原则是这样定义的：单一的功能，并且完全封装起来。\n\n我们做后端Java开发的，应该最熟悉的就是标准的3层架构了，尤其是使用Spring.io体系的：Controller，Service，Dao/Repository。为什么要分层？就是为了保证单一职责，数据模型的事情交给Controller，业务逻辑的事情交给Service，和数据打交道的事情就交给Dao/Repository。有时候或者有些人会分层分的更多，4层，5层，我自己也这样干过，说白了也是为了保证单一职责，3层不能满足单一职责了，耦合度高了，就分。\n\n我们都知道一个webapp在经过一定时间的开发后，就惨不忍睹，即便是有标准的分层，页面或模板文件一大堆，最初的很清晰的3层标准架构也变味了，Controller，Service，Dao/Repository各层之间、Service之间、Dao/Repository之间互相调用，一团乱麻。这个时候没改一行代码都有可能一个老鼠害了一锅汤，bug就如同蚂蚁洞。\n\n### 这些问题最后就造成：\n\n- 可扩展性灵活性差，出现性能问题\n- 业务变更和开发困难，维护成本很高，交付时间长\n- 回归测试量很大\n- ...\n\n为了解决这些问题，就需要时时刻刻清楚的记住“**单一职责**”，**单一职责**可以用到软件开发的任何地方。\n\n应该说职责分离来解耦是最常用最有效的架构方法，这能够很大限度的简化一切。\n\n### 下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说**单一职责**：\n\n## 类方法/函数\n\n这应该是最小的能体现**单一职责**的程序单元了。最熟悉的最典型的莫过于Helper/Utils类方法了，但这种类方法的特征很明显，也很容易遵循单一职责，99%以上的开发人员都可以做到。但不仅仅这样的类方法要遵循单一职责原则，每一个类方法都应该遵循**单一职责**原则，尤其是一些处理业务逻辑的类方法更要遵循**单一职责**原则，处理业务的类方法通常要配合类的单一职责原则进行，下节中讨论。\n\n因此，这也是为什么很多TL要求类方法代码行数保持在20行左右，其实就是为了保证单一职责，20行左右是一个**经验粗略数字**，当然，10行或者30行来完成类方法也是可以的。大部分单一职责的类方法用20行左右的代码就够了，如果超过20行就要考虑是否保证了单一职责了。那我们在**迭代重构**的过程中就要考虑拆分这样的类方法来保证单一职责。\n\n类方法的单一职责是最单纯的，很具体的，不惨杂任何额外信息，只关心输入、输出、和职责；一定要明确地定义类方法的职责，保证在迭代中不被错误的扩张，调用方错误的使用。\n\n## 类/函数文件\n\t\n要用面向对象的设计方法，**单一职责原则**来定义类。开发人员一定要很好地理解“单一职责原则”，具有面向对象的抽象思维能力。\n\n当在迭代中一个类过于庞大或者快速膨胀，说明已经有坏味道了，这时候就需要考虑用单一职责原则或者面向对象的分析方法来重构和重新定义类了，通常就是要抽象和拆分类，否则将来会变成一个方法容器。\n\n把类比作一个人，她的职责就是完成自己职责范围内的事情，如果她什么事情都管，就叫多管闲事，可以想象她多管闲事的后果了，会搅得鸡犬不宁。同样，类也是，类如果多管闲事，那会搅得真个应用不稳定，漏洞百出，还很难修复。所以说定义一个类，要明确这个类的职责。使用面向对象的分析和设计方法，能很好地准确定义一个类的职责范围，通常就要用到封装、继承、多态和抽象等设计方法。\n\n \n## 包结构/文件夹\n\n分层就是最常用的架构方法之一，分层具体体现在分包和分类，就是分门别类的意思。俗话说，物以类聚，人以群分。\n\n包结构在单一职责原则上是类的补充，职责范围进一步扩大。如果把一个类叫做一个人，那么包就是一个最小单位的团队，职责就是负责一类特定事情。\n如何分包呢？那就要用到分类学的知识了，要以什么特征来分，可能不仅仅只有一种特征，比如，先用公司域名来做基础包名，这里叫一级包名；然后再用一个特定的有意义的标识作为二级子包名；之后按分层（web,dao,service等等）方法做三级包名，也可以先按照业务再按分层。例如：\n\n```\n\n域名：tietang.wang\n有个项目叫：social\n那么我可以这样分：\nwang.tietang\n\t- social\n\t\t- web\n\t\t- service\n\t\t- dao\n\t\t- commons\n\n也可以这样：\n\nwang.tietang\n\t- commons\n\t- user\n\t\t- web\n\t\t- service\n\t\t- dao\n\t- relation\n\t\t- web\n\t\t- service\n\t\t- dao\t \t\t\n\t\t\t\n\n\n```\n\n## 多工程/module\n\n通常以多maven module或者gradle 多module形式存在，来保证单一职责。\n当业务量还没有达到服务拆分的火候，又需要规整项目结构，通常在一个app发展的太庞大时或者在工程建设初期采取，从文件系统上隔离，通过module依赖来集成。需要注意的是这样的架构或拆分不是随意的，要以单一职责原则来拆分，更具体一点就是要根据业务，技术框架功能等特性来拆分。\n\n比如，按技术组件拆分，通常会有一些技术组件，可以把她放到commons module，如果有多种类型的技术组件，就拆分为commons module的子module；也可以直接将这些技术组件拆分为独立的工程，存在于独立的git/svn仓库，独立管理，专人负责；其他哪些module需要就依赖她。那拆分的这些技术组件的每一个应该遵循单一职责原则，例如数据分片的框架，NIO基础网络框架等等。\n\n比如，按业务拆分，例如有用户，订单，商品，支付，那么就按照这些业务拆分为子module，每一个子module就只负责自己的业务逻辑，也遵循单一职责。\n\n那每个module的职责范围又比类和包更大，这个时候职责也更模糊，有时候很难把握，对于技术组件可能相对清晰，业务module就要熟悉业务，明确业务边界。\n\n多module拆分后也是为将来服务化埋下伏笔，同时在物理文件系统比较清晰了，那在依赖管理上也要掌握好保持清晰的依赖逻辑，把握好单一职责原则。\n\n## 微服务/可部署单元\n\n微服务，从运行时隔离，但业务量发展到一定时候，从单体或者多module工程拆分或演化出来，可独立打包可独立部署并复合单一原则的application，当然了微服务所体现的价值不仅仅是隔离和独立部署，还有很多这里可以参考[单体应用与微服务优缺点辨析](<http://www.infoq.com/cn/news/2015/04/single-app-micro-service>)。单一职责在微服务中的价值是最重要的，包含了app层面和开发app的团队层面，微服务的大部分优点都可以围绕单一职责来张开。\n\n## 团队\n\n先引用《韩非子·扬权》中的一段文字：\n\n```\n夫物者有所宜，材者有所施，各处其宜，故上下无为。 \n使鸡司夜，令狸执鼠，皆用其能，上乃无事。\n上有所长，事乃不方。 \n矜而好能，下之所欺：辩惠好生，下因其材。\n上下易用，国故不治。\n\n```\n\n**参考：**\n\t\n- 原文：http://www.shici8.com/bookview_3501.html\n- 译文：http://www.shici8.com/article_8539.html\n\n各得其所，各司其职。所以，团队也要遵循单一职责原则，这样才能很好地管理团队成员的时间，提高效率。一个人专注做一件事情的效率远高于同时关注多件事情的。同样一个人一直管理和维护同一份代码要比多人同时维护多份代码的效率高很多。每一个人都有自己的个性，他有自己的擅长，让每一个人专注自己擅长的事情，那肯定事半功倍，整个团队绩效肯定也很突出。\n\n \n总之，引用古文名句说明了所有：\n\n- 物以类聚，人以群分。\n- 天下之事，分合交替，分久必合，合久必分！\n- 使鸡司夜，令狸执鼠，皆用其能，上乃无事。\n \n\n \n### 参考：\n\n [http://www.jianshu.com/p/f9d15827465d](<http://www.jianshu.com/p/f9d15827465d>)\n \n [https://zh.wikipedia.org/wiki/单一功能原则](<https://zh.wikipedia.org/wiki/单一功能原则>)\n\n\n\n\n\n\n","slug":"技术/软件开发中的单一职责","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4emwf001bc9incjbhbz60","content":"<h1 id=\"软件开发中的单一职责\"><a href=\"#软件开发中的单一职责\" class=\"headerlink\" title=\"软件开发中的单一职责\"></a>软件开发中的单一职责</h1><p>最近在实践微服务化过程中，对其“单一职责”原则深有体会。<br>那么只有微服务化才可以单一职责，才可以解耦吗？答案是否定的。</p>\n<p>单一职责原则是这样定义的：单一的功能，并且完全封装起来。</p>\n<p>我们做后端Java开发的，应该最熟悉的就是标准的3层架构了，尤其是使用Spring.io体系的：Controller，Service，Dao/Repository。为什么要分层？就是为了保证单一职责，数据模型的事情交给Controller，业务逻辑的事情交给Service，和数据打交道的事情就交给Dao/Repository。有时候或者有些人会分层分的更多，4层，5层，我自己也这样干过，说白了也是为了保证单一职责，3层不能满足单一职责了，耦合度高了，就分。</p>\n<p>我们都知道一个webapp在经过一定时间的开发后，就惨不忍睹，即便是有标准的分层，页面或模板文件一大堆，最初的很清晰的3层标准架构也变味了，Controller，Service，Dao/Repository各层之间、Service之间、Dao/Repository之间互相调用，一团乱麻。这个时候没改一行代码都有可能一个老鼠害了一锅汤，bug就如同蚂蚁洞。</p>\n<h3 id=\"这些问题最后就造成：\"><a href=\"#这些问题最后就造成：\" class=\"headerlink\" title=\"这些问题最后就造成：\"></a>这些问题最后就造成：</h3><ul>\n<li>可扩展性灵活性差，出现性能问题</li>\n<li>业务变更和开发困难，维护成本很高，交付时间长</li>\n<li>回归测试量很大</li>\n<li>…</li>\n</ul>\n<p>为了解决这些问题，就需要时时刻刻清楚的记住“<strong>单一职责</strong>”，<strong>单一职责</strong>可以用到软件开发的任何地方。</p>\n<p>应该说职责分离来解耦是最常用最有效的架构方法，这能够很大限度的简化一切。</p>\n<h3 id=\"下面就从软件开发、设计、架构，以及重构-演进-进化，从小到大几个方面来说说单一职责：\"><a href=\"#下面就从软件开发、设计、架构，以及重构-演进-进化，从小到大几个方面来说说单一职责：\" class=\"headerlink\" title=\"下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说单一职责：\"></a>下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说<strong>单一职责</strong>：</h3><h2 id=\"类方法-函数\"><a href=\"#类方法-函数\" class=\"headerlink\" title=\"类方法/函数\"></a>类方法/函数</h2><p>这应该是最小的能体现<strong>单一职责</strong>的程序单元了。最熟悉的最典型的莫过于Helper/Utils类方法了，但这种类方法的特征很明显，也很容易遵循单一职责，99%以上的开发人员都可以做到。但不仅仅这样的类方法要遵循单一职责原则，每一个类方法都应该遵循<strong>单一职责</strong>原则，尤其是一些处理业务逻辑的类方法更要遵循<strong>单一职责</strong>原则，处理业务的类方法通常要配合类的单一职责原则进行，下节中讨论。</p>\n<p>因此，这也是为什么很多TL要求类方法代码行数保持在20行左右，其实就是为了保证单一职责，20行左右是一个<strong>经验粗略数字</strong>，当然，10行或者30行来完成类方法也是可以的。大部分单一职责的类方法用20行左右的代码就够了，如果超过20行就要考虑是否保证了单一职责了。那我们在<strong>迭代重构</strong>的过程中就要考虑拆分这样的类方法来保证单一职责。</p>\n<p>类方法的单一职责是最单纯的，很具体的，不惨杂任何额外信息，只关心输入、输出、和职责；一定要明确地定义类方法的职责，保证在迭代中不被错误的扩张，调用方错误的使用。</p>\n<h2 id=\"类-函数文件\"><a href=\"#类-函数文件\" class=\"headerlink\" title=\"类/函数文件\"></a>类/函数文件</h2><p>要用面向对象的设计方法，<strong>单一职责原则</strong>来定义类。开发人员一定要很好地理解“单一职责原则”，具有面向对象的抽象思维能力。</p>\n<p>当在迭代中一个类过于庞大或者快速膨胀，说明已经有坏味道了，这时候就需要考虑用单一职责原则或者面向对象的分析方法来重构和重新定义类了，通常就是要抽象和拆分类，否则将来会变成一个方法容器。</p>\n<p>把类比作一个人，她的职责就是完成自己职责范围内的事情，如果她什么事情都管，就叫多管闲事，可以想象她多管闲事的后果了，会搅得鸡犬不宁。同样，类也是，类如果多管闲事，那会搅得真个应用不稳定，漏洞百出，还很难修复。所以说定义一个类，要明确这个类的职责。使用面向对象的分析和设计方法，能很好地准确定义一个类的职责范围，通常就要用到封装、继承、多态和抽象等设计方法。</p>\n<h2 id=\"包结构-文件夹\"><a href=\"#包结构-文件夹\" class=\"headerlink\" title=\"包结构/文件夹\"></a>包结构/文件夹</h2><p>分层就是最常用的架构方法之一，分层具体体现在分包和分类，就是分门别类的意思。俗话说，物以类聚，人以群分。</p>\n<p>包结构在单一职责原则上是类的补充，职责范围进一步扩大。如果把一个类叫做一个人，那么包就是一个最小单位的团队，职责就是负责一类特定事情。<br>如何分包呢？那就要用到分类学的知识了，要以什么特征来分，可能不仅仅只有一种特征，比如，先用公司域名来做基础包名，这里叫一级包名；然后再用一个特定的有意义的标识作为二级子包名；之后按分层（web,dao,service等等）方法做三级包名，也可以先按照业务再按分层。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">域名：tietang.wang</div><div class=\"line\">有个项目叫：social</div><div class=\"line\">那么我可以这样分：</div><div class=\"line\">wang.tietang</div><div class=\"line\">\t- social</div><div class=\"line\">\t\t- web</div><div class=\"line\">\t\t- service</div><div class=\"line\">\t\t- dao</div><div class=\"line\">\t\t- commons</div><div class=\"line\"></div><div class=\"line\">也可以这样：</div><div class=\"line\"></div><div class=\"line\">wang.tietang</div><div class=\"line\">\t- commons</div><div class=\"line\">\t- user</div><div class=\"line\">\t\t- web</div><div class=\"line\">\t\t- service</div><div class=\"line\">\t\t- dao</div><div class=\"line\">\t- relation</div><div class=\"line\">\t\t- web</div><div class=\"line\">\t\t- service</div><div class=\"line\">\t\t- dao</div></pre></td></tr></table></figure>\n<h2 id=\"多工程-module\"><a href=\"#多工程-module\" class=\"headerlink\" title=\"多工程/module\"></a>多工程/module</h2><p>通常以多maven module或者gradle 多module形式存在，来保证单一职责。<br>当业务量还没有达到服务拆分的火候，又需要规整项目结构，通常在一个app发展的太庞大时或者在工程建设初期采取，从文件系统上隔离，通过module依赖来集成。需要注意的是这样的架构或拆分不是随意的，要以单一职责原则来拆分，更具体一点就是要根据业务，技术框架功能等特性来拆分。</p>\n<p>比如，按技术组件拆分，通常会有一些技术组件，可以把她放到commons module，如果有多种类型的技术组件，就拆分为commons module的子module；也可以直接将这些技术组件拆分为独立的工程，存在于独立的git/svn仓库，独立管理，专人负责；其他哪些module需要就依赖她。那拆分的这些技术组件的每一个应该遵循单一职责原则，例如数据分片的框架，NIO基础网络框架等等。</p>\n<p>比如，按业务拆分，例如有用户，订单，商品，支付，那么就按照这些业务拆分为子module，每一个子module就只负责自己的业务逻辑，也遵循单一职责。</p>\n<p>那每个module的职责范围又比类和包更大，这个时候职责也更模糊，有时候很难把握，对于技术组件可能相对清晰，业务module就要熟悉业务，明确业务边界。</p>\n<p>多module拆分后也是为将来服务化埋下伏笔，同时在物理文件系统比较清晰了，那在依赖管理上也要掌握好保持清晰的依赖逻辑，把握好单一职责原则。</p>\n<h2 id=\"微服务-可部署单元\"><a href=\"#微服务-可部署单元\" class=\"headerlink\" title=\"微服务/可部署单元\"></a>微服务/可部署单元</h2><p>微服务，从运行时隔离，但业务量发展到一定时候，从单体或者多module工程拆分或演化出来，可独立打包可独立部署并复合单一原则的application，当然了微服务所体现的价值不仅仅是隔离和独立部署，还有很多这里可以参考<a href=\"http://www.infoq.com/cn/news/2015/04/single-app-micro-service\" target=\"_blank\" rel=\"external\">单体应用与微服务优缺点辨析</a>。单一职责在微服务中的价值是最重要的，包含了app层面和开发app的团队层面，微服务的大部分优点都可以围绕单一职责来张开。</p>\n<h2 id=\"团队\"><a href=\"#团队\" class=\"headerlink\" title=\"团队\"></a>团队</h2><p>先引用《韩非子·扬权》中的一段文字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">夫物者有所宜，材者有所施，各处其宜，故上下无为。 </div><div class=\"line\">使鸡司夜，令狸执鼠，皆用其能，上乃无事。</div><div class=\"line\">上有所长，事乃不方。 </div><div class=\"line\">矜而好能，下之所欺：辩惠好生，下因其材。</div><div class=\"line\">上下易用，国故不治。</div></pre></td></tr></table></figure>\n<p><strong>参考：</strong></p>\n<ul>\n<li>原文：<a href=\"http://www.shici8.com/bookview_3501.html\" target=\"_blank\" rel=\"external\">http://www.shici8.com/bookview_3501.html</a></li>\n<li>译文：<a href=\"http://www.shici8.com/article_8539.html\" target=\"_blank\" rel=\"external\">http://www.shici8.com/article_8539.html</a></li>\n</ul>\n<p>各得其所，各司其职。所以，团队也要遵循单一职责原则，这样才能很好地管理团队成员的时间，提高效率。一个人专注做一件事情的效率远高于同时关注多件事情的。同样一个人一直管理和维护同一份代码要比多人同时维护多份代码的效率高很多。每一个人都有自己的个性，他有自己的擅长，让每一个人专注自己擅长的事情，那肯定事半功倍，整个团队绩效肯定也很突出。</p>\n<p>总之，引用古文名句说明了所有：</p>\n<ul>\n<li>物以类聚，人以群分。</li>\n<li>天下之事，分合交替，分久必合，合久必分！</li>\n<li>使鸡司夜，令狸执鼠，皆用其能，上乃无事。</li>\n</ul>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p> <a href=\"http://www.jianshu.com/p/f9d15827465d\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f9d15827465d</a></p>\n<p> <a href=\"https://zh.wikipedia.org/wiki/单一功能原则\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/单一功能原则</a></p>\n","excerpt":"","more":"<h1 id=\"软件开发中的单一职责\"><a href=\"#软件开发中的单一职责\" class=\"headerlink\" title=\"软件开发中的单一职责\"></a>软件开发中的单一职责</h1><p>最近在实践微服务化过程中，对其“单一职责”原则深有体会。<br>那么只有微服务化才可以单一职责，才可以解耦吗？答案是否定的。</p>\n<p>单一职责原则是这样定义的：单一的功能，并且完全封装起来。</p>\n<p>我们做后端Java开发的，应该最熟悉的就是标准的3层架构了，尤其是使用Spring.io体系的：Controller，Service，Dao/Repository。为什么要分层？就是为了保证单一职责，数据模型的事情交给Controller，业务逻辑的事情交给Service，和数据打交道的事情就交给Dao/Repository。有时候或者有些人会分层分的更多，4层，5层，我自己也这样干过，说白了也是为了保证单一职责，3层不能满足单一职责了，耦合度高了，就分。</p>\n<p>我们都知道一个webapp在经过一定时间的开发后，就惨不忍睹，即便是有标准的分层，页面或模板文件一大堆，最初的很清晰的3层标准架构也变味了，Controller，Service，Dao/Repository各层之间、Service之间、Dao/Repository之间互相调用，一团乱麻。这个时候没改一行代码都有可能一个老鼠害了一锅汤，bug就如同蚂蚁洞。</p>\n<h3 id=\"这些问题最后就造成：\"><a href=\"#这些问题最后就造成：\" class=\"headerlink\" title=\"这些问题最后就造成：\"></a>这些问题最后就造成：</h3><ul>\n<li>可扩展性灵活性差，出现性能问题</li>\n<li>业务变更和开发困难，维护成本很高，交付时间长</li>\n<li>回归测试量很大</li>\n<li>…</li>\n</ul>\n<p>为了解决这些问题，就需要时时刻刻清楚的记住“<strong>单一职责</strong>”，<strong>单一职责</strong>可以用到软件开发的任何地方。</p>\n<p>应该说职责分离来解耦是最常用最有效的架构方法，这能够很大限度的简化一切。</p>\n<h3 id=\"下面就从软件开发、设计、架构，以及重构-演进-进化，从小到大几个方面来说说单一职责：\"><a href=\"#下面就从软件开发、设计、架构，以及重构-演进-进化，从小到大几个方面来说说单一职责：\" class=\"headerlink\" title=\"下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说单一职责：\"></a>下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说<strong>单一职责</strong>：</h3><h2 id=\"类方法-函数\"><a href=\"#类方法-函数\" class=\"headerlink\" title=\"类方法/函数\"></a>类方法/函数</h2><p>这应该是最小的能体现<strong>单一职责</strong>的程序单元了。最熟悉的最典型的莫过于Helper/Utils类方法了，但这种类方法的特征很明显，也很容易遵循单一职责，99%以上的开发人员都可以做到。但不仅仅这样的类方法要遵循单一职责原则，每一个类方法都应该遵循<strong>单一职责</strong>原则，尤其是一些处理业务逻辑的类方法更要遵循<strong>单一职责</strong>原则，处理业务的类方法通常要配合类的单一职责原则进行，下节中讨论。</p>\n<p>因此，这也是为什么很多TL要求类方法代码行数保持在20行左右，其实就是为了保证单一职责，20行左右是一个<strong>经验粗略数字</strong>，当然，10行或者30行来完成类方法也是可以的。大部分单一职责的类方法用20行左右的代码就够了，如果超过20行就要考虑是否保证了单一职责了。那我们在<strong>迭代重构</strong>的过程中就要考虑拆分这样的类方法来保证单一职责。</p>\n<p>类方法的单一职责是最单纯的，很具体的，不惨杂任何额外信息，只关心输入、输出、和职责；一定要明确地定义类方法的职责，保证在迭代中不被错误的扩张，调用方错误的使用。</p>\n<h2 id=\"类-函数文件\"><a href=\"#类-函数文件\" class=\"headerlink\" title=\"类/函数文件\"></a>类/函数文件</h2><p>要用面向对象的设计方法，<strong>单一职责原则</strong>来定义类。开发人员一定要很好地理解“单一职责原则”，具有面向对象的抽象思维能力。</p>\n<p>当在迭代中一个类过于庞大或者快速膨胀，说明已经有坏味道了，这时候就需要考虑用单一职责原则或者面向对象的分析方法来重构和重新定义类了，通常就是要抽象和拆分类，否则将来会变成一个方法容器。</p>\n<p>把类比作一个人，她的职责就是完成自己职责范围内的事情，如果她什么事情都管，就叫多管闲事，可以想象她多管闲事的后果了，会搅得鸡犬不宁。同样，类也是，类如果多管闲事，那会搅得真个应用不稳定，漏洞百出，还很难修复。所以说定义一个类，要明确这个类的职责。使用面向对象的分析和设计方法，能很好地准确定义一个类的职责范围，通常就要用到封装、继承、多态和抽象等设计方法。</p>\n<h2 id=\"包结构-文件夹\"><a href=\"#包结构-文件夹\" class=\"headerlink\" title=\"包结构/文件夹\"></a>包结构/文件夹</h2><p>分层就是最常用的架构方法之一，分层具体体现在分包和分类，就是分门别类的意思。俗话说，物以类聚，人以群分。</p>\n<p>包结构在单一职责原则上是类的补充，职责范围进一步扩大。如果把一个类叫做一个人，那么包就是一个最小单位的团队，职责就是负责一类特定事情。<br>如何分包呢？那就要用到分类学的知识了，要以什么特征来分，可能不仅仅只有一种特征，比如，先用公司域名来做基础包名，这里叫一级包名；然后再用一个特定的有意义的标识作为二级子包名；之后按分层（web,dao,service等等）方法做三级包名，也可以先按照业务再按分层。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">域名：tietang.wang</div><div class=\"line\">有个项目叫：social</div><div class=\"line\">那么我可以这样分：</div><div class=\"line\">wang.tietang</div><div class=\"line\">\t- social</div><div class=\"line\">\t\t- web</div><div class=\"line\">\t\t- service</div><div class=\"line\">\t\t- dao</div><div class=\"line\">\t\t- commons</div><div class=\"line\"></div><div class=\"line\">也可以这样：</div><div class=\"line\"></div><div class=\"line\">wang.tietang</div><div class=\"line\">\t- commons</div><div class=\"line\">\t- user</div><div class=\"line\">\t\t- web</div><div class=\"line\">\t\t- service</div><div class=\"line\">\t\t- dao</div><div class=\"line\">\t- relation</div><div class=\"line\">\t\t- web</div><div class=\"line\">\t\t- service</div><div class=\"line\">\t\t- dao</div></pre></td></tr></table></figure>\n<h2 id=\"多工程-module\"><a href=\"#多工程-module\" class=\"headerlink\" title=\"多工程/module\"></a>多工程/module</h2><p>通常以多maven module或者gradle 多module形式存在，来保证单一职责。<br>当业务量还没有达到服务拆分的火候，又需要规整项目结构，通常在一个app发展的太庞大时或者在工程建设初期采取，从文件系统上隔离，通过module依赖来集成。需要注意的是这样的架构或拆分不是随意的，要以单一职责原则来拆分，更具体一点就是要根据业务，技术框架功能等特性来拆分。</p>\n<p>比如，按技术组件拆分，通常会有一些技术组件，可以把她放到commons module，如果有多种类型的技术组件，就拆分为commons module的子module；也可以直接将这些技术组件拆分为独立的工程，存在于独立的git/svn仓库，独立管理，专人负责；其他哪些module需要就依赖她。那拆分的这些技术组件的每一个应该遵循单一职责原则，例如数据分片的框架，NIO基础网络框架等等。</p>\n<p>比如，按业务拆分，例如有用户，订单，商品，支付，那么就按照这些业务拆分为子module，每一个子module就只负责自己的业务逻辑，也遵循单一职责。</p>\n<p>那每个module的职责范围又比类和包更大，这个时候职责也更模糊，有时候很难把握，对于技术组件可能相对清晰，业务module就要熟悉业务，明确业务边界。</p>\n<p>多module拆分后也是为将来服务化埋下伏笔，同时在物理文件系统比较清晰了，那在依赖管理上也要掌握好保持清晰的依赖逻辑，把握好单一职责原则。</p>\n<h2 id=\"微服务-可部署单元\"><a href=\"#微服务-可部署单元\" class=\"headerlink\" title=\"微服务/可部署单元\"></a>微服务/可部署单元</h2><p>微服务，从运行时隔离，但业务量发展到一定时候，从单体或者多module工程拆分或演化出来，可独立打包可独立部署并复合单一原则的application，当然了微服务所体现的价值不仅仅是隔离和独立部署，还有很多这里可以参考<a href=\"http://www.infoq.com/cn/news/2015/04/single-app-micro-service\">单体应用与微服务优缺点辨析</a>。单一职责在微服务中的价值是最重要的，包含了app层面和开发app的团队层面，微服务的大部分优点都可以围绕单一职责来张开。</p>\n<h2 id=\"团队\"><a href=\"#团队\" class=\"headerlink\" title=\"团队\"></a>团队</h2><p>先引用《韩非子·扬权》中的一段文字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">夫物者有所宜，材者有所施，各处其宜，故上下无为。 </div><div class=\"line\">使鸡司夜，令狸执鼠，皆用其能，上乃无事。</div><div class=\"line\">上有所长，事乃不方。 </div><div class=\"line\">矜而好能，下之所欺：辩惠好生，下因其材。</div><div class=\"line\">上下易用，国故不治。</div></pre></td></tr></table></figure>\n<p><strong>参考：</strong></p>\n<ul>\n<li>原文：<a href=\"http://www.shici8.com/bookview_3501.html\">http://www.shici8.com/bookview_3501.html</a></li>\n<li>译文：<a href=\"http://www.shici8.com/article_8539.html\">http://www.shici8.com/article_8539.html</a></li>\n</ul>\n<p>各得其所，各司其职。所以，团队也要遵循单一职责原则，这样才能很好地管理团队成员的时间，提高效率。一个人专注做一件事情的效率远高于同时关注多件事情的。同样一个人一直管理和维护同一份代码要比多人同时维护多份代码的效率高很多。每一个人都有自己的个性，他有自己的擅长，让每一个人专注自己擅长的事情，那肯定事半功倍，整个团队绩效肯定也很突出。</p>\n<p>总之，引用古文名句说明了所有：</p>\n<ul>\n<li>物以类聚，人以群分。</li>\n<li>天下之事，分合交替，分久必合，合久必分！</li>\n<li>使鸡司夜，令狸执鼠，皆用其能，上乃无事。</li>\n</ul>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p> <a href=\"http://www.jianshu.com/p/f9d15827465d\">http://www.jianshu.com/p/f9d15827465d</a></p>\n<p> <a href=\"https://zh.wikipedia.org/wiki/单一功能原则\">https://zh.wikipedia.org/wiki/单一功能原则</a></p>\n"},{"title":"FlatBuffers 使用指南","date":"2016-02-19T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122224.JPG","_content":"\n# FlatBuffers 使用指南\n\nFlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍\n\n## 编译源码\n\n```\n$ git clone https://github.com/google/flatbuffers.git\n#切换到最新release版本\n$ git checkout v1.2.0\n```\n\n### 安装cmake \n\nhttp://www.cmake.org.\n\n```\nfor mac osx\n$ brew install cmake\nfor centOS\n$ sudo yum install cmake\n```\n\n### 用cmake构建project\n\n```\ncmake -G \"Unix Makefiles\"\ncmake -G \"Visual Studio 10\"\ncmake -G \"Xcode\"\n```\n在*nix系统，mac osx系统也建议使用 `cmake -G \"Unix Makefiles\"`，生成`Makefile`,之后`make & make install`\n编译生成`flatc`并安装到系统。\n\n```\n$ cmake -G \"Unix Makefiles\"\n$ make\n$ make insall\n\n```\n\n\n## 使用schema编译器flatc来生成基础代码\n\n```\n$ cd samples\n#在目录src中生成java代码\n$flatc -j -o src monster.fbs \n\n```\n\n### 编程语言参数:\n\n+ --cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).\n+ --java, -j : Generate Java code.\n+ --csharp, -n : Generate C# code.\n+ --go, -g : Generate Go code.\n+ --python, -p: Generate Python code.\n+ --javascript, -s: Generate JavaScript code.\n+ --php: Generate PHP code.\n\n### 其他常用选项：\n\n+ -o PATH 指定源码输出目录\n+ -I PATH 有include语句时，指定include目录\n\n\n# 完整的参数\n\n```\nusage: flatc [OPTION]... FILE... [-- FILE...]\n  -b              Generate wire format binaries for any data definitions.\n  -t              Generate text output for any data definitions.\n  -c              Generate C++ headers for tables/structs.\n  -g              Generate Go files for tables/structs.\n  -j              Generate Java classes for tables/structs.\n  -s              Generate JavaScript code for tables/structs.\n  -n              Generate C# classes for tables/structs.\n  -p              Generate Python files for tables/structs.\n  -o PATH         Prefix PATH to all generated files.\n  -I PATH         Search for includes in the specified path.\n  -M              Print make rules for generated files.\n  --strict-json   Strict JSON: field names must be / will be quoted,\n                  no trailing commas in tables/vectors.\n  --defaults-json Output fields whose value is the default when\n                  writing JSON\n  --no-prefix     Don't prefix enum values with the enum type in C++.\n  --scoped-enums  Use C++11 style scoped and strongly typed enums.\n                  also implies --no-prefix.\n  --gen-includes  (deprecated), this is the default behavior.\n                  If the original behavior is required (no include\n                  statements) use --no-includes.\n  --no-includes   Don't generate include statements for included\n                  schemas the generated file depends on (C++).\n  --gen-mutable   Generate accessors that can mutate buffers in-place.\n  --gen-onefile   Generate single output file for C#\n  --raw-binary    Allow binaries without file_indentifier to be read.\n                  This may crash flatc given a mismatched schema.\n  --proto         Input is a .proto, translate to .fbs.\n  --schema        Serialize schemas instead of JSON (use with -b)\nFILEs may depend on declarations in earlier files.\nFILEs after the -- must be binary flatbuffer format files.\nOutput files are named using the base file name of the input,\nand written to the current directory or the path given by -o.\nexample: flatc -c -b schema1.fbs schema2.fbs data.json\n```\n\n## 写schema IDL文件\n\n参考：http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\n","source":"_posts/技术/FlatBuffers/FlatBuffers使用指南.md","raw":"---\ntitle: FlatBuffers 使用指南\ndate: 2016-02-19 20:20:42\ncategories: \n\t- 技术\n\t- FlatBuffers\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122224.JPG\ntags: \n\t- FlatBuffers\n\t- 序列化\n---\n\n# FlatBuffers 使用指南\n\nFlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍\n\n## 编译源码\n\n```\n$ git clone https://github.com/google/flatbuffers.git\n#切换到最新release版本\n$ git checkout v1.2.0\n```\n\n### 安装cmake \n\nhttp://www.cmake.org.\n\n```\nfor mac osx\n$ brew install cmake\nfor centOS\n$ sudo yum install cmake\n```\n\n### 用cmake构建project\n\n```\ncmake -G \"Unix Makefiles\"\ncmake -G \"Visual Studio 10\"\ncmake -G \"Xcode\"\n```\n在*nix系统，mac osx系统也建议使用 `cmake -G \"Unix Makefiles\"`，生成`Makefile`,之后`make & make install`\n编译生成`flatc`并安装到系统。\n\n```\n$ cmake -G \"Unix Makefiles\"\n$ make\n$ make insall\n\n```\n\n\n## 使用schema编译器flatc来生成基础代码\n\n```\n$ cd samples\n#在目录src中生成java代码\n$flatc -j -o src monster.fbs \n\n```\n\n### 编程语言参数:\n\n+ --cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).\n+ --java, -j : Generate Java code.\n+ --csharp, -n : Generate C# code.\n+ --go, -g : Generate Go code.\n+ --python, -p: Generate Python code.\n+ --javascript, -s: Generate JavaScript code.\n+ --php: Generate PHP code.\n\n### 其他常用选项：\n\n+ -o PATH 指定源码输出目录\n+ -I PATH 有include语句时，指定include目录\n\n\n# 完整的参数\n\n```\nusage: flatc [OPTION]... FILE... [-- FILE...]\n  -b              Generate wire format binaries for any data definitions.\n  -t              Generate text output for any data definitions.\n  -c              Generate C++ headers for tables/structs.\n  -g              Generate Go files for tables/structs.\n  -j              Generate Java classes for tables/structs.\n  -s              Generate JavaScript code for tables/structs.\n  -n              Generate C# classes for tables/structs.\n  -p              Generate Python files for tables/structs.\n  -o PATH         Prefix PATH to all generated files.\n  -I PATH         Search for includes in the specified path.\n  -M              Print make rules for generated files.\n  --strict-json   Strict JSON: field names must be / will be quoted,\n                  no trailing commas in tables/vectors.\n  --defaults-json Output fields whose value is the default when\n                  writing JSON\n  --no-prefix     Don't prefix enum values with the enum type in C++.\n  --scoped-enums  Use C++11 style scoped and strongly typed enums.\n                  also implies --no-prefix.\n  --gen-includes  (deprecated), this is the default behavior.\n                  If the original behavior is required (no include\n                  statements) use --no-includes.\n  --no-includes   Don't generate include statements for included\n                  schemas the generated file depends on (C++).\n  --gen-mutable   Generate accessors that can mutate buffers in-place.\n  --gen-onefile   Generate single output file for C#\n  --raw-binary    Allow binaries without file_indentifier to be read.\n                  This may crash flatc given a mismatched schema.\n  --proto         Input is a .proto, translate to .fbs.\n  --schema        Serialize schemas instead of JSON (use with -b)\nFILEs may depend on declarations in earlier files.\nFILEs after the -- must be binary flatbuffer format files.\nOutput files are named using the base file name of the input,\nand written to the current directory or the path given by -o.\nexample: flatc -c -b schema1.fbs schema2.fbs data.json\n```\n\n## 写schema IDL文件\n\n参考：http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\n","slug":"技术/FlatBuffers/FlatBuffers使用指南","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4en070045c9in3hh11sle","content":"<h1 id=\"FlatBuffers-使用指南\"><a href=\"#FlatBuffers-使用指南\" class=\"headerlink\" title=\"FlatBuffers 使用指南\"></a>FlatBuffers 使用指南</h1><p>FlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍</p>\n<h2 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/google/flatbuffers.git</div><div class=\"line\">#切换到最新release版本</div><div class=\"line\">$ git checkout v1.2.0</div></pre></td></tr></table></figure>\n<h3 id=\"安装cmake\"><a href=\"#安装cmake\" class=\"headerlink\" title=\"安装cmake\"></a>安装cmake</h3><p><a href=\"http://www.cmake.org\" target=\"_blank\" rel=\"external\">http://www.cmake.org</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for mac osx</div><div class=\"line\">$ brew install cmake</div><div class=\"line\">for centOS</div><div class=\"line\">$ sudo yum install cmake</div></pre></td></tr></table></figure>\n<h3 id=\"用cmake构建project\"><a href=\"#用cmake构建project\" class=\"headerlink\" title=\"用cmake构建project\"></a>用cmake构建project</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmake -G &quot;Unix Makefiles&quot;</div><div class=\"line\">cmake -G &quot;Visual Studio 10&quot;</div><div class=\"line\">cmake -G &quot;Xcode&quot;</div></pre></td></tr></table></figure>\n<p>在*nix系统，mac osx系统也建议使用 <code>cmake -G &quot;Unix Makefiles&quot;</code>，生成<code>Makefile</code>,之后<code>make &amp; make install</code><br>编译生成<code>flatc</code>并安装到系统。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cmake -G &quot;Unix Makefiles&quot;</div><div class=\"line\">$ make</div><div class=\"line\">$ make insall</div></pre></td></tr></table></figure>\n<h2 id=\"使用schema编译器flatc来生成基础代码\"><a href=\"#使用schema编译器flatc来生成基础代码\" class=\"headerlink\" title=\"使用schema编译器flatc来生成基础代码\"></a>使用schema编译器flatc来生成基础代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd samples</div><div class=\"line\">#在目录src中生成java代码</div><div class=\"line\">$flatc -j -o src monster.fbs</div></pre></td></tr></table></figure>\n<h3 id=\"编程语言参数\"><a href=\"#编程语言参数\" class=\"headerlink\" title=\"编程语言参数:\"></a>编程语言参数:</h3><ul>\n<li>–cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).</li>\n<li>–java, -j : Generate Java code.</li>\n<li>–csharp, -n : Generate C# code.</li>\n<li>–go, -g : Generate Go code.</li>\n<li>–python, -p: Generate Python code.</li>\n<li>–javascript, -s: Generate JavaScript code.</li>\n<li>–php: Generate PHP code.</li>\n</ul>\n<h3 id=\"其他常用选项：\"><a href=\"#其他常用选项：\" class=\"headerlink\" title=\"其他常用选项：\"></a>其他常用选项：</h3><ul>\n<li>-o PATH 指定源码输出目录</li>\n<li>-I PATH 有include语句时，指定include目录</li>\n</ul>\n<h1 id=\"完整的参数\"><a href=\"#完整的参数\" class=\"headerlink\" title=\"完整的参数\"></a>完整的参数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">usage: flatc [OPTION]... FILE... [-- FILE...]</div><div class=\"line\">  -b              Generate wire format binaries for any data definitions.</div><div class=\"line\">  -t              Generate text output for any data definitions.</div><div class=\"line\">  -c              Generate C++ headers for tables/structs.</div><div class=\"line\">  -g              Generate Go files for tables/structs.</div><div class=\"line\">  -j              Generate Java classes for tables/structs.</div><div class=\"line\">  -s              Generate JavaScript code for tables/structs.</div><div class=\"line\">  -n              Generate C# classes for tables/structs.</div><div class=\"line\">  -p              Generate Python files for tables/structs.</div><div class=\"line\">  -o PATH         Prefix PATH to all generated files.</div><div class=\"line\">  -I PATH         Search for includes in the specified path.</div><div class=\"line\">  -M              Print make rules for generated files.</div><div class=\"line\">  --strict-json   Strict JSON: field names must be / will be quoted,</div><div class=\"line\">                  no trailing commas in tables/vectors.</div><div class=\"line\">  --defaults-json Output fields whose value is the default when</div><div class=\"line\">                  writing JSON</div><div class=\"line\">  --no-prefix     Don&apos;t prefix enum values with the enum type in C++.</div><div class=\"line\">  --scoped-enums  Use C++11 style scoped and strongly typed enums.</div><div class=\"line\">                  also implies --no-prefix.</div><div class=\"line\">  --gen-includes  (deprecated), this is the default behavior.</div><div class=\"line\">                  If the original behavior is required (no include</div><div class=\"line\">                  statements) use --no-includes.</div><div class=\"line\">  --no-includes   Don&apos;t generate include statements for included</div><div class=\"line\">                  schemas the generated file depends on (C++).</div><div class=\"line\">  --gen-mutable   Generate accessors that can mutate buffers in-place.</div><div class=\"line\">  --gen-onefile   Generate single output file for C#</div><div class=\"line\">  --raw-binary    Allow binaries without file_indentifier to be read.</div><div class=\"line\">                  This may crash flatc given a mismatched schema.</div><div class=\"line\">  --proto         Input is a .proto, translate to .fbs.</div><div class=\"line\">  --schema        Serialize schemas instead of JSON (use with -b)</div><div class=\"line\">FILEs may depend on declarations in earlier files.</div><div class=\"line\">FILEs after the -- must be binary flatbuffer format files.</div><div class=\"line\">Output files are named using the base file name of the input,</div><div class=\"line\">and written to the current directory or the path given by -o.</div><div class=\"line\">example: flatc -c -b schema1.fbs schema2.fbs data.json</div></pre></td></tr></table></figure>\n<h2 id=\"写schema-IDL文件\"><a href=\"#写schema-IDL文件\" class=\"headerlink\" title=\"写schema IDL文件\"></a>写schema IDL文件</h2><p>参考：<a href=\"http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html</a></p>\n","excerpt":"","more":"<h1 id=\"FlatBuffers-使用指南\"><a href=\"#FlatBuffers-使用指南\" class=\"headerlink\" title=\"FlatBuffers 使用指南\"></a>FlatBuffers 使用指南</h1><p>FlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍</p>\n<h2 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/google/flatbuffers.git</div><div class=\"line\">#切换到最新release版本</div><div class=\"line\">$ git checkout v1.2.0</div></pre></td></tr></table></figure>\n<h3 id=\"安装cmake\"><a href=\"#安装cmake\" class=\"headerlink\" title=\"安装cmake\"></a>安装cmake</h3><p><a href=\"http://www.cmake.org\">http://www.cmake.org</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for mac osx</div><div class=\"line\">$ brew install cmake</div><div class=\"line\">for centOS</div><div class=\"line\">$ sudo yum install cmake</div></pre></td></tr></table></figure>\n<h3 id=\"用cmake构建project\"><a href=\"#用cmake构建project\" class=\"headerlink\" title=\"用cmake构建project\"></a>用cmake构建project</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmake -G &quot;Unix Makefiles&quot;</div><div class=\"line\">cmake -G &quot;Visual Studio 10&quot;</div><div class=\"line\">cmake -G &quot;Xcode&quot;</div></pre></td></tr></table></figure>\n<p>在*nix系统，mac osx系统也建议使用 <code>cmake -G &quot;Unix Makefiles&quot;</code>，生成<code>Makefile</code>,之后<code>make &amp; make install</code><br>编译生成<code>flatc</code>并安装到系统。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cmake -G &quot;Unix Makefiles&quot;</div><div class=\"line\">$ make</div><div class=\"line\">$ make insall</div></pre></td></tr></table></figure>\n<h2 id=\"使用schema编译器flatc来生成基础代码\"><a href=\"#使用schema编译器flatc来生成基础代码\" class=\"headerlink\" title=\"使用schema编译器flatc来生成基础代码\"></a>使用schema编译器flatc来生成基础代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd samples</div><div class=\"line\">#在目录src中生成java代码</div><div class=\"line\">$flatc -j -o src monster.fbs</div></pre></td></tr></table></figure>\n<h3 id=\"编程语言参数\"><a href=\"#编程语言参数\" class=\"headerlink\" title=\"编程语言参数:\"></a>编程语言参数:</h3><ul>\n<li>–cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).</li>\n<li>–java, -j : Generate Java code.</li>\n<li>–csharp, -n : Generate C# code.</li>\n<li>–go, -g : Generate Go code.</li>\n<li>–python, -p: Generate Python code.</li>\n<li>–javascript, -s: Generate JavaScript code.</li>\n<li>–php: Generate PHP code.</li>\n</ul>\n<h3 id=\"其他常用选项：\"><a href=\"#其他常用选项：\" class=\"headerlink\" title=\"其他常用选项：\"></a>其他常用选项：</h3><ul>\n<li>-o PATH 指定源码输出目录</li>\n<li>-I PATH 有include语句时，指定include目录</li>\n</ul>\n<h1 id=\"完整的参数\"><a href=\"#完整的参数\" class=\"headerlink\" title=\"完整的参数\"></a>完整的参数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">usage: flatc [OPTION]... FILE... [-- FILE...]</div><div class=\"line\">  -b              Generate wire format binaries for any data definitions.</div><div class=\"line\">  -t              Generate text output for any data definitions.</div><div class=\"line\">  -c              Generate C++ headers for tables/structs.</div><div class=\"line\">  -g              Generate Go files for tables/structs.</div><div class=\"line\">  -j              Generate Java classes for tables/structs.</div><div class=\"line\">  -s              Generate JavaScript code for tables/structs.</div><div class=\"line\">  -n              Generate C# classes for tables/structs.</div><div class=\"line\">  -p              Generate Python files for tables/structs.</div><div class=\"line\">  -o PATH         Prefix PATH to all generated files.</div><div class=\"line\">  -I PATH         Search for includes in the specified path.</div><div class=\"line\">  -M              Print make rules for generated files.</div><div class=\"line\">  --strict-json   Strict JSON: field names must be / will be quoted,</div><div class=\"line\">                  no trailing commas in tables/vectors.</div><div class=\"line\">  --defaults-json Output fields whose value is the default when</div><div class=\"line\">                  writing JSON</div><div class=\"line\">  --no-prefix     Don&apos;t prefix enum values with the enum type in C++.</div><div class=\"line\">  --scoped-enums  Use C++11 style scoped and strongly typed enums.</div><div class=\"line\">                  also implies --no-prefix.</div><div class=\"line\">  --gen-includes  (deprecated), this is the default behavior.</div><div class=\"line\">                  If the original behavior is required (no include</div><div class=\"line\">                  statements) use --no-includes.</div><div class=\"line\">  --no-includes   Don&apos;t generate include statements for included</div><div class=\"line\">                  schemas the generated file depends on (C++).</div><div class=\"line\">  --gen-mutable   Generate accessors that can mutate buffers in-place.</div><div class=\"line\">  --gen-onefile   Generate single output file for C#</div><div class=\"line\">  --raw-binary    Allow binaries without file_indentifier to be read.</div><div class=\"line\">                  This may crash flatc given a mismatched schema.</div><div class=\"line\">  --proto         Input is a .proto, translate to .fbs.</div><div class=\"line\">  --schema        Serialize schemas instead of JSON (use with -b)</div><div class=\"line\">FILEs may depend on declarations in earlier files.</div><div class=\"line\">FILEs after the -- must be binary flatbuffer format files.</div><div class=\"line\">Output files are named using the base file name of the input,</div><div class=\"line\">and written to the current directory or the path given by -o.</div><div class=\"line\">example: flatc -c -b schema1.fbs schema2.fbs data.json</div></pre></td></tr></table></figure>\n<h2 id=\"写schema-IDL文件\"><a href=\"#写schema-IDL文件\" class=\"headerlink\" title=\"写schema IDL文件\"></a>写schema IDL文件</h2><p>参考：<a href=\"http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\">http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html</a></p>\n"},{"title":"FlatBuffers简介","date":"2016-02-19T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG","_content":"\n## FlatBuffers简介\n\n代码：https://github.com/google/flatbuffers/\n\n文档：http://google.github.io/flatbuffers/\n\n\nFlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。\n\n\n\n### 支持的操作系统\n\n* Android\n* Windows\n* MacOS X\n* Linux\n\n\n### 目前支持的编程语言\n\n* C++\n* C#\n* Go\n* Java\n* JavaScript\n* PHP\n* Python\n\nand many more in progress...\n\n## 为什么要用FlatBuffers?\n\n+ **对序列化数据的访问不需要打包和拆包**——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；\n+ **内存效率和速度**——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；\n+ **扩展性、灵活性【多版本兼容】**——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；\n+ **最小代码依赖**——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；\n+ **强类型设计**——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；\n+ **使用简单**——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；\n+ **跨平台**——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；\n\n \n### 为什么不使用Protocol Buffers的，或者JSON\n\nProtocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。\n\nJSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。\n\n与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。http://google.github.io/flatbuffers/md__benchmarks.html\n\n\n\n \n ","source":"_posts/技术/FlatBuffers/FlatBuffers简介.md","raw":"---\ntitle: FlatBuffers简介\ndate: 2016-02-19 20:20:42\ncategories: \n\t- 技术\n\t- FlatBuffers\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG\ntags: \n\t- FlatBuffers\n\t- 序列化\n---\n\n## FlatBuffers简介\n\n代码：https://github.com/google/flatbuffers/\n\n文档：http://google.github.io/flatbuffers/\n\n\nFlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。\n\n\n\n### 支持的操作系统\n\n* Android\n* Windows\n* MacOS X\n* Linux\n\n\n### 目前支持的编程语言\n\n* C++\n* C#\n* Go\n* Java\n* JavaScript\n* PHP\n* Python\n\nand many more in progress...\n\n## 为什么要用FlatBuffers?\n\n+ **对序列化数据的访问不需要打包和拆包**——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；\n+ **内存效率和速度**——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；\n+ **扩展性、灵活性【多版本兼容】**——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；\n+ **最小代码依赖**——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；\n+ **强类型设计**——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；\n+ **使用简单**——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；\n+ **跨平台**——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；\n\n \n### 为什么不使用Protocol Buffers的，或者JSON\n\nProtocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。\n\nJSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。\n\n与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。http://google.github.io/flatbuffers/md__benchmarks.html\n\n\n\n \n ","slug":"技术/FlatBuffers/FlatBuffers简介","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4en080046c9infmqnq07p","content":"<h2 id=\"FlatBuffers简介\"><a href=\"#FlatBuffers简介\" class=\"headerlink\" title=\"FlatBuffers简介\"></a>FlatBuffers简介</h2><p>代码：<a href=\"https://github.com/google/flatbuffers/\" target=\"_blank\" rel=\"external\">https://github.com/google/flatbuffers/</a></p>\n<p>文档：<a href=\"http://google.github.io/flatbuffers/\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/</a></p>\n<p>FlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。</p>\n<h3 id=\"支持的操作系统\"><a href=\"#支持的操作系统\" class=\"headerlink\" title=\"支持的操作系统\"></a>支持的操作系统</h3><ul>\n<li>Android</li>\n<li>Windows</li>\n<li>MacOS X</li>\n<li>Linux</li>\n</ul>\n<h3 id=\"目前支持的编程语言\"><a href=\"#目前支持的编程语言\" class=\"headerlink\" title=\"目前支持的编程语言\"></a>目前支持的编程语言</h3><ul>\n<li>C++</li>\n<li>C#</li>\n<li>Go</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Python</li>\n</ul>\n<p>and many more in progress…</p>\n<h2 id=\"为什么要用FlatBuffers\"><a href=\"#为什么要用FlatBuffers\" class=\"headerlink\" title=\"为什么要用FlatBuffers?\"></a>为什么要用FlatBuffers?</h2><ul>\n<li><strong>对序列化数据的访问不需要打包和拆包</strong>——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；</li>\n<li><strong>内存效率和速度</strong>——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；</li>\n<li><strong>扩展性、灵活性【多版本兼容】</strong>——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；</li>\n<li><strong>最小代码依赖</strong>——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；</li>\n<li><strong>强类型设计</strong>——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；</li>\n<li><strong>使用简单</strong>——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；</li>\n<li><strong>跨平台</strong>——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；</li>\n</ul>\n<h3 id=\"为什么不使用Protocol-Buffers的，或者JSON\"><a href=\"#为什么不使用Protocol-Buffers的，或者JSON\" class=\"headerlink\" title=\"为什么不使用Protocol Buffers的，或者JSON\"></a>为什么不使用Protocol Buffers的，或者JSON</h3><p>Protocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。</p>\n<p>JSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。</p>\n<p>与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。<a href=\"http://google.github.io/flatbuffers/md__benchmarks.html\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/md__benchmarks.html</a></p>\n","excerpt":"","more":"<h2 id=\"FlatBuffers简介\"><a href=\"#FlatBuffers简介\" class=\"headerlink\" title=\"FlatBuffers简介\"></a>FlatBuffers简介</h2><p>代码：<a href=\"https://github.com/google/flatbuffers/\">https://github.com/google/flatbuffers/</a></p>\n<p>文档：<a href=\"http://google.github.io/flatbuffers/\">http://google.github.io/flatbuffers/</a></p>\n<p>FlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。</p>\n<h3 id=\"支持的操作系统\"><a href=\"#支持的操作系统\" class=\"headerlink\" title=\"支持的操作系统\"></a>支持的操作系统</h3><ul>\n<li>Android</li>\n<li>Windows</li>\n<li>MacOS X</li>\n<li>Linux</li>\n</ul>\n<h3 id=\"目前支持的编程语言\"><a href=\"#目前支持的编程语言\" class=\"headerlink\" title=\"目前支持的编程语言\"></a>目前支持的编程语言</h3><ul>\n<li>C++</li>\n<li>C#</li>\n<li>Go</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Python</li>\n</ul>\n<p>and many more in progress…</p>\n<h2 id=\"为什么要用FlatBuffers\"><a href=\"#为什么要用FlatBuffers\" class=\"headerlink\" title=\"为什么要用FlatBuffers?\"></a>为什么要用FlatBuffers?</h2><ul>\n<li><strong>对序列化数据的访问不需要打包和拆包</strong>——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；</li>\n<li><strong>内存效率和速度</strong>——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；</li>\n<li><strong>扩展性、灵活性【多版本兼容】</strong>——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；</li>\n<li><strong>最小代码依赖</strong>——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；</li>\n<li><strong>强类型设计</strong>——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；</li>\n<li><strong>使用简单</strong>——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；</li>\n<li><strong>跨平台</strong>——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；</li>\n</ul>\n<h3 id=\"为什么不使用Protocol-Buffers的，或者JSON\"><a href=\"#为什么不使用Protocol-Buffers的，或者JSON\" class=\"headerlink\" title=\"为什么不使用Protocol Buffers的，或者JSON\"></a>为什么不使用Protocol Buffers的，或者JSON</h3><p>Protocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。</p>\n<p>JSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。</p>\n<p>与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。<a href=\"http://google.github.io/flatbuffers/md__benchmarks.html\">http://google.github.io/flatbuffers/md__benchmarks.html</a></p>\n"},{"title":"Hexo命令速记","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-21T14:31:12.000Z","_content":"\n## 简写\n\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n```\n\n## 服务器\n\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\nhexo d -g #部署前先生成今天网页\n```\n\n## 监视文件变动\n\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n```\n## 完成后部署\n\n```\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n```\n\n## 模版\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n```\n\n变量 | 描述\n--- | ---\nlayout | 布局\ntitle\t| 标题\ndate\t| 文件建立日期\n\n\n\n```\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n常用指令\n---\n\n## 安装升级\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \n```\n\n## init\n\n``` bash\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n## new\n\n``` bash\n$ hexo new [layout] <title>\n$ hexo n [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](configuration.html) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n\n\n## generate\n\n``` bash\n$ hexo generate\n```\n\n生成静态文件。\n\n选项 | 描述\n--- | ---\n`-d`, `--deploy` | 文件生成后立即部署网站\n`-w`, `--watch` | 监视文件变动\n\n## publish\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n``` bash\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n选项 | 描述\n--- | ---\n`-p`, `--port` | 重设端口\n`-s`, `--static` | 只使用静态文件\n`-l`, `--log` | 启动日记记录，使用覆盖记录格式\n\n## deploy\n\n``` bash\n$ hexo deploy\n```\n\n部署网站。\n\n参数 | 描述\n--- | ---\n`-g`, `--generate` | 部署之前预先生成静态文件\n\n## render\n\n``` bash\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n参数 | 描述\n--- | ---\n`-o`, `--output` | 设置输出路径\n\n## migrate\n\n``` bash\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](migration.html)。\n\n## clean\n\n``` bash\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n## list\n\n``` bash\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n``` bash\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n``` bash\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n``` bash\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n``` bash\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n``` bash\n$ hexo --config custom.yml\n```\n\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n### 显示草稿\n\n``` bash\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n``` bash\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n\n\n\n","source":"_posts/技术/Hexo/Hexo命令速记.md","raw":"---\ntitle: Hexo命令速记\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG\ndate: 2016-02-21 22:31:12\ncategories: \n\t- 技术\n\t- Hexo\ntags:\n\t- Hexo\n---\n\n## 简写\n\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n```\n\n## 服务器\n\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\nhexo d -g #部署前先生成今天网页\n```\n\n## 监视文件变动\n\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n```\n## 完成后部署\n\n```\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n```\n\n## 模版\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n```\n\n变量 | 描述\n--- | ---\nlayout | 布局\ntitle\t| 标题\ndate\t| 文件建立日期\n\n\n\n```\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n常用指令\n---\n\n## 安装升级\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \n```\n\n## init\n\n``` bash\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n## new\n\n``` bash\n$ hexo new [layout] <title>\n$ hexo n [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](configuration.html) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n\n\n## generate\n\n``` bash\n$ hexo generate\n```\n\n生成静态文件。\n\n选项 | 描述\n--- | ---\n`-d`, `--deploy` | 文件生成后立即部署网站\n`-w`, `--watch` | 监视文件变动\n\n## publish\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n``` bash\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n选项 | 描述\n--- | ---\n`-p`, `--port` | 重设端口\n`-s`, `--static` | 只使用静态文件\n`-l`, `--log` | 启动日记记录，使用覆盖记录格式\n\n## deploy\n\n``` bash\n$ hexo deploy\n```\n\n部署网站。\n\n参数 | 描述\n--- | ---\n`-g`, `--generate` | 部署之前预先生成静态文件\n\n## render\n\n``` bash\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n参数 | 描述\n--- | ---\n`-o`, `--output` | 设置输出路径\n\n## migrate\n\n``` bash\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](migration.html)。\n\n## clean\n\n``` bash\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n## list\n\n``` bash\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n``` bash\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n``` bash\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n``` bash\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n``` bash\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n``` bash\n$ hexo --config custom.yml\n```\n\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n### 显示草稿\n\n``` bash\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n``` bash\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n\n\n\n","slug":"技术/Hexo/Hexo命令速记","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4en0a0048c9inotghoe81","content":"<h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</div><div class=\"line\">hexo p == hexo publish</div><div class=\"line\">hexo g == hexo generate#生成</div><div class=\"line\">hexo s == hexo server #启动服务预览</div><div class=\"line\">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</div><div class=\"line\">hexo server -s #静态模式</div><div class=\"line\">hexo server -p 5000 #更改端口</div><div class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</div><div class=\"line\"></div><div class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</div><div class=\"line\">hexo g #生成静态网页</div><div class=\"line\">hexo d #开始部署</div><div class=\"line\">hexo d -g #部署前先生成今天网页</div></pre></td></tr></table></figure>\n<h2 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate #使用 Hexo 生成静态文件快速而且简单</div><div class=\"line\">hexo generate --watch #监视文件变动</div></pre></td></tr></table></figure>\n<h2 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">两个命令的作用是相同的</div><div class=\"line\">hexo generate --deploy</div><div class=\"line\">hexo deploy --generate</div><div class=\"line\">hexo deploy -g</div><div class=\"line\">hexo server -g</div></pre></td></tr></table></figure>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;postName&quot; #新建文章</div><div class=\"line\">hexo new page &quot;pageName&quot; #新建页面</div><div class=\"line\">hexo generate #生成静态页面至public目录</div><div class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">hexo deploy #将.deploy目录部署到GitHub</div><div class=\"line\"></div><div class=\"line\">hexo new [layout] &lt;title&gt;</div><div class=\"line\">hexo new photo &quot;My Gallery&quot;</div><div class=\"line\">hexo new &quot;Hello World&quot; --lang tw</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: post</div><div class=\"line\">date: 2014-03-03 19:07:43</div><div class=\"line\">comments: true</div><div class=\"line\">categories: Blog</div><div class=\"line\">tags: [Hexo]</div><div class=\"line\">keywords: Hexo, Blog</div><div class=\"line\">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</div></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h2 id=\"安装升级\"><a href=\"#安装升级\" class=\"headerlink\" title=\"安装升级\"></a>安装升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo -g #安装  </div><div class=\"line\">npm update hexo -g #升级</div></pre></td></tr></table></figure>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init [folder]</div></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div><div class=\"line\">$ hexo n [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"configuration.html\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo migrate &lt;<span class=\"built_in\">type</span>&gt;</div></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"migration.html\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</div></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo version</div></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --safe</div></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --debug</div></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"external\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --silent</div></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --config custom.yml</div></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --draft</div></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --cwd /path/to/cwd</div></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","excerpt":"","more":"<h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</div><div class=\"line\">hexo p == hexo publish</div><div class=\"line\">hexo g == hexo generate#生成</div><div class=\"line\">hexo s == hexo server #启动服务预览</div><div class=\"line\">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</div><div class=\"line\">hexo server -s #静态模式</div><div class=\"line\">hexo server -p 5000 #更改端口</div><div class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</div><div class=\"line\"></div><div class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</div><div class=\"line\">hexo g #生成静态网页</div><div class=\"line\">hexo d #开始部署</div><div class=\"line\">hexo d -g #部署前先生成今天网页</div></pre></td></tr></table></figure>\n<h2 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate #使用 Hexo 生成静态文件快速而且简单</div><div class=\"line\">hexo generate --watch #监视文件变动</div></pre></td></tr></table></figure>\n<h2 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">两个命令的作用是相同的</div><div class=\"line\">hexo generate --deploy</div><div class=\"line\">hexo deploy --generate</div><div class=\"line\">hexo deploy -g</div><div class=\"line\">hexo server -g</div></pre></td></tr></table></figure>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;postName&quot; #新建文章</div><div class=\"line\">hexo new page &quot;pageName&quot; #新建页面</div><div class=\"line\">hexo generate #生成静态页面至public目录</div><div class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">hexo deploy #将.deploy目录部署到GitHub</div><div class=\"line\"></div><div class=\"line\">hexo new [layout] &lt;title&gt;</div><div class=\"line\">hexo new photo &quot;My Gallery&quot;</div><div class=\"line\">hexo new &quot;Hello World&quot; --lang tw</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: post</div><div class=\"line\">date: 2014-03-03 19:07:43</div><div class=\"line\">comments: true</div><div class=\"line\">categories: Blog</div><div class=\"line\">tags: [Hexo]</div><div class=\"line\">keywords: Hexo, Blog</div><div class=\"line\">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</div></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h2 id=\"安装升级\"><a href=\"#安装升级\" class=\"headerlink\" title=\"安装升级\"></a>安装升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo -g #安装  </div><div class=\"line\">npm update hexo -g #升级</div></pre></td></tr></table></figure>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init [folder]</div></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div><div class=\"line\">$ hexo n [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"configuration.html\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo migrate &lt;<span class=\"built_in\">type</span>&gt;</div></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"migration.html\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</div></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo version</div></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --safe</div></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --debug</div></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --silent</div></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --config custom.yml</div></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --draft</div></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --cwd /path/to/cwd</div></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n"},{"title":"领域模型的价值","date":"2016-02-21T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG","_content":"\n\n## 价值\n\n+ 提供什么服务：\n\t+ 什么来体现服务：运行方式，运行过程和业务逻辑\n+ 提供的质量：如何服务，要做的事情\n\n## 传统数据库为中心\n\n业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。\n以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。\n\n## OO|面向对象\n\n表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中\n逻辑直接存在于对象上﹐这与现实情况是吻合的。\n\n领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。\n\n在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。\n\n## 领域模型的特点\n\n1. 领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；\n　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；\n　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；\n　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；\n　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；\n　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；\n　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；\n　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。","source":"_posts/技术/领域模型/领域模型的价值.md","raw":"---\ntitle: 领域模型的价值\ndate: 2016-02-21 20:20:42\ncategories: \n\t- 技术\n\t- 领域模型\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG\ntags: \n\t- 领域模型\n\t- DDD\n---\n\n\n## 价值\n\n+ 提供什么服务：\n\t+ 什么来体现服务：运行方式，运行过程和业务逻辑\n+ 提供的质量：如何服务，要做的事情\n\n## 传统数据库为中心\n\n业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。\n以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。\n\n## OO|面向对象\n\n表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中\n逻辑直接存在于对象上﹐这与现实情况是吻合的。\n\n领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。\n\n在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。\n\n## 领域模型的特点\n\n1. 领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；\n　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；\n　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；\n　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；\n　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；\n　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；\n　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；\n　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。","slug":"技术/领域模型/领域模型的价值","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4en0d004ac9inxims24zo","content":"<h2 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h2><ul>\n<li>提供什么服务：<ul>\n<li>什么来体现服务：运行方式，运行过程和业务逻辑</li>\n</ul>\n</li>\n<li>提供的质量：如何服务，要做的事情</li>\n</ul>\n<h2 id=\"传统数据库为中心\"><a href=\"#传统数据库为中心\" class=\"headerlink\" title=\"传统数据库为中心\"></a>传统数据库为中心</h2><p>业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。<br>以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。</p>\n<h2 id=\"OO-面向对象\"><a href=\"#OO-面向对象\" class=\"headerlink\" title=\"OO|面向对象\"></a>OO|面向对象</h2><p>表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中<br>逻辑直接存在于对象上﹐这与现实情况是吻合的。</p>\n<p>领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。</p>\n<p>在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。</p>\n<h2 id=\"领域模型的特点\"><a href=\"#领域模型的特点\" class=\"headerlink\" title=\"领域模型的特点\"></a>领域模型的特点</h2><ol>\n<li>领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；<br>　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；<br>　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；<br>　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；<br>　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；<br>　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；<br>　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；<br>　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h2><ul>\n<li>提供什么服务：<ul>\n<li>什么来体现服务：运行方式，运行过程和业务逻辑</li>\n</ul>\n</li>\n<li>提供的质量：如何服务，要做的事情</li>\n</ul>\n<h2 id=\"传统数据库为中心\"><a href=\"#传统数据库为中心\" class=\"headerlink\" title=\"传统数据库为中心\"></a>传统数据库为中心</h2><p>业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。<br>以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。</p>\n<h2 id=\"OO-面向对象\"><a href=\"#OO-面向对象\" class=\"headerlink\" title=\"OO|面向对象\"></a>OO|面向对象</h2><p>表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中<br>逻辑直接存在于对象上﹐这与现实情况是吻合的。</p>\n<p>领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。</p>\n<p>在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。</p>\n<h2 id=\"领域模型的特点\"><a href=\"#领域模型的特点\" class=\"headerlink\" title=\"领域模型的特点\"></a>领域模型的特点</h2><ol>\n<li>领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；<br>　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；<br>　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；<br>　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；<br>　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；<br>　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；<br>　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；<br>　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。</li>\n</ol>\n"},{"title":"装载：HTTP2.0的奇妙日常","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-22T01:57:03.000Z","keywords":"HTTP2,HTTP2性能","description":"HTTP2.0性能增强的核心：二进制分帧；HTTP2.0 首部压缩；所有的HTTP2.0的请求都在一个TCP链接上；并行双向字节流的请求和响应；HTTP2.0的请求优先级；HTTP2.0的服务器推送；“十年前端，终归如初”","_content":"\n \n转载自AlloyTeam：http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\n\n\n“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。\n    “我给你一个表情，你自己体会一下”![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg>)\n    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。\n但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。\n \n \n## HTTP2.0性能增强的核心：二进制分帧\n\nHTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。\n    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。\n    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。\n    \nhttp2.0\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg>)\n\n\n然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。\n \n  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。\n   \n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg>)\n    \n  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）\n    \n## HTTP2.0 首部压缩\n\n HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。\n    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。\n \n  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解\n  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也\n  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。\n\n   晨伯起来又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ \n \n\n## 所有的HTTP2.0的请求都在一个TCP链接上\n\n   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\n    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。\n\n   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：\n   \n   1. 可以减少服务链接压力,内存占用少了,连接吞吐量大了\n   2. 由于 TCP 连接减少而使网络拥塞状况得以改观;\n   3. 慢启动时间减少,拥塞和丢包恢复速度更快。\n \n**也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。**\n \n他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。\n“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。\n“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来\n当时我就有预感要![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，而晨伯总是按套路出牌….\n \n## 并行双向字节流的请求和响应\n\n   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg>)\n\n \n把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:\n \n可以并行交错地发送请求,请求之间互不影响;\n可以并行交错地发送响应,响应之间互不干扰;\n只使用一个连接即可并行发送多个请求和响应;\n消除不必要的延迟,从而减少页面加载的时间;\n \n那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。\n \n \n“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。\n晨伯又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)。我开始确信，这是多年后程序员的肢体礼仪方式。\n \n## HTTP2.0的请求优先级\n\n   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。\n \n“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。\n“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。\n  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。\n内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。\n \n \nHTTP2.0的服务器推送\n    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。\n当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。\n   \n   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。\n \n \n   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。\n \n到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png>)\n\n在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。\n这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。\n出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..\n \n \n \n \n \n \n参考：\nhttp://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\nhttps://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/","source":"_posts/转载/http2.0/装载：HTTP2-0的奇妙日常.md","raw":"---\ntitle: 装载：HTTP2.0的奇妙日常\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG'\ndate: 2016-02-22 09:57:03\ncategories:\n\t- 转载\n\t- http 2.0\ntags:\n\t- http 2.0\nkeywords: HTTP2,HTTP2性能\ndescription: HTTP2.0性能增强的核心：二进制分帧；HTTP2.0 首部压缩；所有的HTTP2.0的请求都在一个TCP链接上；并行双向字节流的请求和响应；HTTP2.0的请求优先级；HTTP2.0的服务器推送；“十年前端，终归如初”\n---\n\n \n转载自AlloyTeam：http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\n\n\n“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。\n    “我给你一个表情，你自己体会一下”![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg>)\n    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。\n但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。\n \n \n## HTTP2.0性能增强的核心：二进制分帧\n\nHTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。\n    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。\n    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。\n    \nhttp2.0\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg>)\n\n\n然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。\n \n  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。\n   \n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg>)\n    \n  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）\n    \n## HTTP2.0 首部压缩\n\n HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。\n    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。\n \n  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解\n  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也\n  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。\n\n   晨伯起来又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ \n \n\n## 所有的HTTP2.0的请求都在一个TCP链接上\n\n   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\n    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。\n\n   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：\n   \n   1. 可以减少服务链接压力,内存占用少了,连接吞吐量大了\n   2. 由于 TCP 连接减少而使网络拥塞状况得以改观;\n   3. 慢启动时间减少,拥塞和丢包恢复速度更快。\n \n**也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。**\n \n他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。\n“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。\n“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来\n当时我就有预感要![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，而晨伯总是按套路出牌….\n \n## 并行双向字节流的请求和响应\n\n   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg>)\n\n \n把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:\n \n可以并行交错地发送请求,请求之间互不影响;\n可以并行交错地发送响应,响应之间互不干扰;\n只使用一个连接即可并行发送多个请求和响应;\n消除不必要的延迟,从而减少页面加载的时间;\n \n那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。\n \n \n“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。\n晨伯又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)。我开始确信，这是多年后程序员的肢体礼仪方式。\n \n## HTTP2.0的请求优先级\n\n   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。\n \n“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。\n“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。\n  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。\n内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。\n \n \nHTTP2.0的服务器推送\n    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。\n当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。\n   \n   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。\n \n \n   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。\n \n到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png>)\n\n在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。\n这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。\n出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..\n \n \n \n \n \n \n参考：\nhttp://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\nhttps://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/","slug":"转载/http2.0/装载：HTTP2-0的奇妙日常","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4en0e004bc9ino4pgjpfx","content":"<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/</a></p>\n<p>“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。<br>    “我给你一个表情，你自己体会一下”<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg\" alt=\"\"><br>    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。<br>但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。</p>\n<h2 id=\"HTTP2-0性能增强的核心：二进制分帧\"><a href=\"#HTTP2-0性能增强的核心：二进制分帧\" class=\"headerlink\" title=\"HTTP2.0性能增强的核心：二进制分帧\"></a>HTTP2.0性能增强的核心：二进制分帧</h2><p>HTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。<br>    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。<br>    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。</p>\n<p>http2.0</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg\" alt=\"\"></p>\n<p>然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。</p>\n<p>  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg\" alt=\"\"></p>\n<p>  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。<br><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）</p>\n<h2 id=\"HTTP2-0-首部压缩\"><a href=\"#HTTP2-0-首部压缩\" class=\"headerlink\" title=\"HTTP2.0 首部压缩\"></a>HTTP2.0 首部压缩</h2><p> HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。<br>    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。</p>\n<p>  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解<br>  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也<br>  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。</p>\n<p>   晨伯起来又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ </p>\n<h2 id=\"所有的HTTP2-0的请求都在一个TCP链接上\"><a href=\"#所有的HTTP2-0的请求都在一个TCP链接上\" class=\"headerlink\" title=\"所有的HTTP2.0的请求都在一个TCP链接上\"></a>所有的HTTP2.0的请求都在一个TCP链接上</h2><p>   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面<a href=\"http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\" target=\"_blank\" rel=\"external\">http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！</a><br>    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。</p>\n<p>   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：</p>\n<ol>\n<li>可以减少服务链接压力,内存占用少了,连接吞吐量大了</li>\n<li>由于 TCP 连接减少而使网络拥塞状况得以改观;</li>\n<li>慢启动时间减少,拥塞和丢包恢复速度更快。</li>\n</ol>\n<p><strong>也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。</strong></p>\n<p>他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。<br>“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。<br>“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来<br>当时我就有预感要<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，而晨伯总是按套路出牌….</p>\n<h2 id=\"并行双向字节流的请求和响应\"><a href=\"#并行双向字节流的请求和响应\" class=\"headerlink\" title=\"并行双向字节流的请求和响应\"></a>并行双向字节流的请求和响应</h2><p>   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg\" alt=\"\"></p>\n<p>把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:</p>\n<p>可以并行交错地发送请求,请求之间互不影响;<br>可以并行交错地发送响应,响应之间互不干扰;<br>只使用一个连接即可并行发送多个请求和响应;<br>消除不必要的延迟,从而减少页面加载的时间;</p>\n<p>那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。</p>\n<p>“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。<br>晨伯又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">。我开始确信，这是多年后程序员的肢体礼仪方式。</p>\n<h2 id=\"HTTP2-0的请求优先级\"><a href=\"#HTTP2-0的请求优先级\" class=\"headerlink\" title=\"HTTP2.0的请求优先级\"></a>HTTP2.0的请求优先级</h2><p>   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。</p>\n<p>“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。<br>“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。<br>  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。<br>内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。</p>\n<p>HTTP2.0的服务器推送<br>    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。<br>当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。</p>\n<p>   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。</p>\n<p>   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。</p>\n<p>到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png\" alt=\"\"></p>\n<p>在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。<br>这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。<br>出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..</p>\n<p>参考：<br><a href=\"http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\" target=\"_blank\" rel=\"external\">http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data</a><br><a href=\"https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/\" target=\"_blank\" rel=\"external\">https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/</a></p>\n","excerpt":"","more":"<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\">http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/</a></p>\n<p>“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。<br>    “我给你一个表情，你自己体会一下”<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg\" alt=\"\"><br>    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。<br>但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。</p>\n<h2 id=\"HTTP2-0性能增强的核心：二进制分帧\"><a href=\"#HTTP2-0性能增强的核心：二进制分帧\" class=\"headerlink\" title=\"HTTP2.0性能增强的核心：二进制分帧\"></a>HTTP2.0性能增强的核心：二进制分帧</h2><p>HTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。<br>    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。<br>    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。</p>\n<p>http2.0</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg\" alt=\"\"></p>\n<p>然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。</p>\n<p>  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg\" alt=\"\"></p>\n<p>  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。<br><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）</p>\n<h2 id=\"HTTP2-0-首部压缩\"><a href=\"#HTTP2-0-首部压缩\" class=\"headerlink\" title=\"HTTP2.0 首部压缩\"></a>HTTP2.0 首部压缩</h2><p> HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。<br>    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。</p>\n<p>  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解<br>  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也<br>  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。</p>\n<p>   晨伯起来又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ </p>\n<h2 id=\"所有的HTTP2-0的请求都在一个TCP链接上\"><a href=\"#所有的HTTP2-0的请求都在一个TCP链接上\" class=\"headerlink\" title=\"所有的HTTP2.0的请求都在一个TCP链接上\"></a>所有的HTTP2.0的请求都在一个TCP链接上</h2><p>   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面<a href=\"http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\">http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！</a><br>    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。</p>\n<p>   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：</p>\n<ol>\n<li>可以减少服务链接压力,内存占用少了,连接吞吐量大了</li>\n<li>由于 TCP 连接减少而使网络拥塞状况得以改观;</li>\n<li>慢启动时间减少,拥塞和丢包恢复速度更快。</li>\n</ol>\n<p><strong>也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。</strong></p>\n<p>他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。<br>“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。<br>“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来<br>当时我就有预感要<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，而晨伯总是按套路出牌….</p>\n<h2 id=\"并行双向字节流的请求和响应\"><a href=\"#并行双向字节流的请求和响应\" class=\"headerlink\" title=\"并行双向字节流的请求和响应\"></a>并行双向字节流的请求和响应</h2><p>   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg\" alt=\"\"></p>\n<p>把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:</p>\n<p>可以并行交错地发送请求,请求之间互不影响;<br>可以并行交错地发送响应,响应之间互不干扰;<br>只使用一个连接即可并行发送多个请求和响应;<br>消除不必要的延迟,从而减少页面加载的时间;</p>\n<p>那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。</p>\n<p>“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。<br>晨伯又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">。我开始确信，这是多年后程序员的肢体礼仪方式。</p>\n<h2 id=\"HTTP2-0的请求优先级\"><a href=\"#HTTP2-0的请求优先级\" class=\"headerlink\" title=\"HTTP2.0的请求优先级\"></a>HTTP2.0的请求优先级</h2><p>   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。</p>\n<p>“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。<br>“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。<br>  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。<br>内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。</p>\n<p>HTTP2.0的服务器推送<br>    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。<br>当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。</p>\n<p>   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。</p>\n<p>   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。</p>\n<p>到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png\" alt=\"\"></p>\n<p>在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。<br>这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。<br>出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..</p>\n<p>参考：<br><a href=\"http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\">http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data</a><br><a href=\"https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/\">https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/</a></p>\n"},{"title":"wrk基准测试工具安装使用","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60608-195617.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30","date":"2016-03-04T01:06:33.000Z","keywords":"基准测试,wrk","description":null,"_content":"\n\n\n\n## git\n\nhttps://github.com/wg/wrk\n\ngit clone https://github.com/wg/wrk.git\n\n## 安装\n\n在makefile中33行\nLDIR     = deps/luajit/src\nLIBS    := -lluajit $(LIBS)\nCFLAGS  += -I$(LDIR)\nLDFLAGS += -L$(LDIR)\n\n下面添加：\n\nLDFLAGS  +=  -L/usr/local/opt/openssl/lib\nCFLAGS += -I/usr/local/opt/openssl/include\n\n\nmake\n\n## 基本使用\n\nBasic Usage\n\n  wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 12 threads, and keeping\n  400 HTTP connections open.\n\n  Output:\n\n```\n  Running 30s test @ http://127.0.0.1:8080/index.html\n    12 threads and 400 connections\n    Thread Stats   Avg      Stdev     Max   +/- Stdev\n      Latency   635.91us    0.89ms  12.92ms   93.69%\n      Req/Sec    56.20k     8.07k   62.00k    86.54%\n    22464657 requests in 30.00s, 17.76GB read\n  Requests/sec: 748868.53\n  Transfer/sec:    606.33MB\n```\n\n## 参数说明\n\n```\n$ wrk\nUsage: wrk <options> <url>                            \n  Options:                                            \n    -c, --connections <N>  Connections to keep open   \n    -d, --duration    <T>  Duration of test           \n    -t, --threads     <N>  Number of threads to use   \n                                                      \n    -s, --script      <S>  Load Lua script file       \n    -H, --header      <H>  Add header to request      \n        --latency          Print latency statistics   \n        --timeout     <T>  Socket/request timeout     \n    -v, --version          Print version details      \n                                                      \n  Numeric arguments may include a SI unit (1k, 1M, 1G)\n  Time arguments may include a time unit (2s, 2m, 2h)\n  \n```\n\n\n","source":"_posts/技术/工具/wrk基准测试工具安装使用.md","raw":"---\ntitle: wrk基准测试工具安装使用\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60608-195617.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30'\ndate: 2016-03-04 09:06:33\ncategories:\n\t- 技术\n\t- 工具\ntags:\n\t- 基准测试\n\t- wrk\nkeywords: 基准测试,wrk\ndescription:\n---\n\n\n\n\n## git\n\nhttps://github.com/wg/wrk\n\ngit clone https://github.com/wg/wrk.git\n\n## 安装\n\n在makefile中33行\nLDIR     = deps/luajit/src\nLIBS    := -lluajit $(LIBS)\nCFLAGS  += -I$(LDIR)\nLDFLAGS += -L$(LDIR)\n\n下面添加：\n\nLDFLAGS  +=  -L/usr/local/opt/openssl/lib\nCFLAGS += -I/usr/local/opt/openssl/include\n\n\nmake\n\n## 基本使用\n\nBasic Usage\n\n  wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 12 threads, and keeping\n  400 HTTP connections open.\n\n  Output:\n\n```\n  Running 30s test @ http://127.0.0.1:8080/index.html\n    12 threads and 400 connections\n    Thread Stats   Avg      Stdev     Max   +/- Stdev\n      Latency   635.91us    0.89ms  12.92ms   93.69%\n      Req/Sec    56.20k     8.07k   62.00k    86.54%\n    22464657 requests in 30.00s, 17.76GB read\n  Requests/sec: 748868.53\n  Transfer/sec:    606.33MB\n```\n\n## 参数说明\n\n```\n$ wrk\nUsage: wrk <options> <url>                            \n  Options:                                            \n    -c, --connections <N>  Connections to keep open   \n    -d, --duration    <T>  Duration of test           \n    -t, --threads     <N>  Number of threads to use   \n                                                      \n    -s, --script      <S>  Load Lua script file       \n    -H, --header      <H>  Add header to request      \n        --latency          Print latency statistics   \n        --timeout     <T>  Socket/request timeout     \n    -v, --version          Print version details      \n                                                      \n  Numeric arguments may include a SI unit (1k, 1M, 1G)\n  Time arguments may include a time unit (2s, 2m, 2h)\n  \n```\n\n\n","slug":"技术/工具/wrk基准测试工具安装使用","published":1,"updated":"2016-11-09T02:57:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civw4en0j004ec9inlwm3yr6y","content":"<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p><a href=\"https://github.com/wg/wrk\" target=\"_blank\" rel=\"external\">https://github.com/wg/wrk</a></p>\n<p>git clone <a href=\"https://github.com/wg/wrk.git\" target=\"_blank\" rel=\"external\">https://github.com/wg/wrk.git</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在makefile中33行<br>LDIR     = deps/luajit/src<br>LIBS    := -lluajit $(LIBS)<br>CFLAGS  += -I$(LDIR)<br>LDFLAGS += -L$(LDIR)</p>\n<p>下面添加：</p>\n<p>LDFLAGS  +=  -L/usr/local/opt/openssl/lib<br>CFLAGS += -I/usr/local/opt/openssl/include</p>\n<p>make</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>Basic Usage</p>\n<p>  wrk -t12 -c400 -d30s <a href=\"http://127.0.0.1:8080/index.html\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/index.html</a></p>\n<p>  This runs a benchmark for 30 seconds, using 12 threads, and keeping<br>  400 HTTP connections open.</p>\n<p>  Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Running 30s test @ http://127.0.0.1:8080/index.html</div><div class=\"line\">  12 threads and 400 connections</div><div class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</div><div class=\"line\">    Latency   635.91us    0.89ms  12.92ms   93.69%</div><div class=\"line\">    Req/Sec    56.20k     8.07k   62.00k    86.54%</div><div class=\"line\">  22464657 requests in 30.00s, 17.76GB read</div><div class=\"line\">Requests/sec: 748868.53</div><div class=\"line\">Transfer/sec:    606.33MB</div></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wrk</div><div class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;                            </div><div class=\"line\">  Options:                                            </div><div class=\"line\">    -c, --connections &lt;N&gt;  Connections to keep open   </div><div class=\"line\">    -d, --duration    &lt;T&gt;  Duration of test           </div><div class=\"line\">    -t, --threads     &lt;N&gt;  Number of threads to use   </div><div class=\"line\">                                                      </div><div class=\"line\">    -s, --script      &lt;S&gt;  Load Lua script file       </div><div class=\"line\">    -H, --header      &lt;H&gt;  Add header to request      </div><div class=\"line\">        --latency          Print latency statistics   </div><div class=\"line\">        --timeout     &lt;T&gt;  Socket/request timeout     </div><div class=\"line\">    -v, --version          Print version details      </div><div class=\"line\">                                                      </div><div class=\"line\">  Numeric arguments may include a SI unit (1k, 1M, 1G)</div><div class=\"line\">  Time arguments may include a time unit (2s, 2m, 2h)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p><a href=\"https://github.com/wg/wrk\">https://github.com/wg/wrk</a></p>\n<p>git clone <a href=\"https://github.com/wg/wrk.git\">https://github.com/wg/wrk.git</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在makefile中33行<br>LDIR     = deps/luajit/src<br>LIBS    := -lluajit $(LIBS)<br>CFLAGS  += -I$(LDIR)<br>LDFLAGS += -L$(LDIR)</p>\n<p>下面添加：</p>\n<p>LDFLAGS  +=  -L/usr/local/opt/openssl/lib<br>CFLAGS += -I/usr/local/opt/openssl/include</p>\n<p>make</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>Basic Usage</p>\n<p>  wrk -t12 -c400 -d30s <a href=\"http://127.0.0.1:8080/index.html\">http://127.0.0.1:8080/index.html</a></p>\n<p>  This runs a benchmark for 30 seconds, using 12 threads, and keeping<br>  400 HTTP connections open.</p>\n<p>  Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Running 30s test @ http://127.0.0.1:8080/index.html</div><div class=\"line\">  12 threads and 400 connections</div><div class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</div><div class=\"line\">    Latency   635.91us    0.89ms  12.92ms   93.69%</div><div class=\"line\">    Req/Sec    56.20k     8.07k   62.00k    86.54%</div><div class=\"line\">  22464657 requests in 30.00s, 17.76GB read</div><div class=\"line\">Requests/sec: 748868.53</div><div class=\"line\">Transfer/sec:    606.33MB</div></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wrk</div><div class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;                            </div><div class=\"line\">  Options:                                            </div><div class=\"line\">    -c, --connections &lt;N&gt;  Connections to keep open   </div><div class=\"line\">    -d, --duration    &lt;T&gt;  Duration of test           </div><div class=\"line\">    -t, --threads     &lt;N&gt;  Number of threads to use   </div><div class=\"line\">                                                      </div><div class=\"line\">    -s, --script      &lt;S&gt;  Load Lua script file       </div><div class=\"line\">    -H, --header      &lt;H&gt;  Add header to request      </div><div class=\"line\">        --latency          Print latency statistics   </div><div class=\"line\">        --timeout     &lt;T&gt;  Socket/request timeout     </div><div class=\"line\">    -v, --version          Print version details      </div><div class=\"line\">                                                      </div><div class=\"line\">  Numeric arguments may include a SI unit (1k, 1M, 1G)</div><div class=\"line\">  Time arguments may include a time unit (2s, 2m, 2h)</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"civw4emka0001c9in335wsvcd","category_id":"civw4emkk0003c9inlebttp10","_id":"civw4emkv0007c9inlwaty0z6"},{"post_id":"civw4emvp000tc9inp9jlehnz","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emw00010c9in04rinpqv"},{"post_id":"civw4emuy000fc9in0noqfija","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emw30014c9intu54s1ts"},{"post_id":"civw4emvv000vc9in4lzl5bsn","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emw80016c9ing55ejs0h"},{"post_id":"civw4emvy000yc9inpin3zk3u","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emwe0019c9int2c989xc"},{"post_id":"civw4emuo000ac9inki5mzjuf","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4emwh001cc9inouuujeep"},{"post_id":"civw4emuo000ac9inki5mzjuf","category_id":"civw4emvw000wc9inemul0j8l","_id":"civw4emwj001ec9ind469gxw0"},{"post_id":"civw4emw00011c9indopdn0ee","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emwk001gc9inzciplm6j"},{"post_id":"civw4emv3000gc9innm90zn84","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4emwl001jc9inf2aomw1l"},{"post_id":"civw4emv3000gc9innm90zn84","category_id":"civw4emvw000wc9inemul0j8l","_id":"civw4emwl001mc9in86z7l69g"},{"post_id":"civw4emv8000jc9infu0mozlx","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emwm001pc9ind5dvboiq"},{"post_id":"civw4emuq000bc9inhw9iz3df","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4emwn001sc9inubjq2pfs"},{"post_id":"civw4emuq000bc9inhw9iz3df","category_id":"civw4emvw000wc9inemul0j8l","_id":"civw4emwo001vc9invbfj5agb"},{"post_id":"civw4emva000kc9inj3i0wnjw","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emwq001xc9in7rwx4c9y"},{"post_id":"civw4emvh000nc9inpl9irw55","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emwr001zc9inmpfr8ufv"},{"post_id":"civw4emus000ec9in93r8pqlp","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4emws0021c9inysgge8j7"},{"post_id":"civw4emus000ec9in93r8pqlp","category_id":"civw4emvw000wc9inemul0j8l","_id":"civw4emws0023c9indwxh8d7n"},{"post_id":"civw4emvl000pc9inzjvr275f","category_id":"civw4emvm000qc9inp53c3ht6","_id":"civw4emwt0025c9in0x1u0pqb"},{"post_id":"civw4emw40015c9inpoilr8tv","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4emwu0028c9in9yc30dvm"},{"post_id":"civw4emw40015c9inpoilr8tv","category_id":"civw4emws0022c9inpqqtsxvf","_id":"civw4emww002bc9intemdkd3u"},{"post_id":"civw4emw80017c9inpoyb2znf","category_id":"civw4emwt0026c9inxl46qx24","_id":"civw4emwx002ec9inww819f92"},{"post_id":"civw4emwf001bc9incjbhbz60","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4emwx002jc9ine102zv6x"},{"post_id":"civw4emwf001bc9incjbhbz60","category_id":"civw4emwv002ac9in1yaregil","_id":"civw4emwy002kc9incqqxd9gj"},{"post_id":"civw4en070045c9in3hh11sle","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4en0m004fc9inibvpbuxd"},{"post_id":"civw4en070045c9in3hh11sle","category_id":"civw4en0b0049c9inpk4791l1","_id":"civw4en0n004ic9inxcgl7g1e"},{"post_id":"civw4en080046c9infmqnq07p","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4en0n004kc9in01q30dk6"},{"post_id":"civw4en080046c9infmqnq07p","category_id":"civw4en0b0049c9inpk4791l1","_id":"civw4en0o004oc9ina16dz247"},{"post_id":"civw4en0a0048c9inotghoe81","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4en0o004pc9inqbce49j4"},{"post_id":"civw4en0a0048c9inotghoe81","category_id":"civw4en0m004gc9inkcesd89j","_id":"civw4en0p004tc9intdfu3rmn"},{"post_id":"civw4en0d004ac9inxims24zo","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4en0p004vc9inov2odo1b"},{"post_id":"civw4en0d004ac9inxims24zo","category_id":"civw4en0o004nc9in6jz517sw","_id":"civw4en0q004zc9in7qgflko9"},{"post_id":"civw4en0j004ec9inlwm3yr6y","category_id":"civw4emus000cc9inlirx1lmv","_id":"civw4en0r0052c9inj5tb9ryh"},{"post_id":"civw4en0j004ec9inlwm3yr6y","category_id":"civw4en0q004xc9in2tnk48k3","_id":"civw4en0s0055c9inmomz3ncj"},{"post_id":"civw4en0e004bc9ino4pgjpfx","category_id":"civw4en0p004rc9inak6b0hrr","_id":"civw4en0s0057c9inwlf0c3pq"},{"post_id":"civw4en0e004bc9ino4pgjpfx","category_id":"civw4en0r0051c9inqccll2hc","_id":"civw4en0s005ac9in3gz93p50"}],"PostTag":[{"post_id":"civw4emka0001c9in335wsvcd","tag_id":"civw4emkn0004c9inh0cag8du","_id":"civw4emkx0008c9ine3ohjqg8"},{"post_id":"civw4emka0001c9in335wsvcd","tag_id":"civw4emkp0006c9incfoe1shk","_id":"civw4emky0009c9in571dpwv2"},{"post_id":"civw4emuo000ac9inki5mzjuf","tag_id":"civw4emus000dc9inp2yfwend","_id":"civw4emvk000oc9inrqusik56"},{"post_id":"civw4emuo000ac9inki5mzjuf","tag_id":"civw4emv5000ic9in9xgsfuob","_id":"civw4emvn000rc9ingcptccme"},{"post_id":"civw4emuq000bc9inhw9iz3df","tag_id":"civw4emus000dc9inp2yfwend","_id":"civw4emvt000uc9inm5mgtid2"},{"post_id":"civw4emus000ec9in93r8pqlp","tag_id":"civw4emus000dc9inp2yfwend","_id":"civw4emvz000zc9inie3l4ywp"},{"post_id":"civw4emuy000fc9in0noqfija","tag_id":"civw4emvx000xc9inq5p68abf","_id":"civw4emwk001hc9in8c5ieyjo"},{"post_id":"civw4emuy000fc9in0noqfija","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emwl001kc9inzbwado42"},{"post_id":"civw4emuy000fc9in0noqfija","tag_id":"civw4emwe001ac9ingbe3fpy6","_id":"civw4emwl001nc9inmmezrwt8"},{"post_id":"civw4emv3000gc9innm90zn84","tag_id":"civw4emus000dc9inp2yfwend","_id":"civw4emwm001qc9inrqll9x1z"},{"post_id":"civw4emv3000gc9innm90zn84","tag_id":"civw4emv5000ic9in9xgsfuob","_id":"civw4emwn001tc9in0h1mgfr3"},{"post_id":"civw4emv8000jc9infu0mozlx","tag_id":"civw4emwl001lc9inckfi8wcw","_id":"civw4emwv0029c9inewsjzh52"},{"post_id":"civw4emv8000jc9infu0mozlx","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emww002cc9in5mfe0g83"},{"post_id":"civw4emv8000jc9infu0mozlx","tag_id":"civw4emwp001wc9inizupxsbg","_id":"civw4emwx002fc9inf6i6fsgj"},{"post_id":"civw4emv8000jc9infu0mozlx","tag_id":"civw4emws0020c9inybvbshpc","_id":"civw4emwx002gc9in7hrs6xeh"},{"post_id":"civw4emv8000jc9infu0mozlx","tag_id":"civw4emwt0024c9in79bxh8v1","_id":"civw4emwx002ic9in8qyw6toc"},{"post_id":"civw4emva000kc9inj3i0wnjw","tag_id":"civw4emwl001lc9inckfi8wcw","_id":"civw4emx1002nc9inoe1oiez3"},{"post_id":"civw4emva000kc9inj3i0wnjw","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emx1002oc9injm2tmhy4"},{"post_id":"civw4emva000kc9inj3i0wnjw","tag_id":"civw4emwp001wc9inizupxsbg","_id":"civw4emx1002qc9inxczqmfrv"},{"post_id":"civw4emva000kc9inj3i0wnjw","tag_id":"civw4emwy002lc9inxjothmtp","_id":"civw4emx1002rc9in57cf3s6e"},{"post_id":"civw4emvh000nc9inpl9irw55","tag_id":"civw4emwl001lc9inckfi8wcw","_id":"civw4emx3002wc9inp5lugaup"},{"post_id":"civw4emvh000nc9inpl9irw55","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emx3002xc9inprd2fnye"},{"post_id":"civw4emvh000nc9inpl9irw55","tag_id":"civw4emwp001wc9inizupxsbg","_id":"civw4emx4002zc9ina25war6q"},{"post_id":"civw4emvh000nc9inpl9irw55","tag_id":"civw4emx2002tc9infst70ed8","_id":"civw4emx60030c9inkyr0k1qi"},{"post_id":"civw4emvh000nc9inpl9irw55","tag_id":"civw4emx2002uc9in4lni8dc7","_id":"civw4emx80032c9inlvqki4pm"},{"post_id":"civw4emvl000pc9inzjvr275f","tag_id":"civw4emwl001lc9inckfi8wcw","_id":"civw4emxa0035c9in6a2rsp9f"},{"post_id":"civw4emvl000pc9inzjvr275f","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emxa0036c9invllmtsdx"},{"post_id":"civw4emvl000pc9inzjvr275f","tag_id":"civw4emwp001wc9inizupxsbg","_id":"civw4emxb0038c9inwzuckdmf"},{"post_id":"civw4emvl000pc9inzjvr275f","tag_id":"civw4emx90033c9ind5w7a6oh","_id":"civw4emxb0039c9inj3or3hiv"},{"post_id":"civw4emvp000tc9inp9jlehnz","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emxc003bc9inbwora28r"},{"post_id":"civw4emvv000vc9in4lzl5bsn","tag_id":"civw4emwl001lc9inckfi8wcw","_id":"civw4emxd003ec9inkmmh1tzc"},{"post_id":"civw4emvv000vc9in4lzl5bsn","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emxd003fc9insctxovy2"},{"post_id":"civw4emvv000vc9in4lzl5bsn","tag_id":"civw4emwp001wc9inizupxsbg","_id":"civw4emxd003hc9inhaqic0o7"},{"post_id":"civw4emvy000yc9inpin3zk3u","tag_id":"civw4emwl001lc9inckfi8wcw","_id":"civw4emxf003kc9ino4fvgrlh"},{"post_id":"civw4emvy000yc9inpin3zk3u","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emxf003lc9inb5erlcvr"},{"post_id":"civw4emvy000yc9inpin3zk3u","tag_id":"civw4emwp001wc9inizupxsbg","_id":"civw4emxg003nc9invugqcv8j"},{"post_id":"civw4emw00011c9indopdn0ee","tag_id":"civw4emwl001lc9inckfi8wcw","_id":"civw4emxi003qc9in55vme6yn"},{"post_id":"civw4emw00011c9indopdn0ee","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emxi003rc9inath2ueux"},{"post_id":"civw4emw00011c9indopdn0ee","tag_id":"civw4emwp001wc9inizupxsbg","_id":"civw4emxi003tc9incwkaoytx"},{"post_id":"civw4emw40015c9inpoilr8tv","tag_id":"civw4emxh003pc9in0t5vb7bs","_id":"civw4emxk003xc9in55xbi90y"},{"post_id":"civw4emw40015c9inpoilr8tv","tag_id":"civw4emxi003sc9inyf8oo7tm","_id":"civw4emxk003yc9in2zv4mh5q"},{"post_id":"civw4emw40015c9inpoilr8tv","tag_id":"civw4emxj003uc9in7j9bleov","_id":"civw4emxk0040c9inucadrsze"},{"post_id":"civw4emw40015c9inpoilr8tv","tag_id":"civw4emxj003vc9inrw046spx","_id":"civw4emxk0041c9iny9h575uc"},{"post_id":"civw4emwf001bc9incjbhbz60","tag_id":"civw4emxj003wc9inwjfhn7o8","_id":"civw4emxk0042c9inim6481s0"},{"post_id":"civw4emwf001bc9incjbhbz60","tag_id":"civw4emxk003zc9inrtrylmf2","_id":"civw4emxk0043c9inu4949nmy"},{"post_id":"civw4emwf001bc9incjbhbz60","tag_id":"civw4emw30013c9in523mqg49","_id":"civw4emxk0044c9in7gysy263"},{"post_id":"civw4en070045c9in3hh11sle","tag_id":"civw4en0a0047c9ineyow9gin","_id":"civw4en0n004jc9ine6uc7up5"},{"post_id":"civw4en070045c9in3hh11sle","tag_id":"civw4en0g004cc9in4neyqm1f","_id":"civw4en0n004lc9in88g57fcz"},{"post_id":"civw4en080046c9infmqnq07p","tag_id":"civw4en0a0047c9ineyow9gin","_id":"civw4en0p004sc9inyc5eucx2"},{"post_id":"civw4en080046c9infmqnq07p","tag_id":"civw4en0g004cc9in4neyqm1f","_id":"civw4en0p004uc9inmifja5bc"},{"post_id":"civw4en0a0048c9inotghoe81","tag_id":"civw4en0o004qc9iny942gimh","_id":"civw4en0q004yc9ina274wzdc"},{"post_id":"civw4en0d004ac9inxims24zo","tag_id":"civw4en0p004wc9in1xinkt4i","_id":"civw4en0s0054c9inddt9vbf0"},{"post_id":"civw4en0d004ac9inxims24zo","tag_id":"civw4en0r0050c9invg03eq2k","_id":"civw4en0s0056c9inxni4hiwv"},{"post_id":"civw4en0e004bc9ino4pgjpfx","tag_id":"civw4en0r0053c9ini84w6xw3","_id":"civw4en0s0059c9inmkb5dhft"},{"post_id":"civw4en0j004ec9inlwm3yr6y","tag_id":"civw4en0s0058c9inzx6el9ht","_id":"civw4en0t005cc9inlcod7chz"},{"post_id":"civw4en0j004ec9inlwm3yr6y","tag_id":"civw4en0s005bc9inn7mxps0t","_id":"civw4en0t005dc9infeaqugde"}],"Tag":[{"name":"春天","_id":"civw4emkn0004c9inh0cag8du"},{"name":"梅花","_id":"civw4emkp0006c9incfoe1shk"},{"name":"hystrix","_id":"civw4emus000dc9inp2yfwend"},{"name":"Circuit Breaker","_id":"civw4emv5000ic9in9xgsfuob"},{"name":"Feign","_id":"civw4emvx000xc9inq5p68abf"},{"name":"微服务","_id":"civw4emw30013c9in523mqg49"},{"name":"Spring Cloud","_id":"civw4emwe001ac9ingbe3fpy6"},{"name":"spring-cloud","_id":"civw4emwl001lc9inckfi8wcw"},{"name":"Spring Boot","_id":"civw4emwp001wc9inizupxsbg"},{"name":"API Gateway","_id":"civw4emws0020c9inybvbshpc"},{"name":"网关","_id":"civw4emwt0024c9in79bxh8v1"},{"name":"分布式事务","_id":"civw4emwy002lc9inxjothmtp"},{"name":"Eureka","_id":"civw4emx2002tc9infst70ed8"},{"name":"服务发现","_id":"civw4emx2002uc9in4lni8dc7"},{"name":"分布式配置管理","_id":"civw4emx90033c9ind5w7a6oh"},{"name":"负载均衡","_id":"civw4emxh003pc9in0t5vb7bs"},{"name":"加权轮询","_id":"civw4emxi003sc9inyf8oo7tm"},{"name":"轮询","_id":"civw4emxj003uc9in7j9bleov"},{"name":"算法","_id":"civw4emxj003vc9inrw046spx"},{"name":"单一职责","_id":"civw4emxj003wc9inwjfhn7o8"},{"name":"软件开发","_id":"civw4emxk003zc9inrtrylmf2"},{"name":"FlatBuffers","_id":"civw4en0a0047c9ineyow9gin"},{"name":"序列化","_id":"civw4en0g004cc9in4neyqm1f"},{"name":"Hexo","_id":"civw4en0o004qc9iny942gimh"},{"name":"领域模型","_id":"civw4en0p004wc9in1xinkt4i"},{"name":"DDD","_id":"civw4en0r0050c9invg03eq2k"},{"name":"http 2.0","_id":"civw4en0r0053c9ini84w6xw3"},{"name":"基准测试","_id":"civw4en0s0058c9inzx6el9ht"},{"name":"wrk","_id":"civw4en0s005bc9inn7mxps0t"}]}}