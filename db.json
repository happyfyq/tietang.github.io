{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hueman/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/images/185638fo3y9el8ie2ohese.jpg","path":"images/185638fo3y9el8ie2ohese.jpg","modified":0,"renderable":0},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/blank.gif","path":"vendor/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading.gif","path":"vendor/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading@2x.gif","path":"vendor/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_overlay.png","path":"vendor/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite.png","path":"vendor/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.css","path":"vendor/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite@2x.png","path":"vendor/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/styles.css","path":"vendor/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.pack.js","path":"vendor/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/main.js","path":"vendor/scrollLoading/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.js","path":"vendor/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/jquery.scrollLoading.js","path":"vendor/scrollLoading/jquery.scrollLoading.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/style.css","path":"vendor/scrollLoading/style.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/fancybox_buttons.png","path":"vendor/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-media.js","path":"vendor/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader.gif","path":"vendor/scrollLoading/images/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader@2x.gif","path":"vendor/scrollLoading/images/preloader@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/jquery/2.0.3/jquery.min.js","path":"vendor/jquery/2.0.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0}],"Cache":[{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1455845553000},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1455845553000},{"_id":"source/.DS_Store","hash":"396783dab22d52e515ec5eeeb0c2e37bbfe13c96","modified":1464855824000},{"_id":"themes/hueman/README.md","hash":"19244590bc775eba6566007a436b06d7ace8e42b","modified":1455845553000},{"_id":"themes/hueman/_config.yml","hash":"815b83fa77ba193570899f8c759f8221ebe3be4e","modified":1455933406000},{"_id":"themes/hueman/package.json","hash":"13dcc13c13e0347515f7f92292ac0e1a824413cd","modified":1455845553000},{"_id":"themes/hueman/_config.yml.example","hash":"8e07118ad9a76d8e778373bbe963be9e99476249","modified":1455845553000},{"_id":"source/_posts/.DS_Store","hash":"fd5b5cd1ee4aaaa39e164b3e1ab58e1c2686aceb","modified":1464856070000},{"_id":"source/_posts/春天花会开.md","hash":"ef48ea849017084cde1c927b67a625edcfac1f8b","modified":1455889188000},{"_id":"source/about/index.md","hash":"75cbc514dd78b7419574eefa17b1a3d7b1766760","modified":1455872322000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1456110557000},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"db4ec5d979e663d7fa239be332ef634b6bbd1a2b","modified":1455845553000},{"_id":"themes/hueman/.git/COMMIT_EDITMSG","hash":"4669b0e7ad2c1be1287229311836c0f306696ba8","modified":1455933663000},{"_id":"themes/hueman/.git/FETCH_HEAD","hash":"baf9fdc04cde8fc0ab5fd0cd388b02fab622a7d6","modified":1455845849000},{"_id":"themes/hueman/.git/HEAD","hash":"63aa444c83e593b82c6c520d7017d1650250554a","modified":1455869955000},{"_id":"themes/hueman/.git/config","hash":"e1edb40c9185c45aaf038ac93a73733bcb556c48","modified":1455845553000},{"_id":"themes/hueman/.git/ORIG_HEAD","hash":"fa20e3e7e862c0d48266949a09842e39bbe635e6","modified":1455845849000},{"_id":"themes/hueman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1455845526000},{"_id":"themes/hueman/.git/index","hash":"a8dcc058d30c14f580912aa0b196f331d180b41d","modified":1455933663000},{"_id":"themes/hueman/.git/packed-refs","hash":"4d842d0f5ea4e8594bb6d5c12fe4736c88d6e4c2","modified":1455845553000},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1455845553000},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1455845553000},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1455845553000},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1455845553000},{"_id":"themes/hueman/layout/layout.ejs","hash":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1455845553000},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1455845553000},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1455845553000},{"_id":"themes/hueman/languages/es.yml","hash":"475ee0c8bc6935d94ef7081ab044cab85e4c75f8","modified":1455871957000},{"_id":"themes/hueman/languages/en.yml","hash":"7cdf2693e05bf7bc70030453bbd7e679e4fc6264","modified":1455871957000},{"_id":"themes/hueman/languages/fr.yml","hash":"85bbe883d8929f0282fb2e851e88bf92dd6fade7","modified":1455871957000},{"_id":"themes/hueman/languages/id.yml","hash":"96e63f0e9c37203991d6695320a514c96088d3d8","modified":1455871957000},{"_id":"themes/hueman/languages/ru.yml","hash":"a795dffebd9a74bc0692058a172d9327cd6bdfba","modified":1455871957000},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"1ee9843e3f9b6767c3a48a9343234e81e0b632f9","modified":1455871957000},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"22b19f1ca04c28e81f2406061050f5b8c9ad854b","modified":1455872054000},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1455845553000},{"_id":"themes/hueman/source/favicon.ico","hash":"a5c41d966e5eef597a50b91f0b6a9bdf8ac80583","modified":1455933380000},{"_id":"themes/hueman/scripts/fancybox.js","hash":"c1b01a9c2d96474cdd7e09657e522e4a03579413","modified":1455845553000},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1455845553000},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"8bd30b7e9294c11f0364dd1e840684aa961b736f","modified":1455845553000},{"_id":"source/_posts/hystrix/Hystrix简介.md","hash":"123c8b30be57d733d4c5b6e49d2483cf6929cc84","modified":1458564360000},{"_id":"source/_posts/hystrix/Hystrix参数详解.md","hash":"f0a79b618f97690cf20bfb4719d570baa236d276","modified":1458564347000},{"_id":"source/_posts/hystrix/.DS_Store","hash":"4e97aa2877552169910b00818393c8adea09de93","modified":1457529417000},{"_id":"source/_posts/hystrix/Hystrix是怎样工作的.md.todo","hash":"e73b5c93871b17e3ece23e6322974ed24af5391a","modified":1458564505000},{"_id":"source/_posts/hystrix/Hystrix降级模式总结.md","hash":"8c183d912b173d88dc5ac423f311a36cac7e3dc5","modified":1458564366000},{"_id":"source/_posts/hystrix/怎样使用Hystrix.md","hash":"ef9297f3d8bc5c7082aff82e2355a1cc906a5aae","modified":1458181320000},{"_id":"source/_posts/微服务/微服务之微.md","hash":"dee176fe8ffda35467536a8caeeffaad0aadd76a","modified":1464919322000},{"_id":"source/_posts/music/Matthew-Lien-Bleeding-Wolves.md","hash":"176287eb31802776c2d1202d8148d0c2ee944e13","modified":1457525700000},{"_id":"source/_posts/技术/.DS_Store","hash":"163e2cdb43c712b000fd114c0754ee5356517d39","modified":1457053791000},{"_id":"source/_posts/转载/.DS_Store","hash":"10a5f5e23ea5263475686bb72ec99254d8d3997d","modified":1456111275000},{"_id":"themes/hueman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1455845526000},{"_id":"source/images/185638fo3y9el8ie2ohese.jpg","hash":"4d278765113277adc24d16fda2004d179911d5bc","modified":1443687700000},{"_id":"themes/hueman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1455845526000},{"_id":"themes/hueman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1455845526000},{"_id":"themes/hueman/.git/logs/HEAD","hash":"0c33bc1722db301307556617df84927d9ca2be4d","modified":1455933663000},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1455845553000},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"13d2b93435398dc29a968f93326fbd18d4b28d8c","modified":1455845553000},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1455845553000},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"d45635e78a3fc40e424a401e983f2c8eef6ebcfd","modified":1455845553000},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1455845553000},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1455845553000},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1455845553000},{"_id":"themes/hueman/layout/common/article.ejs","hash":"c30804f0b167053f731ad2a3429ddac603b1ac48","modified":1455845553000},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"43288ebc0ea30d80e6d7df56f2e7ed5d7935ed1a","modified":1455845553000},{"_id":"themes/hueman/layout/common/head.ejs","hash":"4934318fea3ef94f0aef73f32ae3538351599be3","modified":1455932920000},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"8e4f5a1b69a29cf0a896376d99c464743cddda7b","modified":1455862108000},{"_id":"themes/hueman/layout/common/header.ejs","hash":"02d75ac6b559de2414a2927988a133d6007dc243","modified":1455889250000},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1455845553000},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"a49ffb76c1897e5a60cee70e65c765d212dce500","modified":1455845553000},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"745666ee78b714aa34d8774a005a0598261ec349","modified":1455845553000},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"3ee280d4847f2cde7d450e298f917b10b9c5d507","modified":1455845553000},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1455845553000},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1455845553000},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"45f11b8bc3c1ddbe907cf5b8b36488e6c0ee15b3","modified":1455845553000},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1455845553000},{"_id":"themes/hueman/layout/search/index.ejs","hash":"8057338370fbda31dc9f21ec99fb91fcbab9d5c7","modified":1455845553000},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1455845553000},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1455845553000},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1455845553000},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1455845553000},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1455845553000},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1455845553000},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1455845553000},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1455845553000},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1455845553000},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1455845553000},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1455845553000},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1455845553000},{"_id":"themes/hueman/source/js/main.js","hash":"5027fe5ba72a88d5f16a7feba312574ad50556b5","modified":1455845553000},{"_id":"themes/hueman/source/css/_extend.styl","hash":"2860d503b68ae81ea7675c82c6e63873e0c9e761","modified":1455845553000},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1455845553000},{"_id":"themes/hueman/source/css/_variables.styl","hash":"8799b5e8a3d706a344c6819a274cb9022628c6c4","modified":1455845553000},{"_id":"themes/hueman/source/css/style.styl","hash":"de67ea150743e1f93e10a533711da8995dd0a5c3","modified":1455863813000},{"_id":"themes/hueman/source/css/_retina.styl","hash":"6849940ab43a9bdd83db1fde8e1e7ba6897f9016","modified":1455845553000},{"_id":"source/_posts/hystrix/images/.DS_Store","hash":"d3ed620ce95c9987592040ac15a4fd1e2ed1bdf0","modified":1457526565000},{"_id":"source/_posts/hystrix/images/circuit-identity-jitter-640.png","hash":"135da3a23c10948de618849d6494b0dfc433f2c6","modified":1453268970000},{"_id":"source/_posts/hystrix/images/circuit-identity-jitter.png","hash":"821d85ffcd3d26c7a887e1e44134c679314efe8e","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-direct-vs-turbine-640.png","hash":"276a9423acbda0686cd8b5a145d50bf8970fca77","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-example-open-circuit-640.png","hash":"fd81fc8bcd35391f9121907ce45efcdcda3a385d","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-640.png","hash":"c0d6c9bf527dde8fa08355e05b38b8b95f8c0f6b","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-original.png","hash":"3e32d8498d66d1dab0d8b4fcb9f5637536bba2b2","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-via-command-640.png","hash":"b126e4a3c058c320fc7d5bbcabef89650e3af2bc","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-single-row-640.png","hash":"27f4fb06ec60fdb17245c209be28b229155939ab","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-640.png","hash":"bf8298330f1dab68b6be738af506ced4d471f208","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-small.png","hash":"56efa7fcc51b9e83f4349411926d31fd699a0a5b","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-tiny.png","hash":"91a5f1685da6faa6339257f58757af739c70df9c","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tiny.png","hash":"230ea59eacd045eef9bb24a8276c2090bd6e49b3","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo.png","hash":"d1f1e2250adab47330eea7b7bbc8827dce70635b","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-return-flow-640.png","hash":"38897b0a0f3c0f233db9f064767436196fe2ef6d","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-return-flow.png","hash":"2c5d2ec83b730f679092013e8085a1032673adeb","modified":1453268970000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-without-640.png","hash":"3115e27c225110d3020606793c97e1e4fe7d2775","modified":1453268970000},{"_id":"source/_posts/hystrix/images/primary-secondary-example-640.png","hash":"6ba522ed88c63b18c7fbbdcc669aaa4c12233a02","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-640.png","hash":"25febf95dd29b3e29356e9079b3caf1175a3e5ce","modified":1453268971000},{"_id":"source/_posts/hystrix/images/rolling-stats-640.png","hash":"e981ebefb95332bf421c4e3460f1aae610559ece","modified":1453268971000},{"_id":"source/_posts/技术/FlatBuffers/FlatBuffers简介.md","hash":"26ff079b5809dd67ba1cb07f8fffa16820a51bbd","modified":1455890891000},{"_id":"source/_posts/技术/FlatBuffers/FlatBuffers使用指南.md","hash":"1e449739cb72cf1721461a9707d27f5c424c1c6b","modified":1455889337000},{"_id":"source/_posts/hystrix/images/transitive-commands.png","hash":"b8cd5957414b9740676c562dd935c335bec5b1b5","modified":1453268971000},{"_id":"source/_posts/hystrix/images/transitive-commands-640.png","hash":"4b9a9f10096913db1a6b825cd747c4b94997e0b4","modified":1453268971000},{"_id":"source/_posts/技术/工具/wrk基准测试工具安装使用.md","hash":"e1be514dbb796d2eabe48c74bf5eaf0ef0e0f56f","modified":1457053884000},{"_id":"source/_posts/技术/领域模型/领域模型的价值.md","hash":"559ff74a1c99e776f64cae80e823057b11b77d39","modified":1456070226000},{"_id":"source/_posts/技术/领域模型/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1457053796000},{"_id":"source/_posts/技术/Hexo/Hexo命令速记.md","hash":"707bed15c3564ad9e18528e0e6eb5a60f3af5029","modified":1456068226000},{"_id":"source/_posts/转载/http2.0/装载：HTTP2-0的奇妙日常.md","hash":"9b597fa6a433bdf287bbae9c50679bda3dd270b7","modified":1456190912000},{"_id":"themes/hueman/.git/objects/24/62853892108047d8169ac4896338e35b1d9028","hash":"40da7e009d1cb960b13bb4bd7e0e05d260b815b9","modified":1455891082000},{"_id":"themes/hueman/.git/objects/28/6114e3ddff291e2c0a2e1ce94bb266b7f1e42e","hash":"4a8aa703136a0a4a94cea4a52ae26442aec0b788","modified":1455891082000},{"_id":"themes/hueman/.git/objects/00/ea7ced8ffd028e39718565bcb6dbcd95030983","hash":"6c321fcb3d5ca65cd7812fc850fbd218582b960c","modified":1455933663000},{"_id":"themes/hueman/.git/objects/37/622cb11f6e867bd801c4f343e65a8fb15a996b","hash":"3a52b720b219cb04542f3d42a7be69971bc52801","modified":1455891082000},{"_id":"themes/hueman/.git/objects/42/754cc924c140e1d2334cb0f15d3e5f907b3528","hash":"b2ffeccff10e1a2413407051f7f53053a5deb53d","modified":1455891082000},{"_id":"themes/hueman/.git/objects/42/766e8223148450a423a316f6d8fe610183d6ac","hash":"dbdc536feff6a0742aab8f1547ccf8f10c650c0b","modified":1455891082000},{"_id":"themes/hueman/.git/objects/3f/6985167d605150935c4d64739aad8463b09d55","hash":"ae911d77c73c71e1a7c1bfa35f760a8223680227","modified":1455933663000},{"_id":"themes/hueman/.git/objects/5f/2341c8635688d09a4eb81fa43ddaf93e18aced","hash":"10acdb29aa5b811ff798d44f207a6e5dc23b6142","modified":1455868563000},{"_id":"themes/hueman/.git/objects/46/6b674faf5c339b69a5a92c67af927a61f0a60c","hash":"5ca5c1eded742304b130c1be7f40f97090fe3333","modified":1455933663000},{"_id":"themes/hueman/.git/objects/59/76a6ae788eb5bddf533daa50ba07a4295d65a8","hash":"b4e35f2f59265b6f4a720d046031fee4b1766cb8","modified":1455868563000},{"_id":"themes/hueman/.git/objects/44/03ce175ac09a0dd215f6a2a7edf281fc2b5bc9","hash":"ca4f1521a39d4c496edbc53a519af93b17f92733","modified":1455933663000},{"_id":"themes/hueman/.git/objects/71/457eac34aa084e4a7a9c2628c6a5b648864621","hash":"20435e736dee7905803a519ea50d7228c8fa92dc","modified":1455933663000},{"_id":"themes/hueman/.git/objects/89/5c37b48a797023a9a460ceaf62974137dcd89a","hash":"9334eefe151c864705859ea42ae01df16d292a48","modified":1455868563000},{"_id":"themes/hueman/.git/objects/8e/3f1a845dad43288b1579dcc0a0c1d7e32ad647","hash":"404a627fe6aed11433168485f215fa4c8cb264b8","modified":1455868563000},{"_id":"themes/hueman/.git/objects/80/90aaae3b11a12ef36df9e9aec5bb7296f224dd","hash":"e66e043caedfbfec6575f0f93dfedcde18bc5e6b","modified":1455891082000},{"_id":"themes/hueman/.git/objects/95/16647f60a349c0bf3d478f9ee0ed9ba296be07","hash":"6abb229a814c36f261442bd37b4dba91937007f0","modified":1455891082000},{"_id":"themes/hueman/.git/objects/49/ac89fdf9a5a94903a6199fe0e424e9d756c4a4","hash":"7e4ca3d7a9faa5d8d468dcc0e601579668dbbd59","modified":1455933663000},{"_id":"themes/hueman/.git/objects/98/56e4d0dc4f9d8a3f7fd817b6abc59ac660bd95","hash":"8603f9b0f6c2a39751ae2f1ba84c90604a55ea93","modified":1455933663000},{"_id":"themes/hueman/.git/objects/97/01c3818d9df1639962c0a8418febbd81777b68","hash":"44b87bd6b79c4f94e96f174c578280d0c1475885","modified":1455933663000},{"_id":"themes/hueman/.git/objects/09/1b738262e595a6d93b24d852ddaca2b884157f","hash":"1297efb752ce0473d8ab5d9b068bf7aeb4c63ee6","modified":1455868563000},{"_id":"themes/hueman/.git/objects/9c/a7f9f2e2a0012c5bd88562610383d3f2d8851e","hash":"9fa5de1dddfb58959eb2ea5fbb06eabef6184022","modified":1455891082000},{"_id":"themes/hueman/.git/objects/a3/c16361204bf0192427497720e6461f66f788a8","hash":"da49129809c5759c2078347e4f487047053fc6d4","modified":1455933663000},{"_id":"themes/hueman/.git/objects/9d/e9c6f878358462e6656b8043521d1905f363b5","hash":"0cc60f1e99b9ca0bca74fe1ba67667b5291eafa3","modified":1455868563000},{"_id":"themes/hueman/.git/objects/a6/6a02ddc2fbf26708b7e4476fcc29f33f8f1c5e","hash":"ce1756f388709fd35e88b06409f0936c076da11e","modified":1455891082000},{"_id":"themes/hueman/.git/objects/aa/658b7480e1e572a5077d00190757914012648d","hash":"76054d1fb58c7ea3f64efe67baba4981dbcf8666","modified":1455891082000},{"_id":"themes/hueman/.git/objects/ae/e0416277d57ebf1622f366f9fbefb1076240c9","hash":"a7af6162958ce305be9b50760a564144fc1332fe","modified":1455868563000},{"_id":"themes/hueman/.git/objects/b3/e21708088d53a34dcd9f36984393bfdd1577fe","hash":"27479cb13126d625c6f8e0cfb20876fdfa1eb5da","modified":1455891082000},{"_id":"themes/hueman/.git/objects/af/066201af6037164a8b750b94f04316a2341f3b","hash":"b6bf1992138b0afb188a14c807a44f1da078df68","modified":1455933663000},{"_id":"themes/hueman/.git/objects/cf/b85bf3eb402c26219f01960097c8cddca57540","hash":"e8c76e43b84d826a152b395120343175fabd1e93","modified":1455891082000},{"_id":"themes/hueman/.git/objects/de/5af1831fb43c839d08c193224be1bb9b9d221c","hash":"1da3b498b69294f6bd447e95d168b2374c4b0246","modified":1455868563000},{"_id":"themes/hueman/.git/objects/f3/b4cc5fdd6e5d730b656a10242d7f24906cc3e0","hash":"e9cbe01921dc3a4cd4b52c78613d3d74901ee145","modified":1455891082000},{"_id":"themes/hueman/.git/objects/pack/pack-f4fb5b25f0ca9450ac36f4e3193757f049b09475.idx","hash":"f27dc1d08a719e2c23cce5e776608afe8aea3dae","modified":1455845553000},{"_id":"themes/hueman/.git/refs/heads/master","hash":"5b2b8086583e919cdce585b34a7867a85be4d414","modified":1455868563000},{"_id":"themes/hueman/.git/refs/heads/_post","hash":"7ca729efe0bedc4627fc361ae6a3b21b2f0ea7d8","modified":1455933663000},{"_id":"themes/hueman/layout/common/post/category.ejs","hash":"f47522c059d3b4d721ce501203c05f94a285c0b5","modified":1455845553000},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"2d090d33cbd23129d63a0ba768a03d717399d9c5","modified":1455845553000},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"a364204d7152adf6c7522b6568990437e8308d1f","modified":1455845553000},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1455845553000},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1455845553000},{"_id":"source/_posts/hystrix/images/circuit-breaker-640.png","hash":"6dee7062440ac53277ef97e0bd8000e4c19b90d9","modified":1453268970000},{"_id":"source/_posts/hystrix/images/collapser-640.png","hash":"c27ac262add50eff2d2ff300b15d21b253929304","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-annoted-circuit-640.png","hash":"948e548cfef1deb9129b8ea82afef27b4cf94cc2","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-direct-vs-turbine.png","hash":"11d22278b6ce5c8f5d0dec564dde0c3a827a8571","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-via-command-1280.png","hash":"a9b7e695a88ec66e5dba042d4ed824084ad6c260","modified":1453268970000},{"_id":"source/_posts/hystrix/images/collapser-flow-640.png","hash":"28aa4117d38673c44dd0ec4a83b3869f07de1d4c","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-command-flow-chart-640.png","hash":"111a6f17a4fc132dff069c60b797548d971cc0ea","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-via-command-original.png","hash":"f179625e7510541b61cec9b8c326ed6ec1c79dea","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-command-flow-chart.png","hash":"530633edb85557bbb6a6f31b384bf7f2f95daa3a","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-620.png","hash":"d837ef2bd778ec1eb56513ee4e699fecca41e7e8","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-single-row.png","hash":"ad2f050bc1aebab2c9e66881d648e92b1ec41f6a","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-850.png","hash":"684300d9ef43d50c89c065e276871b7bef6199ac","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-github-516.png","hash":"10e663fb2e3d839f8f875a92fc9a10dee1d71c50","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-640.png","hash":"209ea2caa9bd43006ce8f3bd11f2e228408153e9","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-github-640.png","hash":"6542fb3862bada2a3e9f5f56846519f2dac9c0b8","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline.png","hash":"c3e6a33e0b0ceeb8c1218632415aacdd98d1a3fa","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline.graffle","hash":"dc1b74c04d0c9a83943dede41f11f7702b0558db","modified":1453268970000},{"_id":"source/_posts/hystrix/images/isolation-options-640.png","hash":"066719d23b378aa011dbc03e95cbe1e50741b8eb","modified":1453268970000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-640.png","hash":"9eb820ba5ffd5e1e34f1ab1767b838327ed8a1d0","modified":1453268970000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-with-640.png","hash":"810b1ddffb9b7f0327df0997ecebe562f293cf41","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-cinematch-1.png","hash":"8f2650b8712a0289f8233dd9043b618eaba562dc","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-getbookmarks-640.png","hash":"11d87be552894886f8968db273a04004f8b85161","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-cinematch-1-640.png","hash":"709e7ffcdc9fcba221ef91c48cb4ecca21115781","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-cache-640.png","hash":"3432e75e505598e0875a10940fa6ef925577ca4c","modified":1453268970000},{"_id":"source/_posts/hystrix/images/rolling-stats-1280.png","hash":"5e299504ba402de113568f3a7d2207a51691af0b","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-1-640.png","hash":"0264dedf3fd4ec05ad4321151fb06728b3eb05a3","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-2-640.png","hash":"487f186ee27f9afaee04ea501770da21f9aebfa4","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-640.png","hash":"4f40ed3361f652c019d9a56b4e3f990f5211b26c","modified":1453268971000},{"_id":"source/_posts/hystrix/images/thread-configuration-640.png","hash":"31fbb49d3d5525c0caf503103d56690f727ff318","modified":1453268971000},{"_id":"themes/hueman/source/vendor/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1455845553000},{"_id":"source/_posts/hystrix/images/thread-cost-60rps-640.png","hash":"3171b32cade8738593d21973588925be59fd9302","modified":1453268971000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.pack.js","hash":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.js","hash":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1455845553000},{"_id":"themes/hueman/source/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1455845553000},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1455845553000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1455845553000},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1455845553000},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1455845553000},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"5b05389db22550ffe09005e122d779fa350c387e","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"63f6191dcb4f3d2127cd6789f99664f0d10dc031","modified":1455863889000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"1e6255f1bfa1a820f70d5cfdadf2caa726bf853d","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"11e32468f993133e5d2bfe4f4efc68240746f8c6","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"a7c35f55255d2455eb7274dbc7ad9dd263899297","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1455845553000},{"_id":"source/_posts/hystrix/images/circuit-breaker-1280.png","hash":"c730869b2cd9bf96aa644c0a28870cb5ec7a125e","modified":1453268970000},{"_id":"source/_posts/hystrix/images/cascading-failure-preventing-640.png","hash":"a4faa2c09103e7b1f0ead2374b594716f979d9be","modified":1453268970000},{"_id":"source/_posts/hystrix/images/collapser-1280.png","hash":"e23cb36f2076c908f91cd188217a610fff1ddd41","modified":1453268970000},{"_id":"source/_posts/hystrix/images/collapser-flow-1280.png","hash":"e26a49f1d866e0995f02e11a8c70925887ea32e8","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-example-640.png","hash":"7dae892ac61dae2d3c60963deb7479f313abdda5","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-home-640.png","hash":"713063d28059ed57a743abe8bb330d302deaddd3","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-home.png","hash":"f34a8bf0d7a2b0be57bfb44c4a4265428a34c66f","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example.png","hash":"cec68ca6e16e2b89b78da6c2eaea946059bbf300","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-1280.png","hash":"022ba7d91a876f0be5d918b866c544b4f3c72e9f","modified":1453268970000},{"_id":"source/_posts/hystrix/images/isolation-options-1280.png","hash":"c11e4b8c8e78deae78046d46b8e2b33de5a588b6","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-ab.png","hash":"687b75e3b21cc0f2761537dd15ca52680b090a8f","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-cinematch-2-640.png","hash":"04c5820fa5721ccb454a30e677db907d203a7cb7","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-cinematch-2.png","hash":"ad39f8d08e97b7ca5874edd5abea5fe8a35e4d93","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-complete-system.png","hash":"4b2fbdbb8884a21fc3d4ad9bd6be15f31d4e9208","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-social-640.png","hash":"e7524c836025c9c0eeb749fa681cca5c89408cfe","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-social-original.png","hash":"7ab759016de29869e840746869ae05559a39e303","modified":1453268970000},{"_id":"source/_posts/hystrix/images/primary-secondary-example-original.png","hash":"75ba5408cb5d0d31dc30341971efb5f2d05efea3","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-cache-1280.png","hash":"97e236f01a0e7a7028fab6010341259924915194","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-1280.png","hash":"783113c029aafd7449a17c155592289a9f772ac8","modified":1453268971000},{"_id":"source/_posts/hystrix/images/rolling-stats-original.png","hash":"c6c56a4733950803b2bccdfb867b73200847f2af","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-3-640.png","hash":"6416dfb879bc3cac0c173fc68c71a4867c567da2","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-640.png","hash":"e87a1deb0ee48cc3643f4a72fd6474467040dd5c","modified":1453268971000},{"_id":"source/_posts/hystrix/images/thread-cost-60rps-original.png","hash":"f9ca0bfe40510d95aaaf707798e4f025da999b1b","modified":1453268971000},{"_id":"themes/hueman/.git/logs/refs/heads/_post","hash":"6d687384117358670bc006eeb784eb1364967cd9","modified":1455933663000},{"_id":"themes/hueman/.git/logs/refs/heads/master","hash":"27782b16d2374b315157fa1e297aed4a909946e8","modified":1455868563000},{"_id":"themes/hueman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1455845553000},{"_id":"source/_posts/hystrix/images/collapser-flow-original.png","hash":"69d9b785e6ce1ae5584ee19dedcc2e9765bab8b1","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-annoted-circuit-original.png","hash":"a25faa48260b30e92b1f9270d3fa11e9fc699db4","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-iPad-620.png","hash":"e5ae3b5cfe3babd8c31334a663698cb9bfa8e48a","modified":1453268970000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-1280.png","hash":"03bc1c86572a73e334aac14e162fab6b93384e71","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-ab-640.png","hash":"ec29160251d9c10722c7d87e80b8cd7c8e469fec","modified":1453268970000},{"_id":"themes/hueman/source/vendor/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1455845553000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455845553000},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1455845553000},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1455845553000},{"_id":"source/_posts/hystrix/images/ops-complete-system-640.png","hash":"47120ad690a834db225a8499caf8f19820ccb7ac","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-getbookmarks.png","hash":"8596fc651f6182f54f85eefdc53cbaa2f52e54e0","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-cache-original.png","hash":"8435b5f070043655685148d3cd842a2edb70119e","modified":1453268971000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-original.png","hash":"6430ac913484ef09e80c7b8d21f94b9785cc353f","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-1-1280.png","hash":"a7c73f21630a232dbeea1e7d71123704af683f5f","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-2-1280.png","hash":"6e602eb59079308e64c8bfe58807a728526b8e80","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-1280.png","hash":"d366f2671c80c18c1a0c8510adab3df40f594b37","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-original.png","hash":"2525840274b1d46cfd8f68b694c0613c26225236","modified":1453268971000},{"_id":"source/_posts/hystrix/images/thread-configuration-1280.png","hash":"a5b25580b21f8fe5bc1796ff563ec61ad769819c","modified":1453268971000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1455845553000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1455845553000},{"_id":"themes/hueman/.git/logs/refs/remotes/origin/HEAD","hash":"25ae1b00acf833780d1d44995499ca6513e4f456","modified":1455845553000},{"_id":"themes/hueman/source/vendor/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1455845553000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1455845553000},{"_id":"source/_posts/hystrix/images/collapser-original.png","hash":"81fb51310999305b23285a99fac7d7836d4c3fd1","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-examples-webapp-home.png","hash":"10f9df7ad08a1080f97b700793e1edcb08417e81","modified":1453268970000},{"_id":"source/_posts/hystrix/images/isolation-options-original.png","hash":"0a3f5da5335e00dbbf329ddf2fd3394d4f568879","modified":1453268970000},{"_id":"source/_posts/hystrix/images/soa-3-1280.png","hash":"148452655f23b98891f10564cc53f5aca81cbbec","modified":1453268971000},{"_id":"source/_posts/hystrix/images/thread-configuration-original.png","hash":"1efac02e91756f059dcaf8bc6ff40ac46c6aa1ed","modified":1453268971000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1455845553000},{"_id":"source/_posts/hystrix/images/cascading-failure-preventing.png","hash":"7e08eb521c9856451681b25d18c056f889881684","modified":1453268970000},{"_id":"source/_posts/hystrix/images/circuit-breaker-original.png","hash":"aa93fa77ab6a206152a048d204964653dd73283d","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-example-1280.png","hash":"df18fe4eddd84e68416eb74c7697215dd6b0c827","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-example-original.png","hash":"81ebad4a1aeba9b466d95c27505ac2dc0aa58903","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-original.png","hash":"4577f01394b1605bcf9ff53157b494e51054bce7","modified":1453268970000},{"_id":"source/_posts/hystrix/images/soa-1-original.png","hash":"3ce4b0a11c2271fa92dc94cde82573afcbebc6b0","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-2-original.png","hash":"6747720006edb6770a28811c75c15f1b774fa87f","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-1280.png","hash":"facf44be2c0fe54d059c8553f27342d7bfb4cfdd","modified":1453268971000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-iPad.png","hash":"33ddd07a4e65cc74edaf54913d71484e5c39f7d4","modified":1453268970000},{"_id":"source/_posts/hystrix/images/soa-3-original.png","hash":"046b841b7cb92583624480f513585b7d146ef5b1","modified":1453268971000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1455845553000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-original.png","hash":"426aa98175e52d516f470a6a34919a393b02a163","modified":1453268970000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-original.png","hash":"68a394f28663ae3196ed23e4df7c1f377785d97e","modified":1453268971000},{"_id":"source/_posts/hystrix/images/hystrix.graffle","hash":"19ffa1864138388e506d53bb8d8eefa21f07c09f","modified":1453268970000},{"_id":"themes/hueman/.git/objects/pack/pack-f4fb5b25f0ca9450ac36f4e3193757f049b09475.pack","hash":"0fbf67d49c66761b8c06ec5b01b81adf610973ab","modified":1455933663000},{"_id":"public/about/index.html","hash":"9d3f958c813b46925d190990fa21989687198b2e","modified":1464918849943},{"_id":"public/2016/06/02/微服务/微服务之微/index.html","hash":"3d6e2da168afa7c8d1384f30d90f3ef579245e09","modified":1464921639173},{"_id":"public/2016/03/17/hystrix/怎样使用Hystrix/index.html","hash":"b8f722ec630f72998eca07e6069f1fad831c37e6","modified":1464918849944},{"_id":"public/2016/03/09/hystrix/Hystrix降级模式总结/index.html","hash":"17ff0fbd36141f993d25af156ff185bb797c311e","modified":1464918849944},{"_id":"public/2016/03/09/hystrix/Hystrix简介/index.html","hash":"1a80afdb6844167c2d8e2767c9e0409182ba4447","modified":1464918849944},{"_id":"public/2016/03/04/技术/工具/wrk基准测试工具安装使用/index.html","hash":"0ca5750ca8ba7ca734189f60d43c39f5c8593991","modified":1464918849944},{"_id":"public/2016/02/25/hystrix/Hystrix参数详解/index.html","hash":"1e4dd3771c243f014f4f0d653496617710bdde14","modified":1464918849944},{"_id":"public/2016/02/22/music/Matthew-Lien-Bleeding-Wolves/index.html","hash":"89fe0e6cb5d843a81e344f54e310cdcefcc6314e","modified":1464918849944},{"_id":"public/2016/02/22/转载/http2.0/装载：HTTP2-0的奇妙日常/index.html","hash":"6fb3241d6fad73489ea4b011a061f773d1b1a503","modified":1464918849944},{"_id":"public/2016/02/21/技术/Hexo/Hexo命令速记/index.html","hash":"13c488623807e5acdf0ec362a3d08dbeb4668e03","modified":1464918849944},{"_id":"public/2016/02/21/技术/领域模型/领域模型的价值/index.html","hash":"64a05b3df7dc83202d1d7aebbe5b67785362dabc","modified":1464918849944},{"_id":"public/2016/02/19/技术/FlatBuffers/FlatBuffers简介/index.html","hash":"ed35e23d6ec278c6b6b764323bf7321b83bfb12e","modified":1464918849945},{"_id":"public/2016/02/19/技术/FlatBuffers/FlatBuffers使用指南/index.html","hash":"5705ee412a89c83dd52395046bf25298729a4bc4","modified":1464918849945},{"_id":"public/2016/02/19/春天花会开/index.html","hash":"edfa03e9217a38acbe182e2b4c583c91c8dc5ef7","modified":1464918849945},{"_id":"public/tags/春天/index.html","hash":"7785e02a8e46be5d1d04059c06f0d4c247c55f16","modified":1464918849945},{"_id":"public/tags/hystrix/index.html","hash":"54efe4987925a095667cd2981c535dca8402aa98","modified":1464918849945},{"_id":"public/tags/梅花/index.html","hash":"1004ddb67c0f74a8dd4736abfaf5c9e20bc19aec","modified":1464918849945},{"_id":"public/tags/Circuit-Breaker/index.html","hash":"602924be99577d2300241b3cac159e9617a0d0f2","modified":1464918849945},{"_id":"public/tags/微服务/index.html","hash":"38dd5f89c2cf2bcb3ebb9e73b48c21731ccad29b","modified":1464918849945},{"_id":"public/tags/FlatBuffers/index.html","hash":"401ce6943d501ec28a514b9bebde72298a7ce609","modified":1464918849945},{"_id":"public/tags/序列化/index.html","hash":"1765d7721f37866bb3b7408cfbcaccb70dea7fb1","modified":1464918849945},{"_id":"public/tags/基准测试/index.html","hash":"9a90174493993cc491a071c89875a9cf3ce242f6","modified":1464918849945},{"_id":"public/tags/wrk/index.html","hash":"8f9749e96872793a6b4686beeffd038e3c1bb378","modified":1464918849945},{"_id":"public/tags/领域模型/index.html","hash":"ce88a9c0ddd97a51c27fa06cc25de43e3c379601","modified":1464918849945},{"_id":"public/tags/DDD/index.html","hash":"51c84aef32f5bf67f41291b6a9a520319c5781f3","modified":1464918849945},{"_id":"public/tags/Hexo/index.html","hash":"905c478ad796b1521ad7c74b61f03cded40ab737","modified":1464918849945},{"_id":"public/tags/http-2-0/index.html","hash":"3c0a6601c0eb37cc685db4a25546b90cb11e42dd","modified":1464918849945},{"_id":"public/categories/那年今日/index.html","hash":"3f05c24fd80d48786514357b99b55ef9559be625","modified":1464918849946},{"_id":"public/categories/技术/index.html","hash":"d25710c32696742343f0c801cd95bb360142a9cb","modified":1464918849946},{"_id":"public/categories/技术/Hystrix/index.html","hash":"e20f3b0db982c9b6899019053090e9fea00bdb13","modified":1464918849946},{"_id":"public/categories/微服务/index.html","hash":"a331ff8dac388f8263fdc7d91971bb65ae5ce61b","modified":1464918849946},{"_id":"public/categories/music/index.html","hash":"08fbcd8cccc8f59c10f7c3f795738b6f1aa8805f","modified":1464918849946},{"_id":"public/categories/技术/FlatBuffers/index.html","hash":"7750e9a0047144d6020fd562228801efa788dda3","modified":1464918849946},{"_id":"public/categories/技术/工具/index.html","hash":"564880c76bf4c25586bd836f58087b1bad113159","modified":1464918849946},{"_id":"public/categories/技术/领域模型/index.html","hash":"30dd054afad295fd8fb93ffa7bd730b2047f973b","modified":1464918849946},{"_id":"public/categories/技术/Hexo/index.html","hash":"26ae1e8652e7740bc73d4d11263ca2ffd3c5ebc1","modified":1464918849946},{"_id":"public/categories/转载/index.html","hash":"051fb038f0784cd53bcae9bfe918ceb48eab68a4","modified":1464918849946},{"_id":"public/categories/转载/http-2-0/index.html","hash":"1539a539cd750dfe5a2982a214811e0ae42689ae","modified":1464918849946},{"_id":"public/archives/index.html","hash":"0e5bc37664a5969ea5480820b65d49660a3bc857","modified":1464918849946},{"_id":"public/archives/page/2/index.html","hash":"77d30af51ba9fecadbc24bd58093bcf5498e310c","modified":1464918849946},{"_id":"public/archives/2016/index.html","hash":"990d7e7fb59896832069f23227a3608140e7f8b7","modified":1464918849946},{"_id":"public/archives/2016/page/2/index.html","hash":"0458cb479a777e9c4ff411cc8fdc10bd0929ed88","modified":1464918849946},{"_id":"public/archives/2016/02/index.html","hash":"b9d897039b6594c38409622c89bb411318622a50","modified":1464918849946},{"_id":"public/archives/2016/03/index.html","hash":"3691cbd92b7c2b1c0595f4e76126a6daaf6eb6d6","modified":1464918849946},{"_id":"public/archives/2016/06/index.html","hash":"0930772b543c2c2bc535d948e9616e54aae9d7a8","modified":1464918849946},{"_id":"public/index.html","hash":"396022a2cc5f43827263f11e1e799e4bcf79f5c8","modified":1464918849947},{"_id":"public/page/2/index.html","hash":"0ea4b8244758806e25cb96206f746c8595a716f6","modified":1464918849947},{"_id":"public/favicon.ico","hash":"a5c41d966e5eef597a50b91f0b6a9bdf8ac80583","modified":1464918849966},{"_id":"public/vendor/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1464918849966},{"_id":"public/vendor/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1464918849966},{"_id":"public/vendor/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1464918849966},{"_id":"public/vendor/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1464918849966},{"_id":"public/vendor/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1464918849966},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1464918849966},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1464918849966},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1464918849966},{"_id":"public/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1464918849966},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1464918849966},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1464918849966},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1464918849967},{"_id":"public/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1464918849967},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1464918849967},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1464918849967},{"_id":"public/vendor/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1464918849969},{"_id":"public/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1464918849973},{"_id":"public/vendor/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1464918849973},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1464918849973},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1464918849973},{"_id":"public/vendor/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1464918849973},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1464918849973},{"_id":"public/vendor/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1464918849973},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1464918850946},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1464918850953},{"_id":"public/vendor/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1464918850953},{"_id":"public/js/main.js","hash":"5027fe5ba72a88d5f16a7feba312574ad50556b5","modified":1464918850958},{"_id":"public/vendor/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1464918850958},{"_id":"public/vendor/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1464918850958},{"_id":"public/vendor/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1464918850958},{"_id":"public/vendor/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1464918850958},{"_id":"public/vendor/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1464918850958},{"_id":"public/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1464918850958},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1464918850958},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1464918850958},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1464918850958},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1464918850958},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1464918850958},{"_id":"public/css/style.css","hash":"95b9aa209e0cfa4ebcf32789d974590fbd15fb00","modified":1464918850958},{"_id":"public/vendor/fancybox/jquery.fancybox.pack.js","hash":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9","modified":1464918850958},{"_id":"public/vendor/fancybox/jquery.fancybox.js","hash":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6","modified":1464918850959},{"_id":"public/vendor/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1464918850959},{"_id":"public/vendor/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1464918850959},{"_id":"public/images/185638fo3y9el8ie2ohese.jpg","hash":"4d278765113277adc24d16fda2004d179911d5bc","modified":1464918850959},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1464918850959},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1464918850962},{"_id":"source/CNAME","hash":"704f5291fe9f9f9d297c839806479c17e209a2d7","modified":1464921534000},{"_id":"public/CNAME","hash":"704f5291fe9f9f9d297c839806479c17e209a2d7","modified":1464921639174}],"Category":[{"name":"那年今日","_id":"cioz2uxi70003lgin3c2d99j2"},{"name":"技术","_id":"cioz2uxki000blginbwqdo99y"},{"name":"Hystrix","parent":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxkv000llgincy5e3ynm"},{"name":"微服务","_id":"cioz2uxky000tlgin5xwz67ee"},{"name":"music","_id":"cioz2uxl0000xlgin7xj3b48d"},{"name":"FlatBuffers","parent":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxmh001blginbo6pl4eq"},{"name":"工具","parent":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxmp001jlgingu927mq7"},{"name":"领域模型","parent":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxmr001plgingxcs63ov"},{"name":"Hexo","parent":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxms001tlgin0900fl7z"},{"name":"转载","_id":"cioz2uxmu001zlginxt835pma"},{"name":"http 2.0","parent":"cioz2uxmu001zlginxt835pma","_id":"cioz2uxmw0025lginvfw90n92"}],"Data":[],"Page":[{"_content":"# 关于\n\n暂无","source":"about/index.md","raw":"# 关于\n\n暂无","date":"2016-02-19T08:58:42.000Z","updated":"2016-02-19T08:58:42.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cioz2uxhx0000lginyrj5b7uf","content":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>暂无</p>\n","excerpt":"","more":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>暂无</p>\n"}],"Post":[{"title":"春天开篇","date":"2016-02-19T01:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122144.JPG","_content":"\n## 一年之计在于始\n\n想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：\n\n“一日之计在于晨,一年之计在于春,一生之计在于勤”\n\n**更有：**\n\n“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”\n\n春，晨，和，勤\n\n\n\n","source":"_posts/春天花会开.md","raw":"---\ntitle: 春天开篇\ndate: 2016-02-19 09:20:42\ncategories: \n\t- 那年今日\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122144.JPG\ntags: \n\t- 春天 \n\t- 梅花\n---\n\n## 一年之计在于始\n\n想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：\n\n“一日之计在于晨,一年之计在于春,一生之计在于勤”\n\n**更有：**\n\n“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”\n\n春，晨，和，勤\n\n\n\n","slug":"春天花会开","published":1,"updated":"2016-02-19T13:39:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxhz0001lginepuu9n43","content":"<h2 id=\"一年之计在于始\"><a href=\"#一年之计在于始\" class=\"headerlink\" title=\"一年之计在于始\"></a>一年之计在于始</h2><p>想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：</p>\n<p>“一日之计在于晨,一年之计在于春,一生之计在于勤”</p>\n<p><strong>更有：</strong></p>\n<p>“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”</p>\n<p>春，晨，和，勤</p>\n","excerpt":"","more":"<h2 id=\"一年之计在于始\"><a href=\"#一年之计在于始\" class=\"headerlink\" title=\"一年之计在于始\"></a>一年之计在于始</h2><p>想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：</p>\n<p>“一日之计在于晨,一年之计在于春,一生之计在于勤”</p>\n<p><strong>更有：</strong></p>\n<p>“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”</p>\n<p>春，晨，和，勤</p>\n"},{"title":"Hystrix简介","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png","date":"2016-03-09T01:22:47.000Z","keywords":"hystrix","description":"Hystrix简介","_content":"\n \n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png)\n\n1. <a href=\"#what\">What Is Hystrix?</a>\n1. <a href=\"#purpose\">What Is Hystrix For?</a>\n1. <a href=\"#problem\">What Problem Does Hystrix Solve?</a>\n1. <a href=\"#principles\">What Design Principles Underlie Hystrix?</a>\n1. <a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a>\n\n<a name=\"what\" />\n## Hystrix是什么?\n\n在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。\n\n####  Hystrix的历史\n\nHystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。\n\n \n下面的链接提供了围绕Hystrix和挑战，试图解决：\n\n* [&ldquo;Making Netflix API More Resilient&rdquo;](http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html)\n* [&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;](http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html)\n* [&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;](https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012)\n* [&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;](http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html)\n* [&ldquo;Application Resilience Engineering & Operations at Netflix&rdquo;] (https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix)\n\n<a name=\"purpose\" />\n## Hystrix能做什么?\n  \nHystrix被设计为：\n\n- 保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障\n- 在复杂的分布式系统中阻止连锁故障反应\n- 快速失败和快速恢复\n- Fallback降级和在可能的情况下优雅地降级\n- 启用近实时监测，报警和操作控制\n\n\n<a name=\"problem\" />\n## Hystrix解决了什么问题?\n\n复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。\n\n\n例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：\n\n> 99.99<sup>30</sup>  =  99.7% uptime  \n> 10亿请求中的0.3%  = 3,000,000 次失败  \n> 即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用 \n> 随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.\n \n**现实通常会更残酷。**\n\n**如果你没有针对整个系统做快速恢复**，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。\n\n***\n\n \n\n当一切都ok的请求流看起来是这样的：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png)\n\n当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png)\n\n\n \n一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。\n在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png)\n\n \n\n当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。\n如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！\n\n\n网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。\n所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。\n\n\n\n<a name=\"principles\" />\n## What Design Principles Underlie Hystrix?\n\nHystrix works by:\n\n* 防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程\n* 隔离和减低负载，对无法及时处理时快速失败，而不是排队\n* 提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。\n* 采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。\n* 通过最近实时metrics、监控和警告来优化以满足近实时性的要求\n* 在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求\n* 能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求\n\n\n\n<a name=\"how\" />\n## How Does Hystrix Accomplish Its Goals?\n\nHystrix does this by:\n\n \n- 使用`HystrixCommand`或者`HystrixObservableCommand`包装所有的外部系统（或者依赖服务）调用，每个`HystrixCommand`或者`HystrixObservableCommand`在隔离的线程中/信号下执行（参考这个例子[command pattern](http://en.wikipedia.org/wiki/Command_pattern)）\n\n- 超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。\n\n- 为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。\n- 测量成功，失败（抛出异常），超时和线程拒绝。\n- 如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。\n- 当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。\n- 近实时监控度量，动态配置修改\n \n \n\n当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。\n\n \n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png)\n\n \n\n\n\n","source":"_posts/hystrix/Hystrix简介.md","raw":"---\ntitle: Hystrix简介\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png'\ndate: 2016-03-09 09:22:47\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\nkeywords: hystrix\ndescription: Hystrix简介\n---\n\n \n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png)\n\n1. <a href=\"#what\">What Is Hystrix?</a>\n1. <a href=\"#purpose\">What Is Hystrix For?</a>\n1. <a href=\"#problem\">What Problem Does Hystrix Solve?</a>\n1. <a href=\"#principles\">What Design Principles Underlie Hystrix?</a>\n1. <a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a>\n\n<a name=\"what\" />\n## Hystrix是什么?\n\n在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。\n\n####  Hystrix的历史\n\nHystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。\n\n \n下面的链接提供了围绕Hystrix和挑战，试图解决：\n\n* [&ldquo;Making Netflix API More Resilient&rdquo;](http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html)\n* [&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;](http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html)\n* [&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;](https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012)\n* [&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;](http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html)\n* [&ldquo;Application Resilience Engineering & Operations at Netflix&rdquo;] (https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix)\n\n<a name=\"purpose\" />\n## Hystrix能做什么?\n  \nHystrix被设计为：\n\n- 保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障\n- 在复杂的分布式系统中阻止连锁故障反应\n- 快速失败和快速恢复\n- Fallback降级和在可能的情况下优雅地降级\n- 启用近实时监测，报警和操作控制\n\n\n<a name=\"problem\" />\n## Hystrix解决了什么问题?\n\n复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。\n\n\n例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：\n\n> 99.99<sup>30</sup>  =  99.7% uptime  \n> 10亿请求中的0.3%  = 3,000,000 次失败  \n> 即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用 \n> 随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.\n \n**现实通常会更残酷。**\n\n**如果你没有针对整个系统做快速恢复**，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。\n\n***\n\n \n\n当一切都ok的请求流看起来是这样的：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png)\n\n当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png)\n\n\n \n一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。\n在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png)\n\n \n\n当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。\n如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！\n\n\n网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。\n所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。\n\n\n\n<a name=\"principles\" />\n## What Design Principles Underlie Hystrix?\n\nHystrix works by:\n\n* 防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程\n* 隔离和减低负载，对无法及时处理时快速失败，而不是排队\n* 提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。\n* 采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。\n* 通过最近实时metrics、监控和警告来优化以满足近实时性的要求\n* 在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求\n* 能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求\n\n\n\n<a name=\"how\" />\n## How Does Hystrix Accomplish Its Goals?\n\nHystrix does this by:\n\n \n- 使用`HystrixCommand`或者`HystrixObservableCommand`包装所有的外部系统（或者依赖服务）调用，每个`HystrixCommand`或者`HystrixObservableCommand`在隔离的线程中/信号下执行（参考这个例子[command pattern](http://en.wikipedia.org/wiki/Command_pattern)）\n\n- 超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。\n\n- 为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。\n- 测量成功，失败（抛出异常），超时和线程拒绝。\n- 如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。\n- 当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。\n- 近实时监控度量，动态配置修改\n \n \n\n当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。\n\n \n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png)\n\n \n\n\n\n","slug":"hystrix/Hystrix简介","published":1,"updated":"2016-03-21T12:46:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxkf0008lginjr8z27kg","content":"<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png\" alt=\"\"></p>\n<ol>\n<li><a href=\"#what\">What Is Hystrix?</a></li>\n<li><a href=\"#purpose\">What Is Hystrix For?</a></li>\n<li><a href=\"#problem\">What Problem Does Hystrix Solve?</a></li>\n<li><a href=\"#principles\">What Design Principles Underlie Hystrix?</a></li>\n<li><a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a></li>\n</ol>\n<p><a name=\"what\"></a></p>\n<h2 id=\"Hystrix是什么\"><a href=\"#Hystrix是什么\" class=\"headerlink\" title=\"Hystrix是什么?\"></a>Hystrix是什么?</h2><p>在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。</p>\n<h4 id=\"Hystrix的历史\"><a href=\"#Hystrix的历史\" class=\"headerlink\" title=\"Hystrix的历史\"></a>Hystrix的历史</h4><p>Hystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。</p>\n<p>下面的链接提供了围绕Hystrix和挑战，试图解决：</p>\n<ul>\n<li><a href=\"http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html\" target=\"_blank\" rel=\"external\">&ldquo;Making Netflix API More Resilient&rdquo;</a></li>\n<li><a href=\"http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html\" target=\"_blank\" rel=\"external\">&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;</a></li>\n<li><a href=\"https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012\" target=\"_blank\" rel=\"external\">&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;</a></li>\n<li><a href=\"http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html\" target=\"_blank\" rel=\"external\">&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;</a></li>\n<li>[&ldquo;Application Resilience Engineering &amp; Operations at Netflix&rdquo;] (<a href=\"https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix\" target=\"_blank\" rel=\"external\">https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix</a>)</li>\n</ul>\n<p><a name=\"purpose\"></a></p>\n<h2 id=\"Hystrix能做什么\"><a href=\"#Hystrix能做什么\" class=\"headerlink\" title=\"Hystrix能做什么?\"></a>Hystrix能做什么?</h2><p>Hystrix被设计为：</p>\n<ul>\n<li>保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障</li>\n<li>在复杂的分布式系统中阻止连锁故障反应</li>\n<li>快速失败和快速恢复</li>\n<li>Fallback降级和在可能的情况下优雅地降级</li>\n<li>启用近实时监测，报警和操作控制</li>\n</ul>\n<p><a name=\"problem\"></a></p>\n<h2 id=\"Hystrix解决了什么问题\"><a href=\"#Hystrix解决了什么问题\" class=\"headerlink\" title=\"Hystrix解决了什么问题?\"></a>Hystrix解决了什么问题?</h2><p>复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。</p>\n<p>例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：</p>\n<blockquote>\n<p>99.99<sup>30</sup>  =  99.7% uptime<br>10亿请求中的0.3%  = 3,000,000 次失败<br>即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用<br>随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.</p>\n</blockquote>\n<p><strong>现实通常会更残酷。</strong></p>\n<p><strong>如果你没有针对整个系统做快速恢复</strong>，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。</p>\n<hr>\n<p>当一切都ok的请求流看起来是这样的：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png\" alt=\"\"></p>\n<p>当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png\" alt=\"\"></p>\n<p>一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。<br>在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png\" alt=\"\"></p>\n<p>当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。<br>如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！</p>\n<p>网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。<br>所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。</p>\n<p><a name=\"principles\"></a></p>\n<h2 id=\"What-Design-Principles-Underlie-Hystrix\"><a href=\"#What-Design-Principles-Underlie-Hystrix\" class=\"headerlink\" title=\"What Design Principles Underlie Hystrix?\"></a>What Design Principles Underlie Hystrix?</h2><p>Hystrix works by:</p>\n<ul>\n<li>防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程</li>\n<li>隔离和减低负载，对无法及时处理时快速失败，而不是排队</li>\n<li>提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。</li>\n<li>采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。</li>\n<li>通过最近实时metrics、监控和警告来优化以满足近实时性的要求</li>\n<li>在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求</li>\n<li>能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求</li>\n</ul>\n<p><a name=\"how\"></a></p>\n<h2 id=\"How-Does-Hystrix-Accomplish-Its-Goals\"><a href=\"#How-Does-Hystrix-Accomplish-Its-Goals\" class=\"headerlink\" title=\"How Does Hystrix Accomplish Its Goals?\"></a>How Does Hystrix Accomplish Its Goals?</h2><p>Hystrix does this by:</p>\n<ul>\n<li><p>使用<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>包装所有的外部系统（或者依赖服务）调用，每个<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>在隔离的线程中/信号下执行（参考这个例子<a href=\"http://en.wikipedia.org/wiki/Command_pattern\" target=\"_blank\" rel=\"external\">command pattern</a>）</p>\n</li>\n<li><p>超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。</p>\n</li>\n<li><p>为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。</p>\n</li>\n<li>测量成功，失败（抛出异常），超时和线程拒绝。</li>\n<li>如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。</li>\n<li>当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。</li>\n<li>近实时监控度量，动态配置修改</li>\n</ul>\n<p>当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png\" alt=\"\"></p>\n<ol>\n<li><a href=\"#what\">What Is Hystrix?</a></li>\n<li><a href=\"#purpose\">What Is Hystrix For?</a></li>\n<li><a href=\"#problem\">What Problem Does Hystrix Solve?</a></li>\n<li><a href=\"#principles\">What Design Principles Underlie Hystrix?</a></li>\n<li><a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a></li>\n</ol>\n<p><a name=\"what\" /></p>\n<h2 id=\"Hystrix是什么\"><a href=\"#Hystrix是什么\" class=\"headerlink\" title=\"Hystrix是什么?\"></a>Hystrix是什么?</h2><p>在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。</p>\n<h4 id=\"Hystrix的历史\"><a href=\"#Hystrix的历史\" class=\"headerlink\" title=\"Hystrix的历史\"></a>Hystrix的历史</h4><p>Hystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。</p>\n<p>下面的链接提供了围绕Hystrix和挑战，试图解决：</p>\n<ul>\n<li><a href=\"http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html\">&ldquo;Making Netflix API More Resilient&rdquo;</a></li>\n<li><a href=\"http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html\">&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;</a></li>\n<li><a href=\"https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012\">&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;</a></li>\n<li><a href=\"http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html\">&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;</a></li>\n<li>[&ldquo;Application Resilience Engineering &amp; Operations at Netflix&rdquo;] (<a href=\"https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix\">https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix</a>)</li>\n</ul>\n<p><a name=\"purpose\" /></p>\n<h2 id=\"Hystrix能做什么\"><a href=\"#Hystrix能做什么\" class=\"headerlink\" title=\"Hystrix能做什么?\"></a>Hystrix能做什么?</h2><p>Hystrix被设计为：</p>\n<ul>\n<li>保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障</li>\n<li>在复杂的分布式系统中阻止连锁故障反应</li>\n<li>快速失败和快速恢复</li>\n<li>Fallback降级和在可能的情况下优雅地降级</li>\n<li>启用近实时监测，报警和操作控制</li>\n</ul>\n<p><a name=\"problem\" /></p>\n<h2 id=\"Hystrix解决了什么问题\"><a href=\"#Hystrix解决了什么问题\" class=\"headerlink\" title=\"Hystrix解决了什么问题?\"></a>Hystrix解决了什么问题?</h2><p>复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。</p>\n<p>例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：</p>\n<blockquote>\n<p>99.99<sup>30</sup>  =  99.7% uptime<br>10亿请求中的0.3%  = 3,000,000 次失败<br>即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用<br>随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.</p>\n</blockquote>\n<p><strong>现实通常会更残酷。</strong></p>\n<p><strong>如果你没有针对整个系统做快速恢复</strong>，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。</p>\n<hr>\n<p>当一切都ok的请求流看起来是这样的：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png\" alt=\"\"></p>\n<p>当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png\" alt=\"\"></p>\n<p>一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。<br>在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png\" alt=\"\"></p>\n<p>当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。<br>如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！</p>\n<p>网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。<br>所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。</p>\n<p><a name=\"principles\" /></p>\n<h2 id=\"What-Design-Principles-Underlie-Hystrix\"><a href=\"#What-Design-Principles-Underlie-Hystrix\" class=\"headerlink\" title=\"What Design Principles Underlie Hystrix?\"></a>What Design Principles Underlie Hystrix?</h2><p>Hystrix works by:</p>\n<ul>\n<li>防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程</li>\n<li>隔离和减低负载，对无法及时处理时快速失败，而不是排队</li>\n<li>提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。</li>\n<li>采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。</li>\n<li>通过最近实时metrics、监控和警告来优化以满足近实时性的要求</li>\n<li>在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求</li>\n<li>能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求</li>\n</ul>\n<p><a name=\"how\" /></p>\n<h2 id=\"How-Does-Hystrix-Accomplish-Its-Goals\"><a href=\"#How-Does-Hystrix-Accomplish-Its-Goals\" class=\"headerlink\" title=\"How Does Hystrix Accomplish Its Goals?\"></a>How Does Hystrix Accomplish Its Goals?</h2><p>Hystrix does this by:</p>\n<ul>\n<li><p>使用<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>包装所有的外部系统（或者依赖服务）调用，每个<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>在隔离的线程中/信号下执行（参考这个例子<a href=\"http://en.wikipedia.org/wiki/Command_pattern\">command pattern</a>）</p>\n</li>\n<li><p>超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。</p>\n</li>\n<li><p>为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。</p>\n</li>\n<li>测量成功，失败（抛出异常），超时和线程拒绝。</li>\n<li>如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。</li>\n<li>当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。</li>\n<li>近实时监控度量，动态配置修改</li>\n</ul>\n<p>当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png\" alt=\"\"></p>\n"},{"title":"Hystrix 参数详解","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-25T01:20:00.000Z","keywords":null,"description":null,"_content":"\nhystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey\n\n# Command Properties\n\n## Execution相关的属性的配置：\n\n* hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore\n\t- thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用\n\t- semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求\n\n* hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms\n* hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true\n* hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true\n* hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。\nsemaphore应该占整个容器（tomcat）的线程池的一小部分。\n\n\n## Fallback相关的属性\n\n这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略\n\n* hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10\n* hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true\n\n\n## Circuit Breaker相关的属性\n\n* hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true\n* hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20\n* hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000\n* hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50\n* hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false\n* hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage\n\n## Metrics相关参数\n\n* hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000\n* hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10\n* hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true\n* hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000\n* hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6\n* hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100\n* hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms\n\n## Request Context 相关参数\n\nhystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存\nhystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true\n\n# Collapser Properties 相关参数\n\nhystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE\nhystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10\nhystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true\n\n# ThreadPool 相关参数\n\n线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：\nrequests per second at peak when healthy × 99th percentile latency in seconds + some breathing room\n每秒最大支撑的请求数 * (99%平均响应时间 + 缓存值)\n比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：\n 1000 *（0.060+0.012）\n\n基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。\n当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务\n \n* hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10\n* hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。\n* hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用\n* hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1.\n* hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000\n* hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10\n\n\n ","source":"_posts/hystrix/Hystrix参数详解.md","raw":"---\ntitle: Hystrix 参数详解\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG'\ndate: 2016-02-25 09:20:00\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\n\t- Circuit Breaker\nkeywords:\ndescription:\n---\n\nhystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey\n\n# Command Properties\n\n## Execution相关的属性的配置：\n\n* hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore\n\t- thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用\n\t- semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求\n\n* hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms\n* hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true\n* hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true\n* hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。\nsemaphore应该占整个容器（tomcat）的线程池的一小部分。\n\n\n## Fallback相关的属性\n\n这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略\n\n* hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10\n* hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true\n\n\n## Circuit Breaker相关的属性\n\n* hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true\n* hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20\n* hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000\n* hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50\n* hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false\n* hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage\n\n## Metrics相关参数\n\n* hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000\n* hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10\n* hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true\n* hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000\n* hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6\n* hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100\n* hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms\n\n## Request Context 相关参数\n\nhystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存\nhystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true\n\n# Collapser Properties 相关参数\n\nhystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE\nhystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10\nhystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true\n\n# ThreadPool 相关参数\n\n线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：\nrequests per second at peak when healthy × 99th percentile latency in seconds + some breathing room\n每秒最大支撑的请求数 * (99%平均响应时间 + 缓存值)\n比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：\n 1000 *（0.060+0.012）\n\n基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。\n当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务\n \n* hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10\n* hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。\n* hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用\n* hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1.\n* hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000\n* hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10\n\n\n ","slug":"hystrix/Hystrix参数详解","published":1,"updated":"2016-03-21T12:45:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxkh0009lginxxignkxn","content":"<p>hystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey</p>\n<h1 id=\"Command-Properties\"><a href=\"#Command-Properties\" class=\"headerlink\" title=\"Command Properties\"></a>Command Properties</h1><h2 id=\"Execution相关的属性的配置：\"><a href=\"#Execution相关的属性的配置：\" class=\"headerlink\" title=\"Execution相关的属性的配置：\"></a>Execution相关的属性的配置：</h2><ul>\n<li><p>hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore</p>\n<ul>\n<li>thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用</li>\n<li>semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求</li>\n</ul>\n</li>\n<li><p>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms</p>\n</li>\n<li>hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true</li>\n<li>hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true</li>\n<li>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。<br>semaphore应该占整个容器（tomcat）的线程池的一小部分。</li>\n</ul>\n<h2 id=\"Fallback相关的属性\"><a href=\"#Fallback相关的属性\" class=\"headerlink\" title=\"Fallback相关的属性\"></a>Fallback相关的属性</h2><p>这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略</p>\n<ul>\n<li>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10</li>\n<li>hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true</li>\n</ul>\n<h2 id=\"Circuit-Breaker相关的属性\"><a href=\"#Circuit-Breaker相关的属性\" class=\"headerlink\" title=\"Circuit Breaker相关的属性\"></a>Circuit Breaker相关的属性</h2><ul>\n<li>hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true</li>\n<li>hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20</li>\n<li>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000</li>\n<li>hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率&gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50</li>\n<li>hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false</li>\n<li>hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage</li>\n</ul>\n<h2 id=\"Metrics相关参数\"><a href=\"#Metrics相关参数\" class=\"headerlink\" title=\"Metrics相关参数\"></a>Metrics相关参数</h2><ul>\n<li>hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000</li>\n<li>hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10</li>\n<li>hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true</li>\n<li>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000</li>\n<li>hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6</li>\n<li>hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100</li>\n<li>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms</li>\n</ul>\n<h2 id=\"Request-Context-相关参数\"><a href=\"#Request-Context-相关参数\" class=\"headerlink\" title=\"Request Context 相关参数\"></a>Request Context 相关参数</h2><p>hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存<br>hystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true</p>\n<h1 id=\"Collapser-Properties-相关参数\"><a href=\"#Collapser-Properties-相关参数\" class=\"headerlink\" title=\"Collapser Properties 相关参数\"></a>Collapser Properties 相关参数</h1><p>hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE<br>hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10<br>hystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true</p>\n<h1 id=\"ThreadPool-相关参数\"><a href=\"#ThreadPool-相关参数\" class=\"headerlink\" title=\"ThreadPool 相关参数\"></a>ThreadPool 相关参数</h1><p>线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：<br>requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room<br>每秒最大支撑的请求数 <em> (99%平均响应时间 + 缓存值)<br>比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：<br> 1000 </em>（0.060+0.012）</p>\n<p>基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。<br>当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务</p>\n<ul>\n<li>hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10</li>\n<li>hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。</li>\n<li>hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用</li>\n<li>hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（<a href=\"https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1\" target=\"_blank\" rel=\"external\">https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1</a>.</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10</li>\n</ul>\n","excerpt":"","more":"<p>hystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey</p>\n<h1 id=\"Command-Properties\"><a href=\"#Command-Properties\" class=\"headerlink\" title=\"Command Properties\"></a>Command Properties</h1><h2 id=\"Execution相关的属性的配置：\"><a href=\"#Execution相关的属性的配置：\" class=\"headerlink\" title=\"Execution相关的属性的配置：\"></a>Execution相关的属性的配置：</h2><ul>\n<li><p>hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore</p>\n<ul>\n<li>thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用</li>\n<li>semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求</li>\n</ul>\n</li>\n<li><p>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms</p>\n</li>\n<li>hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true</li>\n<li>hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true</li>\n<li>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。<br>semaphore应该占整个容器（tomcat）的线程池的一小部分。</li>\n</ul>\n<h2 id=\"Fallback相关的属性\"><a href=\"#Fallback相关的属性\" class=\"headerlink\" title=\"Fallback相关的属性\"></a>Fallback相关的属性</h2><p>这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略</p>\n<ul>\n<li>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10</li>\n<li>hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true</li>\n</ul>\n<h2 id=\"Circuit-Breaker相关的属性\"><a href=\"#Circuit-Breaker相关的属性\" class=\"headerlink\" title=\"Circuit Breaker相关的属性\"></a>Circuit Breaker相关的属性</h2><ul>\n<li>hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true</li>\n<li>hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20</li>\n<li>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000</li>\n<li>hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率&gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50</li>\n<li>hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false</li>\n<li>hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage</li>\n</ul>\n<h2 id=\"Metrics相关参数\"><a href=\"#Metrics相关参数\" class=\"headerlink\" title=\"Metrics相关参数\"></a>Metrics相关参数</h2><ul>\n<li>hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000</li>\n<li>hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10</li>\n<li>hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true</li>\n<li>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000</li>\n<li>hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6</li>\n<li>hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100</li>\n<li>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms</li>\n</ul>\n<h2 id=\"Request-Context-相关参数\"><a href=\"#Request-Context-相关参数\" class=\"headerlink\" title=\"Request Context 相关参数\"></a>Request Context 相关参数</h2><p>hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存<br>hystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true</p>\n<h1 id=\"Collapser-Properties-相关参数\"><a href=\"#Collapser-Properties-相关参数\" class=\"headerlink\" title=\"Collapser Properties 相关参数\"></a>Collapser Properties 相关参数</h1><p>hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE<br>hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10<br>hystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true</p>\n<h1 id=\"ThreadPool-相关参数\"><a href=\"#ThreadPool-相关参数\" class=\"headerlink\" title=\"ThreadPool 相关参数\"></a>ThreadPool 相关参数</h1><p>线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：<br>requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room<br>每秒最大支撑的请求数 <em> (99%平均响应时间 + 缓存值)<br>比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：<br> 1000 </em>（0.060+0.012）</p>\n<p>基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。<br>当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务</p>\n<ul>\n<li>hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10</li>\n<li>hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。</li>\n<li>hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用</li>\n<li>hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（<a href=\"https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1\">https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1</a>.</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10</li>\n</ul>\n"},{"title":"Hystrix简介","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png","date":"2016-03-09T01:22:47.000Z","keywords":"hystrix","description":"Hystrix简介","_content":"\n## 失败回退降级模式\n失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。\n\n* 快速失败Fail Fast\n\t* 如果业务异常，就抛出一个异常\n* 静默失败Fail Silent\n\t* 失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等\n* Fallback: Static\n\t* 失败时，返回默认值来替代引起失败的原因\n* Fallback: Stubbed\n\t* 返回替代值，还没理解\n* Fallback: Cache via Network\n\t* 当后端服务失败时，从网络缓存获取返回值\n* Primary + Secondary with Fallback\n\t* 故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式\n* Client Doesn’t Perform Network Access\n\t* \n* Get-Set-Get with Request Cache Invalidation","source":"_posts/hystrix/Hystrix降级模式总结.md","raw":"---\ntitle: Hystrix简介\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png'\ndate: 2016-03-09 09:22:47\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\nkeywords: hystrix\ndescription: Hystrix简介\n---\n\n## 失败回退降级模式\n失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。\n\n* 快速失败Fail Fast\n\t* 如果业务异常，就抛出一个异常\n* 静默失败Fail Silent\n\t* 失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等\n* Fallback: Static\n\t* 失败时，返回默认值来替代引起失败的原因\n* Fallback: Stubbed\n\t* 返回替代值，还没理解\n* Fallback: Cache via Network\n\t* 当后端服务失败时，从网络缓存获取返回值\n* Primary + Secondary with Fallback\n\t* 故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式\n* Client Doesn’t Perform Network Access\n\t* \n* Get-Set-Get with Request Cache Invalidation","slug":"hystrix/Hystrix降级模式总结","published":1,"updated":"2016-03-21T12:46:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxkj000clginxqcgyfj9","content":"<h2 id=\"失败回退降级模式\"><a href=\"#失败回退降级模式\" class=\"headerlink\" title=\"失败回退降级模式\"></a>失败回退降级模式</h2><p>失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。</p>\n<ul>\n<li>快速失败Fail Fast<ul>\n<li>如果业务异常，就抛出一个异常</li>\n</ul>\n</li>\n<li>静默失败Fail Silent<ul>\n<li>失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等</li>\n</ul>\n</li>\n<li>Fallback: Static<ul>\n<li>失败时，返回默认值来替代引起失败的原因</li>\n</ul>\n</li>\n<li>Fallback: Stubbed<ul>\n<li>返回替代值，还没理解</li>\n</ul>\n</li>\n<li>Fallback: Cache via Network<ul>\n<li>当后端服务失败时，从网络缓存获取返回值</li>\n</ul>\n</li>\n<li>Primary + Secondary with Fallback<ul>\n<li>故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式</li>\n</ul>\n</li>\n<li>Client Doesn’t Perform Network Access<br>  * </li>\n<li>Get-Set-Get with Request Cache Invalidation</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"失败回退降级模式\"><a href=\"#失败回退降级模式\" class=\"headerlink\" title=\"失败回退降级模式\"></a>失败回退降级模式</h2><p>失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。</p>\n<ul>\n<li>快速失败Fail Fast<ul>\n<li>如果业务异常，就抛出一个异常</li>\n</ul>\n</li>\n<li>静默失败Fail Silent<ul>\n<li>失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等</li>\n</ul>\n</li>\n<li>Fallback: Static<ul>\n<li>失败时，返回默认值来替代引起失败的原因</li>\n</ul>\n</li>\n<li>Fallback: Stubbed<ul>\n<li>返回替代值，还没理解</li>\n</ul>\n</li>\n<li>Fallback: Cache via Network<ul>\n<li>当后端服务失败时，从网络缓存获取返回值</li>\n</ul>\n</li>\n<li>Primary + Secondary with Fallback<ul>\n<li>故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式</li>\n</ul>\n</li>\n<li>Client Doesn’t Perform Network Access<br>  * </li>\n<li>Get-Set-Get with Request Cache Invalidation</li>\n</ul>\n"},{"title":"怎样使用Hystrix","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo.png","date":"2016-03-17T11:22:47.000Z","keywords":null,"description":null,"_content":"\n\n\n## Contents\n\n1. <a href=\"#Hello-World\">&ldquo;Hello World!&rdquo;</a>\n1. <a href=\"#Synchronous-Execution\">Synchronous Execution</a>\n1. <a href=\"#Asynchronous-Execution\">Asynchronous Execution</a>\n1. <a href=\"#Reactive-Execution\">Reactive Execution</a>\n1. <a href=\"#Reactive-Commands\">Reactive Commands</a>\n1. <a href=\"#Fallback\">Fallback</a>\n1. <a href=\"#ErrorPropagation\">Error Propagation</a>\n1. <a href=\"#CommandName\">Command Name</a>\n1. <a href=\"#CommandGroup\">Command Group</a>\n1. <a href=\"#CommandThreadPool\">Command Thread-Pool</a>\n1. <a href=\"#Caching\">Request Cache</a>\n1. <a href=\"#Collapsing\">Request Collapsing</a>\n1. <a href=\"#RequestContextSetup\">Request Context Setup</a>\n1. <a href=\"#Common-Patterns\">Common Patterns:</a>\n  1. <a href=\"#Common-Patterns-FailFast\">Fail Fast</a>\n  1. <a href=\"#Common-Patterns-FailSilent\">Fail Silent</a>\n  1. <a href=\"#Common-Patterns-FallbackStatic\">Fallback: Static</a>\n  1. <a href=\"#Common-Patterns-FallbackStubbed\">Fallback: Stubbed</a>\n  1. <a href=\"#Common-Patterns-FallbackCacheViaNetwork\">Fallback: Cache via Network</a>\n  1. <a href=\"#Common-Patterns-PrimarySecondaryWithFallback\">Primary + Secondary with Fallback</a>\n  1. <a href=\"#Common-Patterns-Sempahore\">Client Doesn&#8217;t Perform Network Access</a>\n  1. <a href=\"#Common-Patterns-GetSetGet\">Get-Set-Get with Request Cache Invalidation</a>\n1. <a href=\"#MigratingLibrary\">Migrating a Library to Hystrix</a>\n\n<a name='Hello-World'/>\n## Hello World!\n\n实现一个[`HystrixCommand`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommand.html)最简单的&ldquo;Hello World&rdquo;例子：\n\n```java\npublic class CommandHelloWorld extends HystrixCommand<String> {\n\n    private final String name;\n\n    public CommandHelloWorld(String name) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.name = name;\n    }\n\n    @Override\n    protected String run() {\n        // a real example would do work like a network call here\n        return \"Hello \" + name + \"!\";\n    }\n}\n```\n  \n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandHelloWorld.java)\n\n#### 等同使用`HystrixObservableCommand`\n \n和&ldquo;Hello World&rdquo;等同的实现，用[`HystrixObservableCommand`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixObservableCommand.html) 替代`HystrixCommand`，并包含一个overriding `construct`方法。\n\n```java\npublic class CommandHelloWorld extends HystrixObservableCommand<String> {\n\n    private final String name;\n\n    public CommandHelloWorld(String name) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.name = name;\n    }\n\n    @Override\n    protected Observable<String> construct() {\n        return Observable.create(new Observable.OnSubscribe<String>() {\n            @Override\n            public void call(Subscriber<? super String> observer) {\n                try {\n                    if (!observer.isUnsubscribed()) {\n                        // a real example would do work like a network call here\n                        observer.onNext(\"Hello\");\n                        observer.onNext(name + \"!\");\n                        observer.onCompleted();\n                    }\n                } catch (Exception e) {\n                    observer.onError(e);\n                }\n            }\n         } );\n    }\n}\n```\n\n<a name='Synchronous-Execution'/>\n## Synchronous Execution同步执行\n\n\n用[`execute()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#execute\\(\\))方法同步执行一个`HystrixCommand`，如下例子：\n\n```java\nString s = new CommandHelloWorld(\"World\").execute();\n```\n \n单元测试执行和assert的例子：\n\n```java\n        @Test\n        public void testSynchronous() {\n            assertEquals(\"Hello World!\", new CommandHelloWorld(\"World\").execute());\n            assertEquals(\"Hello Bob!\", new CommandHelloWorld(\"Bob\").execute());\n        }\n```\n\n#### 等同使用`HystrixObservableCommand`  \n\n`HystrixObservableCommand` 没有`execute`方法，但如果知道`Observable`总是只生产一个单值，就使用`Observable`的`.toBlocking().toFuture().get()` 可以模仿`execute`行为。\n\n\n<a name='Asynchronous-Execution'/>\n## Asynchronous Execution\n\n\n用[`queue()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#queue\\(\\)) 方法异步执行`HystrixCommand`，例子如下：\n\n```java\nFuture<String> fs = new CommandHelloWorld(\"World\").queue();\n```\n\n 可以使用Future来获取command执行结果：\n\n```java\nString s = fs.get();\n```\n\n 单元测试例子：\n\n```java\n        @Test\n        public void testAsynchronous1() throws Exception {\n            assertEquals(\"Hello World!\", new CommandHelloWorld(\"World\").queue().get());\n            assertEquals(\"Hello Bob!\", new CommandHelloWorld(\"Bob\").queue().get());\n        }\n\n        @Test\n        public void testAsynchronous2() throws Exception {\n\n            Future<String> fWorld = new CommandHelloWorld(\"World\").queue();\n            Future<String> fBob = new CommandHelloWorld(\"Bob\").queue();\n\n            assertEquals(\"Hello World!\", fWorld.get());\n            assertEquals(\"Hello Bob!\", fBob.get());\n        }\n```\n\n下面的使用方式是等同的：\n\n```java\nString s1 = new CommandHelloWorld(\"World\").execute();\nString s2 = new CommandHelloWorld(\"World\").queue().get();\n```\n\n#### 等同使用`HystrixObservableCommand`\n\nThere is no simple equivalent to `queue` for a `HystrixObservableCommand`, but if you know that the `Observable` produced by such a command must always produce only a single value, you can mimic the behavior of `queue` by applying the RxJava operators `.toBlocking().toFuture()` to the `Observable`.\n\n\n<a name='Reactive-Execution'/>\n## Reactive Execution\n\nYou can also observe the results of a `HystrixCommand` as an `Observable` by using one of the following methods:\n* [`observe()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#observe\\(\\)) &mdash; returns a &ldquo;hot&rdquo; Observable that executes the command immediately, though because the Observable is filtered through a `ReplaySubject` you are not in danger of losing any items that it emits before you have a chance to subscribe\n* [`toObservable()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#toObservable\\(\\)) &mdash; returns a &ldquo;cold&rdquo; Observable that won&#8217;t execute the command and begin emitting its results until you subscribe to the Observable\n\n```java\nObservable<String> ho = new CommandHelloWorld(\"World\").observe();\n// or Observable<String> co = new CommandHelloWorld(\"World\").toObservable();\n```\n\nYou then retrieve the value of the command by subscribing to the Observable:\n\n```java\nho.subscribe(new Action1<String>() {\n\n    @Override\n    public void call(String s) {\n         // value emitted here\n    }\n\n});\n```\n\nThe following unit tests demonstrate the behavior:\n\n```java\n@Test\npublic void testObservable() throws Exception {\n\n    Observable<String> fWorld = new CommandHelloWorld(\"World\").observe();\n    Observable<String> fBob = new CommandHelloWorld(\"Bob\").observe();\n\n    // blocking\n    assertEquals(\"Hello World!\", fWorld.toBlockingObservable().single());\n    assertEquals(\"Hello Bob!\", fBob.toBlockingObservable().single());\n\n    // non-blocking \n    // - this is a verbose anonymous inner-class approach and doesn't do assertions\n    fWorld.subscribe(new Observer<String>() {\n\n        @Override\n        public void onCompleted() {\n            // nothing needed here\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            e.printStackTrace();\n        }\n\n        @Override\n        public void onNext(String v) {\n            System.out.println(\"onNext: \" + v);\n        }\n\n    });\n\n    // non-blocking\n    // - also verbose anonymous inner-class\n    // - ignore errors and onCompleted signal\n    fBob.subscribe(new Action1<String>() {\n\n        @Override\n        public void call(String v) {\n            System.out.println(\"onNext: \" + v);\n        }\n\n    });\n}\n```\n\nUsing Java 8 lambdas/closures is more compact; it would look like this:\n\n```java\n    fWorld.subscribe((v) -> {\n        System.out.println(\"onNext: \" + v);\n    })\n    \n    // - or while also including error handling\n    \n    fWorld.subscribe((v) -> {\n        System.out.println(\"onNext: \" + v);\n    }, (exception) -> {\n        exception.printStackTrace();\n    })\n```\n\nMore information about Observable can be found at http://reactivex.io/documentation/observable.html\n\n<a name='Reactive-Commands' />\n## Reactive Commands\n\nRather than converting a `HystrixCommand` into an `Observable` using the methods described above, you can also create a `HystrixObservableCommand` that is a specialized version of `HystrixCommand` meant to wrap Observables. A `HystrixObservableCommand` is capable of wrapping Observables that emit multiple items, whereas ordinary `HystrixCommands`, even when converted into Observables, will never emit more than one item.\n\nIn such a case, instead of overriding the `run` method with your command logic (as you would with an ordinary `HystrixCommand`), you would override the `construct` method so that it returns the Observable you intend to wrap.\n\nTo obtain an Observable representation of the `HystrixObservableCommand`, use one of the following two methods:\n* [`observe()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#observe\\(\\)) &mdash; returns a &ldquo;hot&rdquo; Observable that subscribes to the underlying Observable immediately, though because it is filtered through a `ReplaySubject` you are not in danger of losing any items that it emits before you have a chance to subscribe to the resulting Observable\n* [`toObservable()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#toObservable\\(\\)) &mdash; returns a &ldquo;cold&rdquo; Observable that won&#8217;t subscribe to the underlying Observable until you subscribe to the resulting Observable\n\n<a name='Fallback'/>\n## Fallback\n\nYou can support graceful degradation in a Hystrix command by adding a fallback method that Hystrix will call to obtain a default value or values in case the main command fails.  You will want to implement a fallback for most Hystrix commands that might conceivably fail, with a couple of exceptions:\n\n1. a command that performs a write operation\n  * If your Hystrix command is designed to do a write operation rather than to return a value (such a command might normally return a `void` in the case of a `HystrixCommand` or an empty Observable in the case of a `HystrixObservableCommand`), there isn&#8217;t much point in implementing a fallback. If the write fails, you probably want the failure to propagate back to the caller.\n1. batch systems/offline compute\n   * If your Hystrix command is filling up a cache, or generating a report, or doing any sort of offline computation, it&#8217;s usually more appropriate to propagate the error back to the caller who can then retry the command later, rather than to send the caller a silently-degraded response.\n\nWhether or not your command has a fallback, all of the usual Hystrix state and circuit-breaker state/metrics are updated to indicate the command failure.\n\nIn an ordinary `HystrixCommand` you implement a fallback by means of a [`getFallback()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback\\(\\)) implementation. Hystrix will execute this fallback for all types of failure such as `run()` failure, timeout, thread pool or semaphore rejection, and circuit-breaker short-circuiting. The following example includes such a fallback:\n\n```java\npublic class CommandHelloFailure extends HystrixCommand<String> {\n\n    private final String name;\n\n    public CommandHelloFailure(String name) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.name = name;\n    }\n\n    @Override\n    protected String run() {\n        throw new RuntimeException(\"this command always fails\");\n    }\n\n    @Override\n    protected String getFallback() {\n        return \"Hello Failure \" + name + \"!\";\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandHelloFailure.java)\n\nThis command&#8217;s `run()` method will fail on every execution. However, the caller will always receive the value returned by the command&#8217;s `getFallback()` method instead of receiving an exception:\n\n```java\n    @Test\n    public void testSynchronous() {\n        assertEquals(\"Hello Failure World!\", new CommandHelloFailure(\"World\").execute());\n        assertEquals(\"Hello Failure Bob!\", new CommandHelloFailure(\"Bob\").execute());\n    }\n```\n\n#### `HystrixObservableCommand` Equivalent\n\nFor a `HystrixObservableCommand` you instead may override the `resumeWithFallback` method so that it returns a second `Observable` that will take over from the primary `Observable` if it fails. Note that because an `Observable` may fail after having already emitted one or more items, your fallback should not assume that it will be emitting the only values that the observer will see.\n\nInternally, Hystrix uses the RxJava [`onErrorResumeNext`](http://reactivex.io/documentation/operators/catch.html) operator to seamlessly transition between the primary and fallback `Observable` in case of an error.\n\n<a name='ErrorPropagation'/>\n## Error Propagation\n\nAll exceptions thrown from the `run()` method except for [`HystrixBadRequestException`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/exception/HystrixBadRequestException.html) count as failures and trigger `getFallback()` and circuit-breaker logic.\n\nYou can wrap the exception that you would like to throw in `HystrixBadRequestException` and retrieve it via `getCause()`. The `HystrixBadRequestException` is intended for use cases such as reporting illegal arguments or non-system failures that should not count against the failure metrics and should not trigger fallback logic.\n\n#### `HystrixObservableCommand` Equivalent\n\nIn the case of a `HystrixObservableCommand`, non-recoverable errors are returned via `onError` notifications from the resulting `Observable`, and fallbacks are accomplished by falling back to a second Observable that Hystrix obtains through the `resumeWithFallback` method that you implement.\n\n<a name='CommandName'/>\n## Command Name\n\nA command name is, by default, derived from the class name:\n\n```java\ngetClass().getSimpleName();\n```\n\nTo explicitly define the name pass it in via the `HystrixCommand` or `HystrixObservableCommand` constructor:\n\n```java\n    public CommandHelloWorld(String name) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey(\"HelloWorld\")));\n        this.name = name;\n    }\n```\n\nTo save a Setter allocation per command allocation, you may also cache the Setter like so:\n\n```java\n    private static final Setter cachedSetter = \n        Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n            .andCommandKey(HystrixCommandKey.Factory.asKey(\"HelloWorld\"));    \n\n    public CommandHelloWorld(String name) {\n        super(cachedSetter);\n        this.name = name;\n    }\n\n```\n\n[`HystrixCommandKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.html) is an interface and can be implemented as an enum or regular class, but it also has the helper [`Factory`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.Factory.html) class to construct and intern instances such as:\n\n```java\nHystrixCommandKey.Factory.asKey(\"HelloWorld\")\n```\n\n<a name='CommandGroup'/>\n## Command Group\n\nHystrix uses the command group key to group together commands such as for reporting, alerting, dashboards, or team/library ownership.\n\nBy default Hystrix uses this to define the command thread-pool unless a separate one is defined.\n\n[`HystrixCommandGroupKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.html) is an interface and can be implemented as an enum or regular class, but it also has the helper [`Factory`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.Factory.html) class to construct and intern instances such as:\n\n```java\nHystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\")\n```\n\n<a name='CommandThreadPool'/>\n## Command Thread-Pool\n\nThe thread-pool key represents a [`HystrixThreadPool`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPool.html) for monitoring, metrics publishing, caching, and other such uses. A `HystrixCommand` is associated with a single `HystrixThreadPool` as retrieved by the [`HystrixThreadPoolKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.html) injected into it, or it defaults to one created using the `HystrixCommandGroupKey` it is created with.\n\nTo explicitly define the name pass it in via the `HystrixCommand` or `HystrixObservableCommand` constructor:\n\n```java\n    public CommandHelloWorld(String name) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey(\"HelloWorld\"))\n                .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\"HelloWorldPool\")));\n        this.name = name;\n    }\n```\n\n[`HystrixThreadPoolKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.html) is an interface and can be implemented as an enum or regular class, but it also has the helper [`Factory`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.Factory.html) class to construct and intern instances such as:\n\n```java\nHystrixThreadPoolKey.Factory.asKey(\"HelloWorldPool\")\n```\n\nThe reason why you might use `HystrixThreadPoolKey` instead of just a different `HystrixCommandGroupKey` is that multiple commands may belong to the same &ldquo;group&rdquo; of ownership or logical functionality, but certain commands may need to be isolated from each other.\n\nHere is a simple example:\n\n* two commands used to access Video metadata\n* group name is &ldquo;VideoMetadata&rdquo;\n* command A goes against resource #1\n* command B goes against resource #2\n\nIf command A becomes latent and saturates its thread-pool it should not prevent command B from executing requests since they each hit different back-end resources.\n\nThus, we logically want these commands grouped together but want them isolated differently and would use `HystrixThreadPoolKey` to give each of them a different thread-pool.\n\n<a name='Caching'/>\n## Request Cache\n\nYou enable request caching by implementing the [`getCacheKey()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getCacheKey\\(\\)) method on a `HystrixCommand` or `HystrixObservableCommand` object as follows:\n\n```java\npublic class CommandUsingRequestCache extends HystrixCommand<Boolean> {\n\n    private final int value;\n\n    protected CommandUsingRequestCache(int value) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.value = value;\n    }\n\n    @Override\n    protected Boolean run() {\n        return value == 0 || value % 2 == 0;\n    }\n\n    @Override\n    protected String getCacheKey() {\n        return String.valueOf(value);\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingRequestCache.java)\n\nSince this depends on request context we must initialize the [`HystrixRequestContext`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html).\n\nIn a simple unit test you could do this as follows:\n\n```java\n        @Test\n        public void testWithoutCacheHits() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                assertTrue(new CommandUsingRequestCache(2).execute());\n                assertFalse(new CommandUsingRequestCache(1).execute());\n                assertTrue(new CommandUsingRequestCache(0).execute());\n                assertTrue(new CommandUsingRequestCache(58672).execute());\n            } finally {\n                context.shutdown();\n            }\n        }\n```\n\nTypically this context will be initialized and shut down via a `ServletFilter` that wraps a user request or some other lifecycle hook.\n\nThe following is an example that shows how commands retrieve their values from the cache (and how you can query an object to know whether its value came from the cache) within a request context:\n\n```java\n        @Test\n        public void testWithCacheHits() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                CommandUsingRequestCache command2a = new CommandUsingRequestCache(2);\n                CommandUsingRequestCache command2b = new CommandUsingRequestCache(2);\n\n                assertTrue(command2a.execute());\n                // this is the first time we've executed this command with\n                // the value of \"2\" so it should not be from cache\n                assertFalse(command2a.isResponseFromCache());\n\n                assertTrue(command2b.execute());\n                // this is the second time we've executed this command with\n                // the same value so it should return from cache\n                assertTrue(command2b.isResponseFromCache());\n            } finally {\n                context.shutdown();\n            }\n\n            // start a new request context\n            context = HystrixRequestContext.initializeContext();\n            try {\n                CommandUsingRequestCache command3b = new CommandUsingRequestCache(2);\n                assertTrue(command3b.execute());\n                // this is a new request context so this \n                // should not come from cache\n                assertFalse(command3b.isResponseFromCache());\n            } finally {\n                context.shutdown();\n            }\n        }\n```\n\n<a name='Collapsing'/>\n## Request Collapsing\n\nRequest collapsing enables multiple requests to be batched into a single `HystrixCommand` instance execution.\n\nA collapser can use the batch size and the elapsed time since the creation of the batch as triggers for executing a batch.\n\nThere are 2 styles of request-collapsing supported by Hystrix: request-scoped and globally-scoped.  This is configured at collapser construction, and defaulted to request-scoped.  \n\nA request-scoped collapser collects a batch per `HystrixRequestContext`, while a globally-scoped collapser collects a batch across multiple `HystrixRequestContext`s.  As a result, if your downstream dependencies cannot handle multiple `HystrixRequestContext`s in a single command invocation, request-scoped collapsing is the proper choice.  \n\nAt Netflix, we exclusively use request-scoped collapsers because all current systems have been built on the assumption that a single `HystrixRequestContext` will be used in each command.  Since the batches are per-request only, collapsing is effective when commands occur in parallel with different arguments in the same request.\n\nFollowing is a simple example of how to implement a request-scoped [`HystrixCollapser`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCollapser.html):\n\n```java\npublic class CommandCollapserGetValueForKey extends HystrixCollapser<List<String>, String, Integer> {\n\n    private final Integer key;\n\n    public CommandCollapserGetValueForKey(Integer key) {\n        this.key = key;\n    }\n\n    @Override\n    public Integer getRequestArgument() {\n        return key;\n    }\n\n    @Override\n    protected HystrixCommand<List<String>> createCommand(final Collection<CollapsedRequest<String, Integer>> requests) {\n        return new BatchCommand(requests);\n    }\n\n    @Override\n    protected void mapResponseToRequests(List<String> batchResponse, Collection<CollapsedRequest<String, Integer>> requests) {\n        int count = 0;\n        for (CollapsedRequest<String, Integer> request : requests) {\n            request.setResponse(batchResponse.get(count++));\n        }\n    }\n\n    private static final class BatchCommand extends HystrixCommand<List<String>> {\n        private final Collection<CollapsedRequest<String, Integer>> requests;\n\n        private BatchCommand(Collection<CollapsedRequest<String, Integer>> requests) {\n                super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n                    .andCommandKey(HystrixCommandKey.Factory.asKey(\"GetValueForKey\")));\n            this.requests = requests;\n        }\n\n        @Override\n        protected List<String> run() {\n            ArrayList<String> response = new ArrayList<String>();\n            for (CollapsedRequest<String, Integer> request : requests) {\n                // artificial response for each argument received in the batch\n                response.add(\"ValueForKey: \" + request.getArgument());\n            }\n            return response;\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandCollapserGetValueForKey.java)\n\nThe following unit test shows how to use a collapser to automatically batch four executions of `CommandCollapserGetValueForKey` into a single `HystrixCommand` execution:\n\n```java\n@Test\npublic void testCollapser() throws Exception {\n    HystrixRequestContext context = HystrixRequestContext.initializeContext();\n    try {\n        Future<String> f1 = new CommandCollapserGetValueForKey(1).queue();\n        Future<String> f2 = new CommandCollapserGetValueForKey(2).queue();\n        Future<String> f3 = new CommandCollapserGetValueForKey(3).queue();\n        Future<String> f4 = new CommandCollapserGetValueForKey(4).queue();\n\n        assertEquals(\"ValueForKey: 1\", f1.get());\n        assertEquals(\"ValueForKey: 2\", f2.get());\n        assertEquals(\"ValueForKey: 3\", f3.get());\n        assertEquals(\"ValueForKey: 4\", f4.get());\n\n        // assert that the batch command 'GetValueForKey' was in fact\n        // executed and that it executed only once\n        assertEquals(1, HystrixRequestLog.getCurrentRequest().getExecutedCommands().size());\n        HystrixCommand<?> command = HystrixRequestLog.getCurrentRequest().getExecutedCommands().toArray(new HystrixCommand<?>[1])[0];\n        // assert the command is the one we're expecting\n        assertEquals(\"GetValueForKey\", command.getCommandKey().name());\n        // confirm that it was a COLLAPSED command execution\n        assertTrue(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));\n        // and that it was successful\n        assertTrue(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));\n    } finally {\n        context.shutdown();\n    }\n}\n```\n\n\n<a name='RequestContextSetup'/>\n## Request Context Setup\n\nTo use request-scoped features (request caching, request collapsing, request log) you must manage the [`HystrixRequestContext`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html) lifecycle (or implement an alternative [`HystrixConcurrencyStrategy`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.html)).\n\nThis means that you must execute the following before a request:\n\n```java\nHystrixRequestContext context = HystrixRequestContext.initializeContext();\n```\n\nand then this at the end of the request:\n\n```java\ncontext.shutdown();\n```\n\nIn a standard Java web application, you can use a Servlet Filter to initialize this lifecycle by implementing a filter similar to this:\n\n```java\npublic class HystrixRequestContextServletFilter implements Filter {\n\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) \n     throws IOException, ServletException {\n        HystrixRequestContext context = HystrixRequestContext.initializeContext();\n        try {\n            chain.doFilter(request, response);\n        } finally {\n            context.shutdown();\n        }\n    }\n}\n```\n\nYou could enable the filter for all incoming traffic by adding a section to the `web.xml` as follows:\n\n```\n    <filter>\n      <display-name>HystrixRequestContextServletFilter</display-name>\n      <filter-name>HystrixRequestContextServletFilter</filter-name>\n      <filter-class>com.netflix.hystrix.contrib.requestservlet.HystrixRequestContextServletFilter</filter-class>\n    </filter>\n    <filter-mapping>\n      <filter-name>HystrixRequestContextServletFilter</filter-name>\n      <url-pattern>/*</url-pattern>\n   </filter-mapping>\n```\n\n<a name='Common-Patterns'/>\n## Common Patterns\n\nIn the following sections are common uses and patterns of use for `HystrixCommand` and `HystrixObservableCommand`.\n\n<a name='Common-Patterns-FailFast'/>\n### Fail Fast\n\nThe most basic execution is one that does a single thing and has no fallback behavior. It will throw an exception if any type of failure occurs.\n\n```java\npublic class CommandThatFailsFast extends HystrixCommand<String> {\n\n    private final boolean throwException;\n\n    public CommandThatFailsFast(boolean throwException) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.throwException = throwException;\n    }\n\n    @Override\n    protected String run() {\n        if (throwException) {\n            throw new RuntimeException(\"failure from CommandThatFailsFast\");\n        } else {\n            return \"success\";\n        }\n    }\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandThatFailsFast.java)\n\nThese unit tests show how it behaves:\n\n```java\n@Test\npublic void testSuccess() {\n    assertEquals(\"success\", new CommandThatFailsFast(false).execute());\n}\n\n@Test\npublic void testFailure() {\n    try {\n        new CommandThatFailsFast(true).execute();\n        fail(\"we should have thrown an exception\");\n    } catch (HystrixRuntimeException e) {\n        assertEquals(\"failure from CommandThatFailsFast\", e.getCause().getMessage());\n        e.printStackTrace();\n    }\n}\n```\n#### `HystrixObservableCommand` Equivalent\nThe equivalent Fail-Fast solution for a `HystrixObservableCommand` would involve overriding the `resumeWithFallback` method as follows:\n\n```java\n    @Override\n    protected Observable<String> resumeWithFallback() {\n        if (throwException) {\n            return Observable.error(new Throwable(\"failure from CommandThatFailsFast\"));\n        } else {\n            return Observable.just(\"success\");\n        }\n    }\n```\n\n<a name='Common-Patterns-FailSilent'/>\n### Fail Silent\n\nFailing silently is the equivalent of returning an empty response or removing functionality. It can be done by returning `null`, an empty Map, empty List, or other such responses.\n\nYou do this by implementing a [`getFallback()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback\\(\\)) method on the `HystrixCommand` instance:\n\n[[images/fallback-640.png]]\n\n```java\npublic class CommandThatFailsSilently extends HystrixCommand<String> {\n\n    private final boolean throwException;\n\n    public CommandThatFailsSilently(boolean throwException) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.throwException = throwException;\n    }\n\n    @Override\n    protected String run() {\n        if (throwException) {\n            throw new RuntimeException(\"failure from CommandThatFailsFast\");\n        } else {\n            return \"success\";\n        }\n    }\n\n    @Override\n    protected String getFallback() {\n        return null;\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandThatFailsSilently.java)\n\n```java\n@Test\npublic void testSuccess() {\n    assertEquals(\"success\", new CommandThatFailsSilently(false).execute());\n}\n\n@Test\npublic void testFailure() {\n    try {\n        assertEquals(null, new CommandThatFailsSilently(true).execute());\n    } catch (HystrixRuntimeException e) {\n        fail(\"we should not get an exception as we fail silently with a fallback\");\n    }\n}\n```\n\nAnother implementation that returns an empty list would look like:\n\n```java\n    @Override\n    protected List<String> getFallback() {\n        return Collections.emptyList();\n    }\n```\n\n#### `HystrixObservableCommand` Equivalent\nThe equivalent Fail-Silently solution for a `HystrixObservableCommand` would involve overriding the [`resumeWithFallback()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#resumeWithFallback\\(\\)) method as follows:\n\n```java\n    @Override\n    protected Observable<String> resumeWithFallback() {\n        return Observable.empty();\n    }\n```\n\n<a name='Common-Patterns-FallbackStatic'/>\n### Fallback: Static\n\nFallbacks can return default values statically embedded in code. This doesn&#8217;t cause the feature or service to be removed in the way that &ldquo;fail silent&rdquo; often does, but instead causes default behavior to occur.\n\nFor example, if a command returns a true/false based on user credentials but the command execution fails, it can default to true:\n\n```java\n    @Override\n    protected Boolean getFallback() {\n        return true;\n    }\n```\n\n#### `HystrixObservableCommand` Equivalent\nThe equivalent Static solution for a `HystrixObservableCommand` would involve overriding the `resumeWithFallback` method as follows:\n\n```java\n    @Override\n    protected Observable<Boolean> resumeWithFallback() {\n        return Observable.just( true );\n    }\n```\n\n<a name='Common-Patterns-FallbackStubbed'/>\n### Fallback: Stubbed\n\nYou typically use a stubbed fallback when your command returns a compound object containing multiple fields, some of which can be determined from other request state while other fields are set to default values.\n\nExamples of places where you might find state appropriate to use in these stubbed values are:\n\n* cookies\n* request arguments and headers\n* responses from previous service requests prior to the current one failing\n\nYour fallback can retrieve stubbed values statically from the request scope, but typically it is recommended that they be injected at command instantiation time for use if they are needed such as this following example demonstrates in the way it treats the `countryCodeFromGeoLookup` field:\n\n```java\npublic class CommandWithStubbedFallback extends HystrixCommand<UserAccount> {\n\n    private final int customerId;\n    private final String countryCodeFromGeoLookup;\n\n    /**\n     * @param customerId\n     *            The customerID to retrieve UserAccount for\n     * @param countryCodeFromGeoLookup\n     *            The default country code from the HTTP request geo code lookup used for fallback.\n     */\n    protected CommandWithStubbedFallback(int customerId, String countryCodeFromGeoLookup) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.customerId = customerId;\n        this.countryCodeFromGeoLookup = countryCodeFromGeoLookup;\n    }\n\n    @Override\n    protected UserAccount run() {\n        // fetch UserAccount from remote service\n        //        return UserAccountClient.getAccount(customerId);\n        throw new RuntimeException(\"forcing failure for example\");\n    }\n\n    @Override\n    protected UserAccount getFallback() {\n        /**\n         * Return stubbed fallback with some static defaults, placeholders,\n         * and an injected value 'countryCodeFromGeoLookup' that we'll use\n         * instead of what we would have retrieved from the remote service.\n         */\n        return new UserAccount(customerId, \"Unknown Name\",\n                countryCodeFromGeoLookup, true, true, false);\n    }\n\n    public static class UserAccount {\n        private final int customerId;\n        private final String name;\n        private final String countryCode;\n        private final boolean isFeatureXPermitted;\n        private final boolean isFeatureYPermitted;\n        private final boolean isFeatureZPermitted;\n\n        UserAccount(int customerId, String name, String countryCode,\n                boolean isFeatureXPermitted,\n                boolean isFeatureYPermitted,\n                boolean isFeatureZPermitted) {\n            this.customerId = customerId;\n            this.name = name;\n            this.countryCode = countryCode;\n            this.isFeatureXPermitted = isFeatureXPermitted;\n            this.isFeatureYPermitted = isFeatureYPermitted;\n            this.isFeatureZPermitted = isFeatureZPermitted;\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandWithStubbedFallback.java)\n\nThe following unit test demonstrates its behavior:\n\n```java\n    @Test\n    public void test() {\n        CommandWithStubbedFallback command = new CommandWithStubbedFallback(1234, \"ca\");\n        UserAccount account = command.execute();\n        assertTrue(command.isFailedExecution());\n        assertTrue(command.isResponseFromFallback());\n        assertEquals(1234, account.customerId);\n        assertEquals(\"ca\", account.countryCode);\n        assertEquals(true, account.isFeatureXPermitted);\n        assertEquals(true, account.isFeatureYPermitted);\n        assertEquals(false, account.isFeatureZPermitted);\n    }\n```\n\n#### `HystrixObservableCommand` Equivalent\nThe equivalent Stubbed solution for a `HystrixObservableCommand` would involve overriding the `resumeWithFallback` method to return an `Observable` that emits the stub responses. A version equivalent to the previous example would look like this:\n\n```java\n@Override\nprotected Observable<Boolean> resumeWithFallback() {\n    return Observable.just( new UserAccount(customerId, \"Unknown Name\",\n                                            countryCodeFromGeoLookup, true, true, false) );\n}\n```\n\nBut if you are expecting to emit multiple items from your `Observable`, you may be more interested in generating stubs for only those items that the original `Observable` had not yet emitted before it failed. Here is a simple example to show how you might accomplish this &mdash; it keeps track of the last item emitted from the main `Observable` so that the fallback knows where to pick up to continue the sequence:\n\n```java\n@Override\nprotected Observable<Integer> construct() {\n    return Observable.just(1, 2, 3)\n            .concatWith(Observable.<Integer> error(new RuntimeException(\"forced error\")))\n            .doOnNext(new Action1<Integer>() {\n                @Override\n                public void call(Integer t1) {\n                    lastSeen = t1;\n                }\n                \n            })\n            .subscribeOn(Schedulers.computation());\n}\n\n@Override\nprotected Observable<Integer> resumeWithFallback() {\n    if (lastSeen < 4) {\n        return Observable.range(lastSeen + 1, 4 - lastSeen);\n    } else {\n        return Observable.empty();\n    }\n}\n```\n\n<a name='Common-Patterns-FallbackCacheViaNetwork'/>\n### Fallback: Cache via Network\n\nSometimes if a back-end service fails, a stale version of data can be retrieved from a cache service such as memcached.\n\nSince the fallback will go over the network it is another possible point of failure and so it also needs to be wrapped by a `HystrixCommand` or `HystrixObservableCommand`.\n\n[[images/fallback-via-command-640.png]]\n\nIt is important to execute the fallback command on a separate thread-pool, otherwise if the main command were to become latent and fill the thread-pool, this would prevent the fallback from running if the two commands share the same pool.\n\nThe following code shows how `CommandWithFallbackViaNetwork` executes `FallbackViaNetwork` in its `getFallback()` method.\n\nNote how if the fallback fails, it _also_ has a fallback which does the &ldquo;fail silent&rdquo; approach of returning `null`.\n\nTo configure the `FallbackViaNetwork` command to run on a different threadpool than the default `RemoteServiceX` derived from the [`HystrixCommandGroupKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.html), it injects `HystrixThreadPoolKey.Factory.asKey(\"RemoteServiceXFallback\")` into the constructor.\n\nThis means `CommandWithFallbackViaNetwork` will run on a thread-pool named `RemoteServiceX` and `FallbackViaNetwork` will run on a thread-pool named `RemoteServiceXFallback`.\n\n```java\npublic class CommandWithFallbackViaNetwork extends HystrixCommand<String> {\n    private final int id;\n\n    protected CommandWithFallbackViaNetwork(int id) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceX\"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey(\"GetValueCommand\")));\n        this.id = id;\n    }\n\n    @Override\n    protected String run() {\n        //        RemoteServiceXClient.getValue(id);\n        throw new RuntimeException(\"force failure for example\");\n    }\n\n    @Override\n    protected String getFallback() {\n        return new FallbackViaNetwork(id).execute();\n    }\n\n    private static class FallbackViaNetwork extends HystrixCommand<String> {\n        private final int id;\n\n        public FallbackViaNetwork(int id) {\n            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceX\"))\n                    .andCommandKey(HystrixCommandKey.Factory.asKey(\"GetValueFallbackCommand\"))\n                    // use a different threadpool for the fallback command\n                    // so saturating the RemoteServiceX pool won't prevent\n                    // fallbacks from executing\n                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\"RemoteServiceXFallback\")));\n            this.id = id;\n        }\n\n        @Override\n        protected String run() {\n            MemCacheClient.getValue(id);\n        }\n\n        @Override\n        protected String getFallback() {\n            // the fallback also failed\n            // so this fallback-of-a-fallback will \n            // fail silently and return null\n            return null;\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandWithFallbackViaNetwork.java)\n\n<a name='Common-Patterns-PrimarySecondaryWithFallback'/>\n### Primary + Secondary with Fallback\n\nSome systems have dual-mode behavior &mdash; primary and secondary, or primary and failover.\n\nSometimes the secondary or failover is considered a failure state and it is intended only for fallback; in those scenarios it would fit in the same pattern as &ldquo;Cache via Network&rdquo; described above.\n\nHowever, if flipping to the secondary system is common, such as a normal part of rolling out new code (sometimes this is part of how stateful systems handle code pushes) then every time the secondary system is used the primary will be in a failure state, tripping circuit breakers and firing alerts.\n\nThis is not the desired behavior, if for no other reason than to avoid the &ldquo;cry wolf&rdquo; fatigue that will cause alerts to be ignored when a real issue is occurring.\n\nSo in such a case the strategy is instead to treat the switching between primary and secondary as normal, healthy patterns and put a fa&ccedil;ade in front of them.\n\n[[images/primary-secondary-example-640.png]]\n\nThe primary and secondary `HystrixCommand` implementations are thread-isolated since they are doing network traffic and business logic. They may each have very different performance characteristics (often the secondary system is a static cache) so another benefit of separate commands for each is that they can be individually tuned.\n\nYou do not expose these two commands publicly but you instead hide them behind another `HystrixCommand` that is semaphore-isolated and that implements the conditional logic as to whether to invoke the primary or secondary command. If both primary and secondary fail then control switches to the fallback of the fa&ccedil;ade command itself.\n\nThe fa&ccedil;ade `HystrixCommand` can use semaphore-isolation since all of the work it is doing is going through two other `HystrixCommand`s that are already thread-isolated. It is unnecessary to have yet another layer of threading as long as the [`run()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run\\(\\)) method of the fa&ccedil;ade is not doing any other network calls, retry logic, or other &ldquo;error prone&rdquo; things.\n\n```java\npublic class CommandFacadeWithPrimarySecondary extends HystrixCommand<String> {\n\n    private final static DynamicBooleanProperty usePrimary = DynamicPropertyFactory.getInstance().getBooleanProperty(\"primarySecondary.usePrimary\", true);\n\n    private final int id;\n\n    public CommandFacadeWithPrimarySecondary(int id) {\n        super(Setter\n                .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"SystemX\"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey(\"PrimarySecondaryCommand\"))\n                .andCommandPropertiesDefaults(\n                        // we want to default to semaphore-isolation since this wraps\n                        // 2 others commands that are already thread isolated\n                        HystrixCommandProperties.Setter()\n                                .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));\n        this.id = id;\n    }\n\n    @Override\n    protected String run() {\n        if (usePrimary.get()) {\n            return new PrimaryCommand(id).execute();\n        } else {\n            return new SecondaryCommand(id).execute();\n        }\n    }\n\n    @Override\n    protected String getFallback() {\n        return \"static-fallback-\" + id;\n    }\n\n    @Override\n    protected String getCacheKey() {\n        return String.valueOf(id);\n    }\n\n    private static class PrimaryCommand extends HystrixCommand<String> {\n\n        private final int id;\n\n        private PrimaryCommand(int id) {\n            super(Setter\n                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"SystemX\"))\n                    .andCommandKey(HystrixCommandKey.Factory.asKey(\"PrimaryCommand\"))\n                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\"PrimaryCommand\"))\n                    .andCommandPropertiesDefaults(\n                            // we default to a 600ms timeout for primary\n                            HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(600)));\n            this.id = id;\n        }\n\n        @Override\n        protected String run() {\n            // perform expensive 'primary' service call\n            return \"responseFromPrimary-\" + id;\n        }\n\n    }\n\n    private static class SecondaryCommand extends HystrixCommand<String> {\n\n        private final int id;\n\n        private SecondaryCommand(int id) {\n            super(Setter\n                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"SystemX\"))\n                    .andCommandKey(HystrixCommandKey.Factory.asKey(\"SecondaryCommand\"))\n                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\"SecondaryCommand\"))\n                    .andCommandPropertiesDefaults(\n                            // we default to a 100ms timeout for secondary\n                            HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(100)));\n            this.id = id;\n        }\n\n        @Override\n        protected String run() {\n            // perform fast 'secondary' service call\n            return \"responseFromSecondary-\" + id;\n        }\n\n    }\n\n    public static class UnitTest {\n\n        @Test\n        public void testPrimary() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                ConfigurationManager.getConfigInstance().setProperty(\"primarySecondary.usePrimary\", true);\n                assertEquals(\"responseFromPrimary-20\", new CommandFacadeWithPrimarySecondary(20).execute());\n            } finally {\n                context.shutdown();\n                ConfigurationManager.getConfigInstance().clear();\n            }\n        }\n\n        @Test\n        public void testSecondary() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                ConfigurationManager.getConfigInstance().setProperty(\"primarySecondary.usePrimary\", false);\n                assertEquals(\"responseFromSecondary-20\", new CommandFacadeWithPrimarySecondary(20).execute());\n            } finally {\n                context.shutdown();\n                ConfigurationManager.getConfigInstance().clear();\n            }\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandFacadeWithPrimarySecondary.java)\n\n<a name='Common-Patterns-Semaphore'/>\n### Client Doesn't Perform Network Access\n\nWhen you wrap behavior that does not perform network access, but where latency is a concern or the threading overhead is unacceptable, you can set the [`executionIsolationStrategy`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.html#executionIsolationStrategy\\(\\)) property to [`ExecutionIsolationStrategy`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.ExecutionIsolationStrategy.html)`.SEMAPHORE` and Hystrix will use semaphore isolation instead.\n\nThe following shows how to set this property as the default for a command via code (you can also override it via dynamic properties at runtime).\n\n```java\npublic class CommandUsingSemaphoreIsolation extends HystrixCommand<String> {\n\n    private final int id;\n\n    public CommandUsingSemaphoreIsolation(int id) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n                // since we're doing an in-memory cache lookup we choose SEMAPHORE isolation\n                .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n                        .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));\n        this.id = id;\n    }\n\n    @Override\n    protected String run() {\n        // a real implementation would retrieve data from in memory data structure\n        return \"ValueFromHashMap_\" + id;\n    }\n\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingSemaphoreIsolation.java)\n\n<a name='Common-Patterns-GetSetGet'/>\n### Get-Set-Get with Request Cache Invalidation\n\nIf you are implementing a Get-Set-Get use case where the Get receives enough traffic that request caching is desired but sometimes a Set occurs on another command that should invalidate the cache within the same request, you can invalidate the cache by calling [`HystrixRequestCache.clear()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixRequestCache.html#clear\\(java.lang.String\\)).\n\nHere is an example implementation:\n\n```java\npublic class CommandUsingRequestCacheInvalidation {\n\n    /* represents a remote data store */\n    private static volatile String prefixStoredOnRemoteDataStore = \"ValueBeforeSet_\";\n\n    public static class GetterCommand extends HystrixCommand<String> {\n\n        private static final HystrixCommandKey GETTER_KEY = HystrixCommandKey.Factory.asKey(\"GetterCommand\");\n        private final int id;\n\n        public GetterCommand(int id) {\n            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"GetSetGet\"))\n                    .andCommandKey(GETTER_KEY));\n            this.id = id;\n        }\n\n        @Override\n        protected String run() {\n            return prefixStoredOnRemoteDataStore + id;\n        }\n\n        @Override\n        protected String getCacheKey() {\n            return String.valueOf(id);\n        }\n\n        /**\n         * Allow the cache to be flushed for this object.\n         * \n         * @param id\n         *            argument that would normally be passed to the command\n         */\n        public static void flushCache(int id) {\n            HystrixRequestCache.getInstance(GETTER_KEY,\n                    HystrixConcurrencyStrategyDefault.getInstance()).clear(String.valueOf(id));\n        }\n\n    }\n\n    public static class SetterCommand extends HystrixCommand<Void> {\n\n        private final int id;\n        private final String prefix;\n\n        public SetterCommand(int id, String prefix) {\n            super(HystrixCommandGroupKey.Factory.asKey(\"GetSetGet\"));\n            this.id = id;\n            this.prefix = prefix;\n        }\n\n        @Override\n        protected Void run() {\n            // persist the value against the datastore\n            prefixStoredOnRemoteDataStore = prefix;\n            // flush the cache\n            GetterCommand.flushCache(id);\n            // no return value\n            return null;\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingRequestCacheInvalidation.java)\n\nThe unit test that confirms the behavior is:\n\n```java\n        @Test\n        public void getGetSetGet() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                assertEquals(\"ValueBeforeSet_1\", new GetterCommand(1).execute());\n                GetterCommand commandAgainstCache = new GetterCommand(1);\n                assertEquals(\"ValueBeforeSet_1\", commandAgainstCache.execute());\n                // confirm it executed against cache the second time\n                assertTrue(commandAgainstCache.isResponseFromCache());\n                // set the new value\n                new SetterCommand(1, \"ValueAfterSet_\").execute();\n                // fetch it again\n                GetterCommand commandAfterSet = new GetterCommand(1);\n                // the getter should return with the new prefix, not the value from cache\n                assertFalse(commandAfterSet.isResponseFromCache());\n                assertEquals(\"ValueAfterSet_1\", commandAfterSet.execute());\n            } finally {\n                context.shutdown();\n            }\n        }\n    }\n```\n<a name='MigratingLibrary'/>\n## Migrating a Library to Hystrix\n\nWhen you are migrating an existing client library to use Hystrix, you should replace each of the &ldquo;service methods&rdquo; with a `HystrixCommand`.\n\nThe service methods should then forward calls to the `HystrixCommand` and not have any additional business logic in them.\n\nThus, before migration a service library may look like this:\n\n[[images/library-migration-to-hystrix-without-640.png]]\n\nAfter migrating, users of a library will be able to access the `HystrixCommand`s directly or indirectly via the service facade that delegates to the `HystrixCommand`s.\n\n[[images/library-migration-to-hystrix-with-640.png]]","source":"_posts/hystrix/怎样使用Hystrix.md","raw":"---\ntitle: 怎样使用Hystrix\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo.png'\ndate: 2016-03-17 19:22:47\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\nkeywords:\ndescription:\n---\n\n\n\n## Contents\n\n1. <a href=\"#Hello-World\">&ldquo;Hello World!&rdquo;</a>\n1. <a href=\"#Synchronous-Execution\">Synchronous Execution</a>\n1. <a href=\"#Asynchronous-Execution\">Asynchronous Execution</a>\n1. <a href=\"#Reactive-Execution\">Reactive Execution</a>\n1. <a href=\"#Reactive-Commands\">Reactive Commands</a>\n1. <a href=\"#Fallback\">Fallback</a>\n1. <a href=\"#ErrorPropagation\">Error Propagation</a>\n1. <a href=\"#CommandName\">Command Name</a>\n1. <a href=\"#CommandGroup\">Command Group</a>\n1. <a href=\"#CommandThreadPool\">Command Thread-Pool</a>\n1. <a href=\"#Caching\">Request Cache</a>\n1. <a href=\"#Collapsing\">Request Collapsing</a>\n1. <a href=\"#RequestContextSetup\">Request Context Setup</a>\n1. <a href=\"#Common-Patterns\">Common Patterns:</a>\n  1. <a href=\"#Common-Patterns-FailFast\">Fail Fast</a>\n  1. <a href=\"#Common-Patterns-FailSilent\">Fail Silent</a>\n  1. <a href=\"#Common-Patterns-FallbackStatic\">Fallback: Static</a>\n  1. <a href=\"#Common-Patterns-FallbackStubbed\">Fallback: Stubbed</a>\n  1. <a href=\"#Common-Patterns-FallbackCacheViaNetwork\">Fallback: Cache via Network</a>\n  1. <a href=\"#Common-Patterns-PrimarySecondaryWithFallback\">Primary + Secondary with Fallback</a>\n  1. <a href=\"#Common-Patterns-Sempahore\">Client Doesn&#8217;t Perform Network Access</a>\n  1. <a href=\"#Common-Patterns-GetSetGet\">Get-Set-Get with Request Cache Invalidation</a>\n1. <a href=\"#MigratingLibrary\">Migrating a Library to Hystrix</a>\n\n<a name='Hello-World'/>\n## Hello World!\n\n实现一个[`HystrixCommand`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommand.html)最简单的&ldquo;Hello World&rdquo;例子：\n\n```java\npublic class CommandHelloWorld extends HystrixCommand<String> {\n\n    private final String name;\n\n    public CommandHelloWorld(String name) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.name = name;\n    }\n\n    @Override\n    protected String run() {\n        // a real example would do work like a network call here\n        return \"Hello \" + name + \"!\";\n    }\n}\n```\n  \n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandHelloWorld.java)\n\n#### 等同使用`HystrixObservableCommand`\n \n和&ldquo;Hello World&rdquo;等同的实现，用[`HystrixObservableCommand`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixObservableCommand.html) 替代`HystrixCommand`，并包含一个overriding `construct`方法。\n\n```java\npublic class CommandHelloWorld extends HystrixObservableCommand<String> {\n\n    private final String name;\n\n    public CommandHelloWorld(String name) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.name = name;\n    }\n\n    @Override\n    protected Observable<String> construct() {\n        return Observable.create(new Observable.OnSubscribe<String>() {\n            @Override\n            public void call(Subscriber<? super String> observer) {\n                try {\n                    if (!observer.isUnsubscribed()) {\n                        // a real example would do work like a network call here\n                        observer.onNext(\"Hello\");\n                        observer.onNext(name + \"!\");\n                        observer.onCompleted();\n                    }\n                } catch (Exception e) {\n                    observer.onError(e);\n                }\n            }\n         } );\n    }\n}\n```\n\n<a name='Synchronous-Execution'/>\n## Synchronous Execution同步执行\n\n\n用[`execute()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#execute\\(\\))方法同步执行一个`HystrixCommand`，如下例子：\n\n```java\nString s = new CommandHelloWorld(\"World\").execute();\n```\n \n单元测试执行和assert的例子：\n\n```java\n        @Test\n        public void testSynchronous() {\n            assertEquals(\"Hello World!\", new CommandHelloWorld(\"World\").execute());\n            assertEquals(\"Hello Bob!\", new CommandHelloWorld(\"Bob\").execute());\n        }\n```\n\n#### 等同使用`HystrixObservableCommand`  \n\n`HystrixObservableCommand` 没有`execute`方法，但如果知道`Observable`总是只生产一个单值，就使用`Observable`的`.toBlocking().toFuture().get()` 可以模仿`execute`行为。\n\n\n<a name='Asynchronous-Execution'/>\n## Asynchronous Execution\n\n\n用[`queue()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#queue\\(\\)) 方法异步执行`HystrixCommand`，例子如下：\n\n```java\nFuture<String> fs = new CommandHelloWorld(\"World\").queue();\n```\n\n 可以使用Future来获取command执行结果：\n\n```java\nString s = fs.get();\n```\n\n 单元测试例子：\n\n```java\n        @Test\n        public void testAsynchronous1() throws Exception {\n            assertEquals(\"Hello World!\", new CommandHelloWorld(\"World\").queue().get());\n            assertEquals(\"Hello Bob!\", new CommandHelloWorld(\"Bob\").queue().get());\n        }\n\n        @Test\n        public void testAsynchronous2() throws Exception {\n\n            Future<String> fWorld = new CommandHelloWorld(\"World\").queue();\n            Future<String> fBob = new CommandHelloWorld(\"Bob\").queue();\n\n            assertEquals(\"Hello World!\", fWorld.get());\n            assertEquals(\"Hello Bob!\", fBob.get());\n        }\n```\n\n下面的使用方式是等同的：\n\n```java\nString s1 = new CommandHelloWorld(\"World\").execute();\nString s2 = new CommandHelloWorld(\"World\").queue().get();\n```\n\n#### 等同使用`HystrixObservableCommand`\n\nThere is no simple equivalent to `queue` for a `HystrixObservableCommand`, but if you know that the `Observable` produced by such a command must always produce only a single value, you can mimic the behavior of `queue` by applying the RxJava operators `.toBlocking().toFuture()` to the `Observable`.\n\n\n<a name='Reactive-Execution'/>\n## Reactive Execution\n\nYou can also observe the results of a `HystrixCommand` as an `Observable` by using one of the following methods:\n* [`observe()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#observe\\(\\)) &mdash; returns a &ldquo;hot&rdquo; Observable that executes the command immediately, though because the Observable is filtered through a `ReplaySubject` you are not in danger of losing any items that it emits before you have a chance to subscribe\n* [`toObservable()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#toObservable\\(\\)) &mdash; returns a &ldquo;cold&rdquo; Observable that won&#8217;t execute the command and begin emitting its results until you subscribe to the Observable\n\n```java\nObservable<String> ho = new CommandHelloWorld(\"World\").observe();\n// or Observable<String> co = new CommandHelloWorld(\"World\").toObservable();\n```\n\nYou then retrieve the value of the command by subscribing to the Observable:\n\n```java\nho.subscribe(new Action1<String>() {\n\n    @Override\n    public void call(String s) {\n         // value emitted here\n    }\n\n});\n```\n\nThe following unit tests demonstrate the behavior:\n\n```java\n@Test\npublic void testObservable() throws Exception {\n\n    Observable<String> fWorld = new CommandHelloWorld(\"World\").observe();\n    Observable<String> fBob = new CommandHelloWorld(\"Bob\").observe();\n\n    // blocking\n    assertEquals(\"Hello World!\", fWorld.toBlockingObservable().single());\n    assertEquals(\"Hello Bob!\", fBob.toBlockingObservable().single());\n\n    // non-blocking \n    // - this is a verbose anonymous inner-class approach and doesn't do assertions\n    fWorld.subscribe(new Observer<String>() {\n\n        @Override\n        public void onCompleted() {\n            // nothing needed here\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            e.printStackTrace();\n        }\n\n        @Override\n        public void onNext(String v) {\n            System.out.println(\"onNext: \" + v);\n        }\n\n    });\n\n    // non-blocking\n    // - also verbose anonymous inner-class\n    // - ignore errors and onCompleted signal\n    fBob.subscribe(new Action1<String>() {\n\n        @Override\n        public void call(String v) {\n            System.out.println(\"onNext: \" + v);\n        }\n\n    });\n}\n```\n\nUsing Java 8 lambdas/closures is more compact; it would look like this:\n\n```java\n    fWorld.subscribe((v) -> {\n        System.out.println(\"onNext: \" + v);\n    })\n    \n    // - or while also including error handling\n    \n    fWorld.subscribe((v) -> {\n        System.out.println(\"onNext: \" + v);\n    }, (exception) -> {\n        exception.printStackTrace();\n    })\n```\n\nMore information about Observable can be found at http://reactivex.io/documentation/observable.html\n\n<a name='Reactive-Commands' />\n## Reactive Commands\n\nRather than converting a `HystrixCommand` into an `Observable` using the methods described above, you can also create a `HystrixObservableCommand` that is a specialized version of `HystrixCommand` meant to wrap Observables. A `HystrixObservableCommand` is capable of wrapping Observables that emit multiple items, whereas ordinary `HystrixCommands`, even when converted into Observables, will never emit more than one item.\n\nIn such a case, instead of overriding the `run` method with your command logic (as you would with an ordinary `HystrixCommand`), you would override the `construct` method so that it returns the Observable you intend to wrap.\n\nTo obtain an Observable representation of the `HystrixObservableCommand`, use one of the following two methods:\n* [`observe()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#observe\\(\\)) &mdash; returns a &ldquo;hot&rdquo; Observable that subscribes to the underlying Observable immediately, though because it is filtered through a `ReplaySubject` you are not in danger of losing any items that it emits before you have a chance to subscribe to the resulting Observable\n* [`toObservable()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#toObservable\\(\\)) &mdash; returns a &ldquo;cold&rdquo; Observable that won&#8217;t subscribe to the underlying Observable until you subscribe to the resulting Observable\n\n<a name='Fallback'/>\n## Fallback\n\nYou can support graceful degradation in a Hystrix command by adding a fallback method that Hystrix will call to obtain a default value or values in case the main command fails.  You will want to implement a fallback for most Hystrix commands that might conceivably fail, with a couple of exceptions:\n\n1. a command that performs a write operation\n  * If your Hystrix command is designed to do a write operation rather than to return a value (such a command might normally return a `void` in the case of a `HystrixCommand` or an empty Observable in the case of a `HystrixObservableCommand`), there isn&#8217;t much point in implementing a fallback. If the write fails, you probably want the failure to propagate back to the caller.\n1. batch systems/offline compute\n   * If your Hystrix command is filling up a cache, or generating a report, or doing any sort of offline computation, it&#8217;s usually more appropriate to propagate the error back to the caller who can then retry the command later, rather than to send the caller a silently-degraded response.\n\nWhether or not your command has a fallback, all of the usual Hystrix state and circuit-breaker state/metrics are updated to indicate the command failure.\n\nIn an ordinary `HystrixCommand` you implement a fallback by means of a [`getFallback()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback\\(\\)) implementation. Hystrix will execute this fallback for all types of failure such as `run()` failure, timeout, thread pool or semaphore rejection, and circuit-breaker short-circuiting. The following example includes such a fallback:\n\n```java\npublic class CommandHelloFailure extends HystrixCommand<String> {\n\n    private final String name;\n\n    public CommandHelloFailure(String name) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.name = name;\n    }\n\n    @Override\n    protected String run() {\n        throw new RuntimeException(\"this command always fails\");\n    }\n\n    @Override\n    protected String getFallback() {\n        return \"Hello Failure \" + name + \"!\";\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandHelloFailure.java)\n\nThis command&#8217;s `run()` method will fail on every execution. However, the caller will always receive the value returned by the command&#8217;s `getFallback()` method instead of receiving an exception:\n\n```java\n    @Test\n    public void testSynchronous() {\n        assertEquals(\"Hello Failure World!\", new CommandHelloFailure(\"World\").execute());\n        assertEquals(\"Hello Failure Bob!\", new CommandHelloFailure(\"Bob\").execute());\n    }\n```\n\n#### `HystrixObservableCommand` Equivalent\n\nFor a `HystrixObservableCommand` you instead may override the `resumeWithFallback` method so that it returns a second `Observable` that will take over from the primary `Observable` if it fails. Note that because an `Observable` may fail after having already emitted one or more items, your fallback should not assume that it will be emitting the only values that the observer will see.\n\nInternally, Hystrix uses the RxJava [`onErrorResumeNext`](http://reactivex.io/documentation/operators/catch.html) operator to seamlessly transition between the primary and fallback `Observable` in case of an error.\n\n<a name='ErrorPropagation'/>\n## Error Propagation\n\nAll exceptions thrown from the `run()` method except for [`HystrixBadRequestException`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/exception/HystrixBadRequestException.html) count as failures and trigger `getFallback()` and circuit-breaker logic.\n\nYou can wrap the exception that you would like to throw in `HystrixBadRequestException` and retrieve it via `getCause()`. The `HystrixBadRequestException` is intended for use cases such as reporting illegal arguments or non-system failures that should not count against the failure metrics and should not trigger fallback logic.\n\n#### `HystrixObservableCommand` Equivalent\n\nIn the case of a `HystrixObservableCommand`, non-recoverable errors are returned via `onError` notifications from the resulting `Observable`, and fallbacks are accomplished by falling back to a second Observable that Hystrix obtains through the `resumeWithFallback` method that you implement.\n\n<a name='CommandName'/>\n## Command Name\n\nA command name is, by default, derived from the class name:\n\n```java\ngetClass().getSimpleName();\n```\n\nTo explicitly define the name pass it in via the `HystrixCommand` or `HystrixObservableCommand` constructor:\n\n```java\n    public CommandHelloWorld(String name) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey(\"HelloWorld\")));\n        this.name = name;\n    }\n```\n\nTo save a Setter allocation per command allocation, you may also cache the Setter like so:\n\n```java\n    private static final Setter cachedSetter = \n        Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n            .andCommandKey(HystrixCommandKey.Factory.asKey(\"HelloWorld\"));    \n\n    public CommandHelloWorld(String name) {\n        super(cachedSetter);\n        this.name = name;\n    }\n\n```\n\n[`HystrixCommandKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.html) is an interface and can be implemented as an enum or regular class, but it also has the helper [`Factory`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.Factory.html) class to construct and intern instances such as:\n\n```java\nHystrixCommandKey.Factory.asKey(\"HelloWorld\")\n```\n\n<a name='CommandGroup'/>\n## Command Group\n\nHystrix uses the command group key to group together commands such as for reporting, alerting, dashboards, or team/library ownership.\n\nBy default Hystrix uses this to define the command thread-pool unless a separate one is defined.\n\n[`HystrixCommandGroupKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.html) is an interface and can be implemented as an enum or regular class, but it also has the helper [`Factory`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.Factory.html) class to construct and intern instances such as:\n\n```java\nHystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\")\n```\n\n<a name='CommandThreadPool'/>\n## Command Thread-Pool\n\nThe thread-pool key represents a [`HystrixThreadPool`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPool.html) for monitoring, metrics publishing, caching, and other such uses. A `HystrixCommand` is associated with a single `HystrixThreadPool` as retrieved by the [`HystrixThreadPoolKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.html) injected into it, or it defaults to one created using the `HystrixCommandGroupKey` it is created with.\n\nTo explicitly define the name pass it in via the `HystrixCommand` or `HystrixObservableCommand` constructor:\n\n```java\n    public CommandHelloWorld(String name) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey(\"HelloWorld\"))\n                .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\"HelloWorldPool\")));\n        this.name = name;\n    }\n```\n\n[`HystrixThreadPoolKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.html) is an interface and can be implemented as an enum or regular class, but it also has the helper [`Factory`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.Factory.html) class to construct and intern instances such as:\n\n```java\nHystrixThreadPoolKey.Factory.asKey(\"HelloWorldPool\")\n```\n\nThe reason why you might use `HystrixThreadPoolKey` instead of just a different `HystrixCommandGroupKey` is that multiple commands may belong to the same &ldquo;group&rdquo; of ownership or logical functionality, but certain commands may need to be isolated from each other.\n\nHere is a simple example:\n\n* two commands used to access Video metadata\n* group name is &ldquo;VideoMetadata&rdquo;\n* command A goes against resource #1\n* command B goes against resource #2\n\nIf command A becomes latent and saturates its thread-pool it should not prevent command B from executing requests since they each hit different back-end resources.\n\nThus, we logically want these commands grouped together but want them isolated differently and would use `HystrixThreadPoolKey` to give each of them a different thread-pool.\n\n<a name='Caching'/>\n## Request Cache\n\nYou enable request caching by implementing the [`getCacheKey()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getCacheKey\\(\\)) method on a `HystrixCommand` or `HystrixObservableCommand` object as follows:\n\n```java\npublic class CommandUsingRequestCache extends HystrixCommand<Boolean> {\n\n    private final int value;\n\n    protected CommandUsingRequestCache(int value) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.value = value;\n    }\n\n    @Override\n    protected Boolean run() {\n        return value == 0 || value % 2 == 0;\n    }\n\n    @Override\n    protected String getCacheKey() {\n        return String.valueOf(value);\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingRequestCache.java)\n\nSince this depends on request context we must initialize the [`HystrixRequestContext`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html).\n\nIn a simple unit test you could do this as follows:\n\n```java\n        @Test\n        public void testWithoutCacheHits() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                assertTrue(new CommandUsingRequestCache(2).execute());\n                assertFalse(new CommandUsingRequestCache(1).execute());\n                assertTrue(new CommandUsingRequestCache(0).execute());\n                assertTrue(new CommandUsingRequestCache(58672).execute());\n            } finally {\n                context.shutdown();\n            }\n        }\n```\n\nTypically this context will be initialized and shut down via a `ServletFilter` that wraps a user request or some other lifecycle hook.\n\nThe following is an example that shows how commands retrieve their values from the cache (and how you can query an object to know whether its value came from the cache) within a request context:\n\n```java\n        @Test\n        public void testWithCacheHits() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                CommandUsingRequestCache command2a = new CommandUsingRequestCache(2);\n                CommandUsingRequestCache command2b = new CommandUsingRequestCache(2);\n\n                assertTrue(command2a.execute());\n                // this is the first time we've executed this command with\n                // the value of \"2\" so it should not be from cache\n                assertFalse(command2a.isResponseFromCache());\n\n                assertTrue(command2b.execute());\n                // this is the second time we've executed this command with\n                // the same value so it should return from cache\n                assertTrue(command2b.isResponseFromCache());\n            } finally {\n                context.shutdown();\n            }\n\n            // start a new request context\n            context = HystrixRequestContext.initializeContext();\n            try {\n                CommandUsingRequestCache command3b = new CommandUsingRequestCache(2);\n                assertTrue(command3b.execute());\n                // this is a new request context so this \n                // should not come from cache\n                assertFalse(command3b.isResponseFromCache());\n            } finally {\n                context.shutdown();\n            }\n        }\n```\n\n<a name='Collapsing'/>\n## Request Collapsing\n\nRequest collapsing enables multiple requests to be batched into a single `HystrixCommand` instance execution.\n\nA collapser can use the batch size and the elapsed time since the creation of the batch as triggers for executing a batch.\n\nThere are 2 styles of request-collapsing supported by Hystrix: request-scoped and globally-scoped.  This is configured at collapser construction, and defaulted to request-scoped.  \n\nA request-scoped collapser collects a batch per `HystrixRequestContext`, while a globally-scoped collapser collects a batch across multiple `HystrixRequestContext`s.  As a result, if your downstream dependencies cannot handle multiple `HystrixRequestContext`s in a single command invocation, request-scoped collapsing is the proper choice.  \n\nAt Netflix, we exclusively use request-scoped collapsers because all current systems have been built on the assumption that a single `HystrixRequestContext` will be used in each command.  Since the batches are per-request only, collapsing is effective when commands occur in parallel with different arguments in the same request.\n\nFollowing is a simple example of how to implement a request-scoped [`HystrixCollapser`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCollapser.html):\n\n```java\npublic class CommandCollapserGetValueForKey extends HystrixCollapser<List<String>, String, Integer> {\n\n    private final Integer key;\n\n    public CommandCollapserGetValueForKey(Integer key) {\n        this.key = key;\n    }\n\n    @Override\n    public Integer getRequestArgument() {\n        return key;\n    }\n\n    @Override\n    protected HystrixCommand<List<String>> createCommand(final Collection<CollapsedRequest<String, Integer>> requests) {\n        return new BatchCommand(requests);\n    }\n\n    @Override\n    protected void mapResponseToRequests(List<String> batchResponse, Collection<CollapsedRequest<String, Integer>> requests) {\n        int count = 0;\n        for (CollapsedRequest<String, Integer> request : requests) {\n            request.setResponse(batchResponse.get(count++));\n        }\n    }\n\n    private static final class BatchCommand extends HystrixCommand<List<String>> {\n        private final Collection<CollapsedRequest<String, Integer>> requests;\n\n        private BatchCommand(Collection<CollapsedRequest<String, Integer>> requests) {\n                super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n                    .andCommandKey(HystrixCommandKey.Factory.asKey(\"GetValueForKey\")));\n            this.requests = requests;\n        }\n\n        @Override\n        protected List<String> run() {\n            ArrayList<String> response = new ArrayList<String>();\n            for (CollapsedRequest<String, Integer> request : requests) {\n                // artificial response for each argument received in the batch\n                response.add(\"ValueForKey: \" + request.getArgument());\n            }\n            return response;\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandCollapserGetValueForKey.java)\n\nThe following unit test shows how to use a collapser to automatically batch four executions of `CommandCollapserGetValueForKey` into a single `HystrixCommand` execution:\n\n```java\n@Test\npublic void testCollapser() throws Exception {\n    HystrixRequestContext context = HystrixRequestContext.initializeContext();\n    try {\n        Future<String> f1 = new CommandCollapserGetValueForKey(1).queue();\n        Future<String> f2 = new CommandCollapserGetValueForKey(2).queue();\n        Future<String> f3 = new CommandCollapserGetValueForKey(3).queue();\n        Future<String> f4 = new CommandCollapserGetValueForKey(4).queue();\n\n        assertEquals(\"ValueForKey: 1\", f1.get());\n        assertEquals(\"ValueForKey: 2\", f2.get());\n        assertEquals(\"ValueForKey: 3\", f3.get());\n        assertEquals(\"ValueForKey: 4\", f4.get());\n\n        // assert that the batch command 'GetValueForKey' was in fact\n        // executed and that it executed only once\n        assertEquals(1, HystrixRequestLog.getCurrentRequest().getExecutedCommands().size());\n        HystrixCommand<?> command = HystrixRequestLog.getCurrentRequest().getExecutedCommands().toArray(new HystrixCommand<?>[1])[0];\n        // assert the command is the one we're expecting\n        assertEquals(\"GetValueForKey\", command.getCommandKey().name());\n        // confirm that it was a COLLAPSED command execution\n        assertTrue(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));\n        // and that it was successful\n        assertTrue(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));\n    } finally {\n        context.shutdown();\n    }\n}\n```\n\n\n<a name='RequestContextSetup'/>\n## Request Context Setup\n\nTo use request-scoped features (request caching, request collapsing, request log) you must manage the [`HystrixRequestContext`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html) lifecycle (or implement an alternative [`HystrixConcurrencyStrategy`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.html)).\n\nThis means that you must execute the following before a request:\n\n```java\nHystrixRequestContext context = HystrixRequestContext.initializeContext();\n```\n\nand then this at the end of the request:\n\n```java\ncontext.shutdown();\n```\n\nIn a standard Java web application, you can use a Servlet Filter to initialize this lifecycle by implementing a filter similar to this:\n\n```java\npublic class HystrixRequestContextServletFilter implements Filter {\n\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) \n     throws IOException, ServletException {\n        HystrixRequestContext context = HystrixRequestContext.initializeContext();\n        try {\n            chain.doFilter(request, response);\n        } finally {\n            context.shutdown();\n        }\n    }\n}\n```\n\nYou could enable the filter for all incoming traffic by adding a section to the `web.xml` as follows:\n\n```\n    <filter>\n      <display-name>HystrixRequestContextServletFilter</display-name>\n      <filter-name>HystrixRequestContextServletFilter</filter-name>\n      <filter-class>com.netflix.hystrix.contrib.requestservlet.HystrixRequestContextServletFilter</filter-class>\n    </filter>\n    <filter-mapping>\n      <filter-name>HystrixRequestContextServletFilter</filter-name>\n      <url-pattern>/*</url-pattern>\n   </filter-mapping>\n```\n\n<a name='Common-Patterns'/>\n## Common Patterns\n\nIn the following sections are common uses and patterns of use for `HystrixCommand` and `HystrixObservableCommand`.\n\n<a name='Common-Patterns-FailFast'/>\n### Fail Fast\n\nThe most basic execution is one that does a single thing and has no fallback behavior. It will throw an exception if any type of failure occurs.\n\n```java\npublic class CommandThatFailsFast extends HystrixCommand<String> {\n\n    private final boolean throwException;\n\n    public CommandThatFailsFast(boolean throwException) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.throwException = throwException;\n    }\n\n    @Override\n    protected String run() {\n        if (throwException) {\n            throw new RuntimeException(\"failure from CommandThatFailsFast\");\n        } else {\n            return \"success\";\n        }\n    }\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandThatFailsFast.java)\n\nThese unit tests show how it behaves:\n\n```java\n@Test\npublic void testSuccess() {\n    assertEquals(\"success\", new CommandThatFailsFast(false).execute());\n}\n\n@Test\npublic void testFailure() {\n    try {\n        new CommandThatFailsFast(true).execute();\n        fail(\"we should have thrown an exception\");\n    } catch (HystrixRuntimeException e) {\n        assertEquals(\"failure from CommandThatFailsFast\", e.getCause().getMessage());\n        e.printStackTrace();\n    }\n}\n```\n#### `HystrixObservableCommand` Equivalent\nThe equivalent Fail-Fast solution for a `HystrixObservableCommand` would involve overriding the `resumeWithFallback` method as follows:\n\n```java\n    @Override\n    protected Observable<String> resumeWithFallback() {\n        if (throwException) {\n            return Observable.error(new Throwable(\"failure from CommandThatFailsFast\"));\n        } else {\n            return Observable.just(\"success\");\n        }\n    }\n```\n\n<a name='Common-Patterns-FailSilent'/>\n### Fail Silent\n\nFailing silently is the equivalent of returning an empty response or removing functionality. It can be done by returning `null`, an empty Map, empty List, or other such responses.\n\nYou do this by implementing a [`getFallback()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback\\(\\)) method on the `HystrixCommand` instance:\n\n[[images/fallback-640.png]]\n\n```java\npublic class CommandThatFailsSilently extends HystrixCommand<String> {\n\n    private final boolean throwException;\n\n    public CommandThatFailsSilently(boolean throwException) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.throwException = throwException;\n    }\n\n    @Override\n    protected String run() {\n        if (throwException) {\n            throw new RuntimeException(\"failure from CommandThatFailsFast\");\n        } else {\n            return \"success\";\n        }\n    }\n\n    @Override\n    protected String getFallback() {\n        return null;\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandThatFailsSilently.java)\n\n```java\n@Test\npublic void testSuccess() {\n    assertEquals(\"success\", new CommandThatFailsSilently(false).execute());\n}\n\n@Test\npublic void testFailure() {\n    try {\n        assertEquals(null, new CommandThatFailsSilently(true).execute());\n    } catch (HystrixRuntimeException e) {\n        fail(\"we should not get an exception as we fail silently with a fallback\");\n    }\n}\n```\n\nAnother implementation that returns an empty list would look like:\n\n```java\n    @Override\n    protected List<String> getFallback() {\n        return Collections.emptyList();\n    }\n```\n\n#### `HystrixObservableCommand` Equivalent\nThe equivalent Fail-Silently solution for a `HystrixObservableCommand` would involve overriding the [`resumeWithFallback()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#resumeWithFallback\\(\\)) method as follows:\n\n```java\n    @Override\n    protected Observable<String> resumeWithFallback() {\n        return Observable.empty();\n    }\n```\n\n<a name='Common-Patterns-FallbackStatic'/>\n### Fallback: Static\n\nFallbacks can return default values statically embedded in code. This doesn&#8217;t cause the feature or service to be removed in the way that &ldquo;fail silent&rdquo; often does, but instead causes default behavior to occur.\n\nFor example, if a command returns a true/false based on user credentials but the command execution fails, it can default to true:\n\n```java\n    @Override\n    protected Boolean getFallback() {\n        return true;\n    }\n```\n\n#### `HystrixObservableCommand` Equivalent\nThe equivalent Static solution for a `HystrixObservableCommand` would involve overriding the `resumeWithFallback` method as follows:\n\n```java\n    @Override\n    protected Observable<Boolean> resumeWithFallback() {\n        return Observable.just( true );\n    }\n```\n\n<a name='Common-Patterns-FallbackStubbed'/>\n### Fallback: Stubbed\n\nYou typically use a stubbed fallback when your command returns a compound object containing multiple fields, some of which can be determined from other request state while other fields are set to default values.\n\nExamples of places where you might find state appropriate to use in these stubbed values are:\n\n* cookies\n* request arguments and headers\n* responses from previous service requests prior to the current one failing\n\nYour fallback can retrieve stubbed values statically from the request scope, but typically it is recommended that they be injected at command instantiation time for use if they are needed such as this following example demonstrates in the way it treats the `countryCodeFromGeoLookup` field:\n\n```java\npublic class CommandWithStubbedFallback extends HystrixCommand<UserAccount> {\n\n    private final int customerId;\n    private final String countryCodeFromGeoLookup;\n\n    /**\n     * @param customerId\n     *            The customerID to retrieve UserAccount for\n     * @param countryCodeFromGeoLookup\n     *            The default country code from the HTTP request geo code lookup used for fallback.\n     */\n    protected CommandWithStubbedFallback(int customerId, String countryCodeFromGeoLookup) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.customerId = customerId;\n        this.countryCodeFromGeoLookup = countryCodeFromGeoLookup;\n    }\n\n    @Override\n    protected UserAccount run() {\n        // fetch UserAccount from remote service\n        //        return UserAccountClient.getAccount(customerId);\n        throw new RuntimeException(\"forcing failure for example\");\n    }\n\n    @Override\n    protected UserAccount getFallback() {\n        /**\n         * Return stubbed fallback with some static defaults, placeholders,\n         * and an injected value 'countryCodeFromGeoLookup' that we'll use\n         * instead of what we would have retrieved from the remote service.\n         */\n        return new UserAccount(customerId, \"Unknown Name\",\n                countryCodeFromGeoLookup, true, true, false);\n    }\n\n    public static class UserAccount {\n        private final int customerId;\n        private final String name;\n        private final String countryCode;\n        private final boolean isFeatureXPermitted;\n        private final boolean isFeatureYPermitted;\n        private final boolean isFeatureZPermitted;\n\n        UserAccount(int customerId, String name, String countryCode,\n                boolean isFeatureXPermitted,\n                boolean isFeatureYPermitted,\n                boolean isFeatureZPermitted) {\n            this.customerId = customerId;\n            this.name = name;\n            this.countryCode = countryCode;\n            this.isFeatureXPermitted = isFeatureXPermitted;\n            this.isFeatureYPermitted = isFeatureYPermitted;\n            this.isFeatureZPermitted = isFeatureZPermitted;\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandWithStubbedFallback.java)\n\nThe following unit test demonstrates its behavior:\n\n```java\n    @Test\n    public void test() {\n        CommandWithStubbedFallback command = new CommandWithStubbedFallback(1234, \"ca\");\n        UserAccount account = command.execute();\n        assertTrue(command.isFailedExecution());\n        assertTrue(command.isResponseFromFallback());\n        assertEquals(1234, account.customerId);\n        assertEquals(\"ca\", account.countryCode);\n        assertEquals(true, account.isFeatureXPermitted);\n        assertEquals(true, account.isFeatureYPermitted);\n        assertEquals(false, account.isFeatureZPermitted);\n    }\n```\n\n#### `HystrixObservableCommand` Equivalent\nThe equivalent Stubbed solution for a `HystrixObservableCommand` would involve overriding the `resumeWithFallback` method to return an `Observable` that emits the stub responses. A version equivalent to the previous example would look like this:\n\n```java\n@Override\nprotected Observable<Boolean> resumeWithFallback() {\n    return Observable.just( new UserAccount(customerId, \"Unknown Name\",\n                                            countryCodeFromGeoLookup, true, true, false) );\n}\n```\n\nBut if you are expecting to emit multiple items from your `Observable`, you may be more interested in generating stubs for only those items that the original `Observable` had not yet emitted before it failed. Here is a simple example to show how you might accomplish this &mdash; it keeps track of the last item emitted from the main `Observable` so that the fallback knows where to pick up to continue the sequence:\n\n```java\n@Override\nprotected Observable<Integer> construct() {\n    return Observable.just(1, 2, 3)\n            .concatWith(Observable.<Integer> error(new RuntimeException(\"forced error\")))\n            .doOnNext(new Action1<Integer>() {\n                @Override\n                public void call(Integer t1) {\n                    lastSeen = t1;\n                }\n                \n            })\n            .subscribeOn(Schedulers.computation());\n}\n\n@Override\nprotected Observable<Integer> resumeWithFallback() {\n    if (lastSeen < 4) {\n        return Observable.range(lastSeen + 1, 4 - lastSeen);\n    } else {\n        return Observable.empty();\n    }\n}\n```\n\n<a name='Common-Patterns-FallbackCacheViaNetwork'/>\n### Fallback: Cache via Network\n\nSometimes if a back-end service fails, a stale version of data can be retrieved from a cache service such as memcached.\n\nSince the fallback will go over the network it is another possible point of failure and so it also needs to be wrapped by a `HystrixCommand` or `HystrixObservableCommand`.\n\n[[images/fallback-via-command-640.png]]\n\nIt is important to execute the fallback command on a separate thread-pool, otherwise if the main command were to become latent and fill the thread-pool, this would prevent the fallback from running if the two commands share the same pool.\n\nThe following code shows how `CommandWithFallbackViaNetwork` executes `FallbackViaNetwork` in its `getFallback()` method.\n\nNote how if the fallback fails, it _also_ has a fallback which does the &ldquo;fail silent&rdquo; approach of returning `null`.\n\nTo configure the `FallbackViaNetwork` command to run on a different threadpool than the default `RemoteServiceX` derived from the [`HystrixCommandGroupKey`](http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.html), it injects `HystrixThreadPoolKey.Factory.asKey(\"RemoteServiceXFallback\")` into the constructor.\n\nThis means `CommandWithFallbackViaNetwork` will run on a thread-pool named `RemoteServiceX` and `FallbackViaNetwork` will run on a thread-pool named `RemoteServiceXFallback`.\n\n```java\npublic class CommandWithFallbackViaNetwork extends HystrixCommand<String> {\n    private final int id;\n\n    protected CommandWithFallbackViaNetwork(int id) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceX\"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey(\"GetValueCommand\")));\n        this.id = id;\n    }\n\n    @Override\n    protected String run() {\n        //        RemoteServiceXClient.getValue(id);\n        throw new RuntimeException(\"force failure for example\");\n    }\n\n    @Override\n    protected String getFallback() {\n        return new FallbackViaNetwork(id).execute();\n    }\n\n    private static class FallbackViaNetwork extends HystrixCommand<String> {\n        private final int id;\n\n        public FallbackViaNetwork(int id) {\n            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceX\"))\n                    .andCommandKey(HystrixCommandKey.Factory.asKey(\"GetValueFallbackCommand\"))\n                    // use a different threadpool for the fallback command\n                    // so saturating the RemoteServiceX pool won't prevent\n                    // fallbacks from executing\n                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\"RemoteServiceXFallback\")));\n            this.id = id;\n        }\n\n        @Override\n        protected String run() {\n            MemCacheClient.getValue(id);\n        }\n\n        @Override\n        protected String getFallback() {\n            // the fallback also failed\n            // so this fallback-of-a-fallback will \n            // fail silently and return null\n            return null;\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandWithFallbackViaNetwork.java)\n\n<a name='Common-Patterns-PrimarySecondaryWithFallback'/>\n### Primary + Secondary with Fallback\n\nSome systems have dual-mode behavior &mdash; primary and secondary, or primary and failover.\n\nSometimes the secondary or failover is considered a failure state and it is intended only for fallback; in those scenarios it would fit in the same pattern as &ldquo;Cache via Network&rdquo; described above.\n\nHowever, if flipping to the secondary system is common, such as a normal part of rolling out new code (sometimes this is part of how stateful systems handle code pushes) then every time the secondary system is used the primary will be in a failure state, tripping circuit breakers and firing alerts.\n\nThis is not the desired behavior, if for no other reason than to avoid the &ldquo;cry wolf&rdquo; fatigue that will cause alerts to be ignored when a real issue is occurring.\n\nSo in such a case the strategy is instead to treat the switching between primary and secondary as normal, healthy patterns and put a fa&ccedil;ade in front of them.\n\n[[images/primary-secondary-example-640.png]]\n\nThe primary and secondary `HystrixCommand` implementations are thread-isolated since they are doing network traffic and business logic. They may each have very different performance characteristics (often the secondary system is a static cache) so another benefit of separate commands for each is that they can be individually tuned.\n\nYou do not expose these two commands publicly but you instead hide them behind another `HystrixCommand` that is semaphore-isolated and that implements the conditional logic as to whether to invoke the primary or secondary command. If both primary and secondary fail then control switches to the fallback of the fa&ccedil;ade command itself.\n\nThe fa&ccedil;ade `HystrixCommand` can use semaphore-isolation since all of the work it is doing is going through two other `HystrixCommand`s that are already thread-isolated. It is unnecessary to have yet another layer of threading as long as the [`run()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run\\(\\)) method of the fa&ccedil;ade is not doing any other network calls, retry logic, or other &ldquo;error prone&rdquo; things.\n\n```java\npublic class CommandFacadeWithPrimarySecondary extends HystrixCommand<String> {\n\n    private final static DynamicBooleanProperty usePrimary = DynamicPropertyFactory.getInstance().getBooleanProperty(\"primarySecondary.usePrimary\", true);\n\n    private final int id;\n\n    public CommandFacadeWithPrimarySecondary(int id) {\n        super(Setter\n                .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"SystemX\"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey(\"PrimarySecondaryCommand\"))\n                .andCommandPropertiesDefaults(\n                        // we want to default to semaphore-isolation since this wraps\n                        // 2 others commands that are already thread isolated\n                        HystrixCommandProperties.Setter()\n                                .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));\n        this.id = id;\n    }\n\n    @Override\n    protected String run() {\n        if (usePrimary.get()) {\n            return new PrimaryCommand(id).execute();\n        } else {\n            return new SecondaryCommand(id).execute();\n        }\n    }\n\n    @Override\n    protected String getFallback() {\n        return \"static-fallback-\" + id;\n    }\n\n    @Override\n    protected String getCacheKey() {\n        return String.valueOf(id);\n    }\n\n    private static class PrimaryCommand extends HystrixCommand<String> {\n\n        private final int id;\n\n        private PrimaryCommand(int id) {\n            super(Setter\n                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"SystemX\"))\n                    .andCommandKey(HystrixCommandKey.Factory.asKey(\"PrimaryCommand\"))\n                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\"PrimaryCommand\"))\n                    .andCommandPropertiesDefaults(\n                            // we default to a 600ms timeout for primary\n                            HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(600)));\n            this.id = id;\n        }\n\n        @Override\n        protected String run() {\n            // perform expensive 'primary' service call\n            return \"responseFromPrimary-\" + id;\n        }\n\n    }\n\n    private static class SecondaryCommand extends HystrixCommand<String> {\n\n        private final int id;\n\n        private SecondaryCommand(int id) {\n            super(Setter\n                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"SystemX\"))\n                    .andCommandKey(HystrixCommandKey.Factory.asKey(\"SecondaryCommand\"))\n                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(\"SecondaryCommand\"))\n                    .andCommandPropertiesDefaults(\n                            // we default to a 100ms timeout for secondary\n                            HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(100)));\n            this.id = id;\n        }\n\n        @Override\n        protected String run() {\n            // perform fast 'secondary' service call\n            return \"responseFromSecondary-\" + id;\n        }\n\n    }\n\n    public static class UnitTest {\n\n        @Test\n        public void testPrimary() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                ConfigurationManager.getConfigInstance().setProperty(\"primarySecondary.usePrimary\", true);\n                assertEquals(\"responseFromPrimary-20\", new CommandFacadeWithPrimarySecondary(20).execute());\n            } finally {\n                context.shutdown();\n                ConfigurationManager.getConfigInstance().clear();\n            }\n        }\n\n        @Test\n        public void testSecondary() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                ConfigurationManager.getConfigInstance().setProperty(\"primarySecondary.usePrimary\", false);\n                assertEquals(\"responseFromSecondary-20\", new CommandFacadeWithPrimarySecondary(20).execute());\n            } finally {\n                context.shutdown();\n                ConfigurationManager.getConfigInstance().clear();\n            }\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandFacadeWithPrimarySecondary.java)\n\n<a name='Common-Patterns-Semaphore'/>\n### Client Doesn't Perform Network Access\n\nWhen you wrap behavior that does not perform network access, but where latency is a concern or the threading overhead is unacceptable, you can set the [`executionIsolationStrategy`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.html#executionIsolationStrategy\\(\\)) property to [`ExecutionIsolationStrategy`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.ExecutionIsolationStrategy.html)`.SEMAPHORE` and Hystrix will use semaphore isolation instead.\n\nThe following shows how to set this property as the default for a command via code (you can also override it via dynamic properties at runtime).\n\n```java\npublic class CommandUsingSemaphoreIsolation extends HystrixCommand<String> {\n\n    private final int id;\n\n    public CommandUsingSemaphoreIsolation(int id) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"))\n                // since we're doing an in-memory cache lookup we choose SEMAPHORE isolation\n                .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n                        .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));\n        this.id = id;\n    }\n\n    @Override\n    protected String run() {\n        // a real implementation would retrieve data from in memory data structure\n        return \"ValueFromHashMap_\" + id;\n    }\n\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingSemaphoreIsolation.java)\n\n<a name='Common-Patterns-GetSetGet'/>\n### Get-Set-Get with Request Cache Invalidation\n\nIf you are implementing a Get-Set-Get use case where the Get receives enough traffic that request caching is desired but sometimes a Set occurs on another command that should invalidate the cache within the same request, you can invalidate the cache by calling [`HystrixRequestCache.clear()`](http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixRequestCache.html#clear\\(java.lang.String\\)).\n\nHere is an example implementation:\n\n```java\npublic class CommandUsingRequestCacheInvalidation {\n\n    /* represents a remote data store */\n    private static volatile String prefixStoredOnRemoteDataStore = \"ValueBeforeSet_\";\n\n    public static class GetterCommand extends HystrixCommand<String> {\n\n        private static final HystrixCommandKey GETTER_KEY = HystrixCommandKey.Factory.asKey(\"GetterCommand\");\n        private final int id;\n\n        public GetterCommand(int id) {\n            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"GetSetGet\"))\n                    .andCommandKey(GETTER_KEY));\n            this.id = id;\n        }\n\n        @Override\n        protected String run() {\n            return prefixStoredOnRemoteDataStore + id;\n        }\n\n        @Override\n        protected String getCacheKey() {\n            return String.valueOf(id);\n        }\n\n        /**\n         * Allow the cache to be flushed for this object.\n         * \n         * @param id\n         *            argument that would normally be passed to the command\n         */\n        public static void flushCache(int id) {\n            HystrixRequestCache.getInstance(GETTER_KEY,\n                    HystrixConcurrencyStrategyDefault.getInstance()).clear(String.valueOf(id));\n        }\n\n    }\n\n    public static class SetterCommand extends HystrixCommand<Void> {\n\n        private final int id;\n        private final String prefix;\n\n        public SetterCommand(int id, String prefix) {\n            super(HystrixCommandGroupKey.Factory.asKey(\"GetSetGet\"));\n            this.id = id;\n            this.prefix = prefix;\n        }\n\n        @Override\n        protected Void run() {\n            // persist the value against the datastore\n            prefixStoredOnRemoteDataStore = prefix;\n            // flush the cache\n            GetterCommand.flushCache(id);\n            // no return value\n            return null;\n        }\n    }\n}\n```\n[View Source](https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingRequestCacheInvalidation.java)\n\nThe unit test that confirms the behavior is:\n\n```java\n        @Test\n        public void getGetSetGet() {\n            HystrixRequestContext context = HystrixRequestContext.initializeContext();\n            try {\n                assertEquals(\"ValueBeforeSet_1\", new GetterCommand(1).execute());\n                GetterCommand commandAgainstCache = new GetterCommand(1);\n                assertEquals(\"ValueBeforeSet_1\", commandAgainstCache.execute());\n                // confirm it executed against cache the second time\n                assertTrue(commandAgainstCache.isResponseFromCache());\n                // set the new value\n                new SetterCommand(1, \"ValueAfterSet_\").execute();\n                // fetch it again\n                GetterCommand commandAfterSet = new GetterCommand(1);\n                // the getter should return with the new prefix, not the value from cache\n                assertFalse(commandAfterSet.isResponseFromCache());\n                assertEquals(\"ValueAfterSet_1\", commandAfterSet.execute());\n            } finally {\n                context.shutdown();\n            }\n        }\n    }\n```\n<a name='MigratingLibrary'/>\n## Migrating a Library to Hystrix\n\nWhen you are migrating an existing client library to use Hystrix, you should replace each of the &ldquo;service methods&rdquo; with a `HystrixCommand`.\n\nThe service methods should then forward calls to the `HystrixCommand` and not have any additional business logic in them.\n\nThus, before migration a service library may look like this:\n\n[[images/library-migration-to-hystrix-without-640.png]]\n\nAfter migrating, users of a library will be able to access the `HystrixCommand`s directly or indirectly via the service facade that delegates to the `HystrixCommand`s.\n\n[[images/library-migration-to-hystrix-with-640.png]]","slug":"hystrix/怎样使用Hystrix","published":1,"updated":"2016-03-17T02:22:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxkk000dlginiyfp8n2l","content":"<h2 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h2><ol>\n<li><a href=\"#Hello-World\">&ldquo;Hello World!&rdquo;</a></li>\n<li><a href=\"#Synchronous-Execution\">Synchronous Execution</a></li>\n<li><a href=\"#Asynchronous-Execution\">Asynchronous Execution</a></li>\n<li><a href=\"#Reactive-Execution\">Reactive Execution</a></li>\n<li><a href=\"#Reactive-Commands\">Reactive Commands</a></li>\n<li><a href=\"#Fallback\">Fallback</a></li>\n<li><a href=\"#ErrorPropagation\">Error Propagation</a></li>\n<li><a href=\"#CommandName\">Command Name</a></li>\n<li><a href=\"#CommandGroup\">Command Group</a></li>\n<li><a href=\"#CommandThreadPool\">Command Thread-Pool</a></li>\n<li><a href=\"#Caching\">Request Cache</a></li>\n<li><a href=\"#Collapsing\">Request Collapsing</a></li>\n<li><a href=\"#RequestContextSetup\">Request Context Setup</a></li>\n<li><a href=\"#Common-Patterns\">Common Patterns:</a><ol>\n<li><a href=\"#Common-Patterns-FailFast\">Fail Fast</a></li>\n<li><a href=\"#Common-Patterns-FailSilent\">Fail Silent</a></li>\n<li><a href=\"#Common-Patterns-FallbackStatic\">Fallback: Static</a></li>\n<li><a href=\"#Common-Patterns-FallbackStubbed\">Fallback: Stubbed</a></li>\n<li><a href=\"#Common-Patterns-FallbackCacheViaNetwork\">Fallback: Cache via Network</a></li>\n<li><a href=\"#Common-Patterns-PrimarySecondaryWithFallback\">Primary + Secondary with Fallback</a></li>\n<li><a href=\"#Common-Patterns-Sempahore\">Client Doesn&#8217;t Perform Network Access</a></li>\n<li><a href=\"#Common-Patterns-GetSetGet\">Get-Set-Get with Request Cache Invalidation</a></li>\n</ol>\n</li>\n<li><a href=\"#MigratingLibrary\">Migrating a Library to Hystrix</a></li>\n</ol>\n<p><a name=\"Hello-World\"></a></p>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World!\"></a>Hello World!</h2><p>实现一个<a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommand.html\" target=\"_blank\" rel=\"external\"><code>HystrixCommand</code></a>最简单的&ldquo;Hello World&rdquo;例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// a real example would do work like a network call here</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name + <span class=\"string\">\"!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandHelloWorld.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<h4 id=\"等同使用HystrixObservableCommand\"><a href=\"#等同使用HystrixObservableCommand\" class=\"headerlink\" title=\"等同使用HystrixObservableCommand\"></a>等同使用<code>HystrixObservableCommand</code></h4><p>和&ldquo;Hello World&rdquo;等同的实现，用<a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixObservableCommand.html\" target=\"_blank\" rel=\"external\"><code>HystrixObservableCommand</code></a> 替代<code>HystrixCommand</code>，并包含一个overriding <code>construct</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixObservableCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;String&gt; <span class=\"title\">construct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!observer.isUnsubscribed()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// a real example would do work like a network call here</span></span><br><span class=\"line\">                        observer.onNext(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">                        observer.onNext(name + <span class=\"string\">\"!\"</span>);</span><br><span class=\"line\">                        observer.onCompleted();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    observer.onError(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125; );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Synchronous-Execution\"></a></p>\n<h2 id=\"Synchronous-Execution同步执行\"><a href=\"#Synchronous-Execution同步执行\" class=\"headerlink\" title=\"Synchronous Execution同步执行\"></a>Synchronous Execution同步执行</h2><p>用<a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#execute\\(\\\" target=\"_blank\" rel=\"external\"><code>execute()</code></a>)方法同步执行一个<code>HystrixCommand</code>，如下例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).execute();</span><br></pre></td></tr></table></figure>\n<p>单元测试执行和assert的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSynchronous</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello World!\"</span>, <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).execute());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Bob!\"</span>, <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"Bob\"</span>).execute());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"等同使用HystrixObservableCommand-1\"><a href=\"#等同使用HystrixObservableCommand-1\" class=\"headerlink\" title=\"等同使用HystrixObservableCommand\"></a>等同使用<code>HystrixObservableCommand</code></h4><p><code>HystrixObservableCommand</code> 没有<code>execute</code>方法，但如果知道<code>Observable</code>总是只生产一个单值，就使用<code>Observable</code>的<code>.toBlocking().toFuture().get()</code> 可以模仿<code>execute</code>行为。</p>\n<p><a name=\"Asynchronous-Execution\"></a></p>\n<h2 id=\"Asynchronous-Execution\"><a href=\"#Asynchronous-Execution\" class=\"headerlink\" title=\"Asynchronous Execution\"></a>Asynchronous Execution</h2><p>用<a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#queue\\(\\\" target=\"_blank\" rel=\"external\"><code>queue()</code></a>) 方法异步执行<code>HystrixCommand</code>，例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;String&gt; fs = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue();</span><br></pre></td></tr></table></figure>\n<p> 可以使用Future来获取command执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = fs.get();</span><br></pre></td></tr></table></figure>\n<p> 单元测试例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAsynchronous1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello World!\"</span>, <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue().get());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Bob!\"</span>, <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"Bob\"</span>).queue().get());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAsynchronous2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Future&lt;String&gt; fWorld = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue();</span><br><span class=\"line\">    Future&lt;String&gt; fBob = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"Bob\"</span>).queue();</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello World!\"</span>, fWorld.get());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Bob!\"</span>, fBob.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面的使用方式是等同的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).execute();</span><br><span class=\"line\">String s2 = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue().get();</span><br></pre></td></tr></table></figure>\n<h4 id=\"等同使用HystrixObservableCommand-2\"><a href=\"#等同使用HystrixObservableCommand-2\" class=\"headerlink\" title=\"等同使用HystrixObservableCommand\"></a>等同使用<code>HystrixObservableCommand</code></h4><p>There is no simple equivalent to <code>queue</code> for a <code>HystrixObservableCommand</code>, but if you know that the <code>Observable</code> produced by such a command must always produce only a single value, you can mimic the behavior of <code>queue</code> by applying the RxJava operators <code>.toBlocking().toFuture()</code> to the <code>Observable</code>.</p>\n<p><a name=\"Reactive-Execution\"></a></p>\n<h2 id=\"Reactive-Execution\"><a href=\"#Reactive-Execution\" class=\"headerlink\" title=\"Reactive Execution\"></a>Reactive Execution</h2><p>You can also observe the results of a <code>HystrixCommand</code> as an <code>Observable</code> by using one of the following methods:</p>\n<ul>\n<li><a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#observe\\(\\\" target=\"_blank\" rel=\"external\"><code>observe()</code></a>) &mdash; returns a &ldquo;hot&rdquo; Observable that executes the command immediately, though because the Observable is filtered through a <code>ReplaySubject</code> you are not in danger of losing any items that it emits before you have a chance to subscribe</li>\n<li><a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#toObservable\\(\\\" target=\"_blank\" rel=\"external\"><code>toObservable()</code></a>) &mdash; returns a &ldquo;cold&rdquo; Observable that won&#8217;t execute the command and begin emitting its results until you subscribe to the Observable</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;String&gt; ho = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).observe();</span><br><span class=\"line\"><span class=\"comment\">// or Observable&lt;String&gt; co = new CommandHelloWorld(\"World\").toObservable();</span></span><br></pre></td></tr></table></figure>\n<p>You then retrieve the value of the command by subscribing to the Observable:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ho.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">// value emitted here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>The following unit tests demonstrate the behavior:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testObservable</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Observable&lt;String&gt; fWorld = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).observe();</span><br><span class=\"line\">    Observable&lt;String&gt; fBob = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"Bob\"</span>).observe();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// blocking</span></span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello World!\"</span>, fWorld.toBlockingObservable().single());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Bob!\"</span>, fBob.toBlockingObservable().single());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// non-blocking </span></span><br><span class=\"line\">    <span class=\"comment\">// - this is a verbose anonymous inner-class approach and doesn't do assertions</span></span><br><span class=\"line\">    fWorld.subscribe(<span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// nothing needed here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String v)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"onNext: \"</span> + v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// non-blocking</span></span><br><span class=\"line\">    <span class=\"comment\">// - also verbose anonymous inner-class</span></span><br><span class=\"line\">    <span class=\"comment\">// - ignore errors and onCompleted signal</span></span><br><span class=\"line\">    fBob.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String v)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"onNext: \"</span> + v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Using Java 8 lambdas/closures is more compact; it would look like this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fWorld.subscribe((v) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"onNext: \"</span> + v);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// - or while also including error handling</span></span><br><span class=\"line\"></span><br><span class=\"line\">fWorld.subscribe((v) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"onNext: \"</span> + v);</span><br><span class=\"line\">&#125;, (exception) -&gt; &#123;</span><br><span class=\"line\">    exception.printStackTrace();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>More information about Observable can be found at <a href=\"http://reactivex.io/documentation/observable.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/observable.html</a></p>\n<p><a name=\"Reactive-Commands\"></a></p>\n<h2 id=\"Reactive-Commands\"><a href=\"#Reactive-Commands\" class=\"headerlink\" title=\"Reactive Commands\"></a>Reactive Commands</h2><p>Rather than converting a <code>HystrixCommand</code> into an <code>Observable</code> using the methods described above, you can also create a <code>HystrixObservableCommand</code> that is a specialized version of <code>HystrixCommand</code> meant to wrap Observables. A <code>HystrixObservableCommand</code> is capable of wrapping Observables that emit multiple items, whereas ordinary <code>HystrixCommands</code>, even when converted into Observables, will never emit more than one item.</p>\n<p>In such a case, instead of overriding the <code>run</code> method with your command logic (as you would with an ordinary <code>HystrixCommand</code>), you would override the <code>construct</code> method so that it returns the Observable you intend to wrap.</p>\n<p>To obtain an Observable representation of the <code>HystrixObservableCommand</code>, use one of the following two methods:</p>\n<ul>\n<li><a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#observe\\(\\\" target=\"_blank\" rel=\"external\"><code>observe()</code></a>) &mdash; returns a &ldquo;hot&rdquo; Observable that subscribes to the underlying Observable immediately, though because it is filtered through a <code>ReplaySubject</code> you are not in danger of losing any items that it emits before you have a chance to subscribe to the resulting Observable</li>\n<li><a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#toObservable\\(\\\" target=\"_blank\" rel=\"external\"><code>toObservable()</code></a>) &mdash; returns a &ldquo;cold&rdquo; Observable that won&#8217;t subscribe to the underlying Observable until you subscribe to the resulting Observable</li>\n</ul>\n<p><a name=\"Fallback\"></a></p>\n<h2 id=\"Fallback\"><a href=\"#Fallback\" class=\"headerlink\" title=\"Fallback\"></a>Fallback</h2><p>You can support graceful degradation in a Hystrix command by adding a fallback method that Hystrix will call to obtain a default value or values in case the main command fails.  You will want to implement a fallback for most Hystrix commands that might conceivably fail, with a couple of exceptions:</p>\n<ol>\n<li>a command that performs a write operation<ul>\n<li>If your Hystrix command is designed to do a write operation rather than to return a value (such a command might normally return a <code>void</code> in the case of a <code>HystrixCommand</code> or an empty Observable in the case of a <code>HystrixObservableCommand</code>), there isn&#8217;t much point in implementing a fallback. If the write fails, you probably want the failure to propagate back to the caller.</li>\n</ul>\n</li>\n<li>batch systems/offline compute<ul>\n<li>If your Hystrix command is filling up a cache, or generating a report, or doing any sort of offline computation, it&#8217;s usually more appropriate to propagate the error back to the caller who can then retry the command later, rather than to send the caller a silently-degraded response.</li>\n</ul>\n</li>\n</ol>\n<p>Whether or not your command has a fallback, all of the usual Hystrix state and circuit-breaker state/metrics are updated to indicate the command failure.</p>\n<p>In an ordinary <code>HystrixCommand</code> you implement a fallback by means of a <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback\\(\\\" target=\"_blank\" rel=\"external\"><code>getFallback()</code></a>) implementation. Hystrix will execute this fallback for all types of failure such as <code>run()</code> failure, timeout, thread pool or semaphore rejection, and circuit-breaker short-circuiting. The following example includes such a fallback:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHelloFailure</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloFailure</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"this command always fails\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Failure \"</span> + name + <span class=\"string\">\"!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandHelloFailure.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p>This command&#8217;s <code>run()</code> method will fail on every execution. However, the caller will always receive the value returned by the command&#8217;s <code>getFallback()</code> method instead of receiving an exception:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSynchronous</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Failure World!\"</span>, <span class=\"keyword\">new</span> CommandHelloFailure(<span class=\"string\">\"World\"</span>).execute());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Failure Bob!\"</span>, <span class=\"keyword\">new</span> CommandHelloFailure(<span class=\"string\">\"Bob\"</span>).execute());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent\"><a href=\"#HystrixObservableCommand-Equivalent\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>For a <code>HystrixObservableCommand</code> you instead may override the <code>resumeWithFallback</code> method so that it returns a second <code>Observable</code> that will take over from the primary <code>Observable</code> if it fails. Note that because an <code>Observable</code> may fail after having already emitted one or more items, your fallback should not assume that it will be emitting the only values that the observer will see.</p>\n<p>Internally, Hystrix uses the RxJava <a href=\"http://reactivex.io/documentation/operators/catch.html\" target=\"_blank\" rel=\"external\"><code>onErrorResumeNext</code></a> operator to seamlessly transition between the primary and fallback <code>Observable</code> in case of an error.</p>\n<p><a name=\"ErrorPropagation\"></a></p>\n<h2 id=\"Error-Propagation\"><a href=\"#Error-Propagation\" class=\"headerlink\" title=\"Error Propagation\"></a>Error Propagation</h2><p>All exceptions thrown from the <code>run()</code> method except for <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/exception/HystrixBadRequestException.html\" target=\"_blank\" rel=\"external\"><code>HystrixBadRequestException</code></a> count as failures and trigger <code>getFallback()</code> and circuit-breaker logic.</p>\n<p>You can wrap the exception that you would like to throw in <code>HystrixBadRequestException</code> and retrieve it via <code>getCause()</code>. The <code>HystrixBadRequestException</code> is intended for use cases such as reporting illegal arguments or non-system failures that should not count against the failure metrics and should not trigger fallback logic.</p>\n<h4 id=\"HystrixObservableCommand-Equivalent-1\"><a href=\"#HystrixObservableCommand-Equivalent-1\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>In the case of a <code>HystrixObservableCommand</code>, non-recoverable errors are returned via <code>onError</code> notifications from the resulting <code>Observable</code>, and fallbacks are accomplished by falling back to a second Observable that Hystrix obtains through the <code>resumeWithFallback</code> method that you implement.</p>\n<p><a name=\"CommandName\"></a></p>\n<h2 id=\"Command-Name\"><a href=\"#Command-Name\" class=\"headerlink\" title=\"Command Name\"></a>Command Name</h2><p>A command name is, by default, derived from the class name:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getClass().getSimpleName();</span><br></pre></td></tr></table></figure>\n<p>To explicitly define the name pass it in via the <code>HystrixCommand</code> or <code>HystrixObservableCommand</code> constructor:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">            .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"HelloWorld\"</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>To save a Setter allocation per command allocation, you may also cache the Setter like so:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Setter cachedSetter = </span><br><span class=\"line\">    Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">        .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"HelloWorld\"</span>));    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(cachedSetter);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.html\" target=\"_blank\" rel=\"external\"><code>HystrixCommandKey</code></a> is an interface and can be implemented as an enum or regular class, but it also has the helper <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.Factory.html\" target=\"_blank\" rel=\"external\"><code>Factory</code></a> class to construct and intern instances such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixCommandKey.Factory.asKey(<span class=\"string\">\"HelloWorld\"</span>)</span><br></pre></td></tr></table></figure>\n<p><a name=\"CommandGroup\"></a></p>\n<h2 id=\"Command-Group\"><a href=\"#Command-Group\" class=\"headerlink\" title=\"Command Group\"></a>Command Group</h2><p>Hystrix uses the command group key to group together commands such as for reporting, alerting, dashboards, or team/library ownership.</p>\n<p>By default Hystrix uses this to define the command thread-pool unless a separate one is defined.</p>\n<p><a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.html\" target=\"_blank\" rel=\"external\"><code>HystrixCommandGroupKey</code></a> is an interface and can be implemented as an enum or regular class, but it also has the helper <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.Factory.html\" target=\"_blank\" rel=\"external\"><code>Factory</code></a> class to construct and intern instances such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>)</span><br></pre></td></tr></table></figure>\n<p><a name=\"CommandThreadPool\"></a></p>\n<h2 id=\"Command-Thread-Pool\"><a href=\"#Command-Thread-Pool\" class=\"headerlink\" title=\"Command Thread-Pool\"></a>Command Thread-Pool</h2><p>The thread-pool key represents a <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPool.html\" target=\"_blank\" rel=\"external\"><code>HystrixThreadPool</code></a> for monitoring, metrics publishing, caching, and other such uses. A <code>HystrixCommand</code> is associated with a single <code>HystrixThreadPool</code> as retrieved by the <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.html\" target=\"_blank\" rel=\"external\"><code>HystrixThreadPoolKey</code></a> injected into it, or it defaults to one created using the <code>HystrixCommandGroupKey</code> it is created with.</p>\n<p>To explicitly define the name pass it in via the <code>HystrixCommand</code> or <code>HystrixObservableCommand</code> constructor:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">            .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"HelloWorld\"</span>))</span><br><span class=\"line\">            .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"HelloWorldPool\"</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.html\" target=\"_blank\" rel=\"external\"><code>HystrixThreadPoolKey</code></a> is an interface and can be implemented as an enum or regular class, but it also has the helper <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.Factory.html\" target=\"_blank\" rel=\"external\"><code>Factory</code></a> class to construct and intern instances such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"HelloWorldPool\"</span>)</span><br></pre></td></tr></table></figure>\n<p>The reason why you might use <code>HystrixThreadPoolKey</code> instead of just a different <code>HystrixCommandGroupKey</code> is that multiple commands may belong to the same &ldquo;group&rdquo; of ownership or logical functionality, but certain commands may need to be isolated from each other.</p>\n<p>Here is a simple example:</p>\n<ul>\n<li>two commands used to access Video metadata</li>\n<li>group name is &ldquo;VideoMetadata&rdquo;</li>\n<li>command A goes against resource #1</li>\n<li>command B goes against resource #2</li>\n</ul>\n<p>If command A becomes latent and saturates its thread-pool it should not prevent command B from executing requests since they each hit different back-end resources.</p>\n<p>Thus, we logically want these commands grouped together but want them isolated differently and would use <code>HystrixThreadPoolKey</code> to give each of them a different thread-pool.</p>\n<p><a name=\"Caching\"></a></p>\n<h2 id=\"Request-Cache\"><a href=\"#Request-Cache\" class=\"headerlink\" title=\"Request Cache\"></a>Request Cache</h2><p>You enable request caching by implementing the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getCacheKey\\(\\\" target=\"_blank\" rel=\"external\"><code>getCacheKey()</code></a>) method on a <code>HystrixCommand</code> or <code>HystrixObservableCommand</code> object as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandUsingRequestCache</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">Boolean</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">CommandUsingRequestCache</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Boolean <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value == <span class=\"number\">0</span> || value % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getCacheKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingRequestCache.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p>Since this depends on request context we must initialize the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html\" target=\"_blank\" rel=\"external\"><code>HystrixRequestContext</code></a>.</p>\n<p>In a simple unit test you could do this as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testWithoutCacheHits</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        assertTrue(<span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">2</span>).execute());</span><br><span class=\"line\">        assertFalse(<span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">1</span>).execute());</span><br><span class=\"line\">        assertTrue(<span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">0</span>).execute());</span><br><span class=\"line\">        assertTrue(<span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">58672</span>).execute());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        context.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Typically this context will be initialized and shut down via a <code>ServletFilter</code> that wraps a user request or some other lifecycle hook.</p>\n<p>The following is an example that shows how commands retrieve their values from the cache (and how you can query an object to know whether its value came from the cache) within a request context:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testWithCacheHits</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        CommandUsingRequestCache command2a = <span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">2</span>);</span><br><span class=\"line\">        CommandUsingRequestCache command2b = <span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(command2a.execute());</span><br><span class=\"line\">        <span class=\"comment\">// this is the first time we've executed this command with</span></span><br><span class=\"line\">        <span class=\"comment\">// the value of \"2\" so it should not be from cache</span></span><br><span class=\"line\">        assertFalse(command2a.isResponseFromCache());</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(command2b.execute());</span><br><span class=\"line\">        <span class=\"comment\">// this is the second time we've executed this command with</span></span><br><span class=\"line\">        <span class=\"comment\">// the same value so it should return from cache</span></span><br><span class=\"line\">        assertTrue(command2b.isResponseFromCache());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        context.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// start a new request context</span></span><br><span class=\"line\">    context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        CommandUsingRequestCache command3b = <span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">2</span>);</span><br><span class=\"line\">        assertTrue(command3b.execute());</span><br><span class=\"line\">        <span class=\"comment\">// this is a new request context so this </span></span><br><span class=\"line\">        <span class=\"comment\">// should not come from cache</span></span><br><span class=\"line\">        assertFalse(command3b.isResponseFromCache());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        context.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Collapsing\"></a></p>\n<h2 id=\"Request-Collapsing\"><a href=\"#Request-Collapsing\" class=\"headerlink\" title=\"Request Collapsing\"></a>Request Collapsing</h2><p>Request collapsing enables multiple requests to be batched into a single <code>HystrixCommand</code> instance execution.</p>\n<p>A collapser can use the batch size and the elapsed time since the creation of the batch as triggers for executing a batch.</p>\n<p>There are 2 styles of request-collapsing supported by Hystrix: request-scoped and globally-scoped.  This is configured at collapser construction, and defaulted to request-scoped.  </p>\n<p>A request-scoped collapser collects a batch per <code>HystrixRequestContext</code>, while a globally-scoped collapser collects a batch across multiple <code>HystrixRequestContext</code>s.  As a result, if your downstream dependencies cannot handle multiple <code>HystrixRequestContext</code>s in a single command invocation, request-scoped collapsing is the proper choice.  </p>\n<p>At Netflix, we exclusively use request-scoped collapsers because all current systems have been built on the assumption that a single <code>HystrixRequestContext</code> will be used in each command.  Since the batches are per-request only, collapsing is effective when commands occur in parallel with different arguments in the same request.</p>\n<p>Following is a simple example of how to implement a request-scoped <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCollapser.html\" target=\"_blank\" rel=\"external\"><code>HystrixCollapser</code></a>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandCollapserGetValueForKey</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCollapser</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">String</span>, <span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandCollapserGetValueForKey</span><span class=\"params\">(Integer key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getRequestArgument</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HystrixCommand&lt;List&lt;String&gt;&gt; createCommand(<span class=\"keyword\">final</span> Collection&lt;CollapsedRequest&lt;String, Integer&gt;&gt; requests) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BatchCommand(requests);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">mapResponseToRequests</span><span class=\"params\">(List&lt;String&gt; batchResponse, Collection&lt;CollapsedRequest&lt;String, Integer&gt;&gt; requests)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (CollapsedRequest&lt;String, Integer&gt; request : requests) &#123;</span><br><span class=\"line\">            request.setResponse(batchResponse.get(count++));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BatchCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">String</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Collection&lt;CollapsedRequest&lt;String, Integer&gt;&gt; requests;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">BatchCommand</span><span class=\"params\">(Collection&lt;CollapsedRequest&lt;String, Integer&gt;&gt; requests)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"GetValueForKey\"</span>)));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.requests = requests;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            ArrayList&lt;String&gt; response = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (CollapsedRequest&lt;String, Integer&gt; request : requests) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// artificial response for each argument received in the batch</span></span><br><span class=\"line\">                response.add(<span class=\"string\">\"ValueForKey: \"</span> + request.getArgument());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandCollapserGetValueForKey.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p>The following unit test shows how to use a collapser to automatically batch four executions of <code>CommandCollapserGetValueForKey</code> into a single <code>HystrixCommand</code> execution:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCollapser</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Future&lt;String&gt; f1 = <span class=\"keyword\">new</span> CommandCollapserGetValueForKey(<span class=\"number\">1</span>).queue();</span><br><span class=\"line\">        Future&lt;String&gt; f2 = <span class=\"keyword\">new</span> CommandCollapserGetValueForKey(<span class=\"number\">2</span>).queue();</span><br><span class=\"line\">        Future&lt;String&gt; f3 = <span class=\"keyword\">new</span> CommandCollapserGetValueForKey(<span class=\"number\">3</span>).queue();</span><br><span class=\"line\">        Future&lt;String&gt; f4 = <span class=\"keyword\">new</span> CommandCollapserGetValueForKey(<span class=\"number\">4</span>).queue();</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"ValueForKey: 1\"</span>, f1.get());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"ValueForKey: 2\"</span>, f2.get());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"ValueForKey: 3\"</span>, f3.get());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"ValueForKey: 4\"</span>, f4.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// assert that the batch command 'GetValueForKey' was in fact</span></span><br><span class=\"line\">        <span class=\"comment\">// executed and that it executed only once</span></span><br><span class=\"line\">        assertEquals(<span class=\"number\">1</span>, HystrixRequestLog.getCurrentRequest().getExecutedCommands().size());</span><br><span class=\"line\">        HystrixCommand&lt;?&gt; command = HystrixRequestLog.getCurrentRequest().getExecutedCommands().toArray(<span class=\"keyword\">new</span> HystrixCommand&lt;?&gt;[<span class=\"number\">1</span>])[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// assert the command is the one we're expecting</span></span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"GetValueForKey\"</span>, command.getCommandKey().name());</span><br><span class=\"line\">        <span class=\"comment\">// confirm that it was a COLLAPSED command execution</span></span><br><span class=\"line\">        assertTrue(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));</span><br><span class=\"line\">        <span class=\"comment\">// and that it was successful</span></span><br><span class=\"line\">        assertTrue(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        context.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"RequestContextSetup\"></a></p>\n<h2 id=\"Request-Context-Setup\"><a href=\"#Request-Context-Setup\" class=\"headerlink\" title=\"Request Context Setup\"></a>Request Context Setup</h2><p>To use request-scoped features (request caching, request collapsing, request log) you must manage the <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html\" target=\"_blank\" rel=\"external\"><code>HystrixRequestContext</code></a> lifecycle (or implement an alternative <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.html\" target=\"_blank\" rel=\"external\"><code>HystrixConcurrencyStrategy</code></a>).</p>\n<p>This means that you must execute the following before a request:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br></pre></td></tr></table></figure>\n<p>and then this at the end of the request:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.shutdown();</span><br></pre></td></tr></table></figure>\n<p>In a standard Java web application, you can use a Servlet Filter to initialize this lifecycle by implementing a filter similar to this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixRequestContextServletFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span><br><span class=\"line\">     <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            chain.doFilter(request, response);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            context.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You could enable the filter for all incoming traffic by adding a section to the <code>web.xml</code> as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;filter&gt;</span><br><span class=\"line\">   &lt;display-name&gt;HystrixRequestContextServletFilter&lt;/display-name&gt;</span><br><span class=\"line\">   &lt;filter-name&gt;HystrixRequestContextServletFilter&lt;/filter-name&gt;</span><br><span class=\"line\">   &lt;filter-class&gt;com.netflix.hystrix.contrib.requestservlet.HystrixRequestContextServletFilter&lt;/filter-class&gt;</span><br><span class=\"line\"> &lt;/filter&gt;</span><br><span class=\"line\"> &lt;filter-mapping&gt;</span><br><span class=\"line\">   &lt;filter-name&gt;HystrixRequestContextServletFilter&lt;/filter-name&gt;</span><br><span class=\"line\">   &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Common-Patterns\"></a></p>\n<h2 id=\"Common-Patterns\"><a href=\"#Common-Patterns\" class=\"headerlink\" title=\"Common Patterns\"></a>Common Patterns</h2><p>In the following sections are common uses and patterns of use for <code>HystrixCommand</code> and <code>HystrixObservableCommand</code>.</p>\n<p><a name=\"Common-Patterns-FailFast\"></a></p>\n<h3 id=\"Fail-Fast\"><a href=\"#Fail-Fast\" class=\"headerlink\" title=\"Fail Fast\"></a>Fail Fast</h3><p>The most basic execution is one that does a single thing and has no fallback behavior. It will throw an exception if any type of failure occurs.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandThatFailsFast</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> throwException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandThatFailsFast</span><span class=\"params\">(<span class=\"keyword\">boolean</span> throwException)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.throwException = throwException;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (throwException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"failure from CommandThatFailsFast\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandThatFailsFast.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p>These unit tests show how it behaves:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"success\"</span>, <span class=\"keyword\">new</span> CommandThatFailsFast(<span class=\"keyword\">false</span>).execute());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CommandThatFailsFast(<span class=\"keyword\">true</span>).execute();</span><br><span class=\"line\">        fail(<span class=\"string\">\"we should have thrown an exception\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HystrixRuntimeException e) &#123;</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"failure from CommandThatFailsFast\"</span>, e.getCause().getMessage());</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent-2\"><a href=\"#HystrixObservableCommand-Equivalent-2\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>The equivalent Fail-Fast solution for a <code>HystrixObservableCommand</code> would involve overriding the <code>resumeWithFallback</code> method as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;String&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (throwException) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.error(<span class=\"keyword\">new</span> Throwable(<span class=\"string\">\"failure from CommandThatFailsFast\"</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.just(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Common-Patterns-FailSilent\"></a></p>\n<h3 id=\"Fail-Silent\"><a href=\"#Fail-Silent\" class=\"headerlink\" title=\"Fail Silent\"></a>Fail Silent</h3><p>Failing silently is the equivalent of returning an empty response or removing functionality. It can be done by returning <code>null</code>, an empty Map, empty List, or other such responses.</p>\n<p>You do this by implementing a <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback\\(\\\" target=\"_blank\" rel=\"external\"><code>getFallback()</code></a>) method on the <code>HystrixCommand</code> instance:</p>\n<p>[[images/fallback-640.png]]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandThatFailsSilently</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> throwException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandThatFailsSilently</span><span class=\"params\">(<span class=\"keyword\">boolean</span> throwException)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.throwException = throwException;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (throwException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"failure from CommandThatFailsFast\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandThatFailsSilently.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"success\"</span>, <span class=\"keyword\">new</span> CommandThatFailsSilently(<span class=\"keyword\">false</span>).execute());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        assertEquals(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CommandThatFailsSilently(<span class=\"keyword\">true</span>).execute());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HystrixRuntimeException e) &#123;</span><br><span class=\"line\">        fail(<span class=\"string\">\"we should not get an exception as we fail silently with a fallback\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Another implementation that returns an empty list would look like:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent-3\"><a href=\"#HystrixObservableCommand-Equivalent-3\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>The equivalent Fail-Silently solution for a <code>HystrixObservableCommand</code> would involve overriding the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#resumeWithFallback\\(\\\" target=\"_blank\" rel=\"external\"><code>resumeWithFallback()</code></a>) method as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;String&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.empty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Common-Patterns-FallbackStatic\"></a></p>\n<h3 id=\"Fallback-Static\"><a href=\"#Fallback-Static\" class=\"headerlink\" title=\"Fallback: Static\"></a>Fallback: Static</h3><p>Fallbacks can return default values statically embedded in code. This doesn&#8217;t cause the feature or service to be removed in the way that &ldquo;fail silent&rdquo; often does, but instead causes default behavior to occur.</p>\n<p>For example, if a command returns a true/false based on user credentials but the command execution fails, it can default to true:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Boolean <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent-4\"><a href=\"#HystrixObservableCommand-Equivalent-4\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>The equivalent Static solution for a <code>HystrixObservableCommand</code> would involve overriding the <code>resumeWithFallback</code> method as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;Boolean&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.just( <span class=\"keyword\">true</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Common-Patterns-FallbackStubbed\"></a></p>\n<h3 id=\"Fallback-Stubbed\"><a href=\"#Fallback-Stubbed\" class=\"headerlink\" title=\"Fallback: Stubbed\"></a>Fallback: Stubbed</h3><p>You typically use a stubbed fallback when your command returns a compound object containing multiple fields, some of which can be determined from other request state while other fields are set to default values.</p>\n<p>Examples of places where you might find state appropriate to use in these stubbed values are:</p>\n<ul>\n<li>cookies</li>\n<li>request arguments and headers</li>\n<li>responses from previous service requests prior to the current one failing</li>\n</ul>\n<p>Your fallback can retrieve stubbed values statically from the request scope, but typically it is recommended that they be injected at command instantiation time for use if they are needed such as this following example demonstrates in the way it treats the <code>countryCodeFromGeoLookup</code> field:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandWithStubbedFallback</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">UserAccount</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> customerId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String countryCodeFromGeoLookup;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> customerId</span><br><span class=\"line\">     *            The customerID to retrieve UserAccount for</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> countryCodeFromGeoLookup</span><br><span class=\"line\">     *            The default country code from the HTTP request geo code lookup used for fallback.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">CommandWithStubbedFallback</span><span class=\"params\">(<span class=\"keyword\">int</span> customerId, String countryCodeFromGeoLookup)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customerId = customerId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.countryCodeFromGeoLookup = countryCodeFromGeoLookup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> UserAccount <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// fetch UserAccount from remote service</span></span><br><span class=\"line\">        <span class=\"comment\">//        return UserAccountClient.getAccount(customerId);</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"forcing failure for example\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> UserAccount <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span><br><span class=\"line\">         * Return stubbed fallback with some static defaults, placeholders,</span><br><span class=\"line\">         * and an injected value 'countryCodeFromGeoLookup' that we'll use</span><br><span class=\"line\">         * instead of what we would have retrieved from the remote service.</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UserAccount(customerId, <span class=\"string\">\"Unknown Name\"</span>,</span><br><span class=\"line\">                countryCodeFromGeoLookup, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAccount</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> customerId;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String countryCode;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isFeatureXPermitted;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isFeatureYPermitted;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isFeatureZPermitted;</span><br><span class=\"line\"></span><br><span class=\"line\">        UserAccount(<span class=\"keyword\">int</span> customerId, String name, String countryCode,</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isFeatureXPermitted,</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isFeatureYPermitted,</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isFeatureZPermitted) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.customerId = customerId;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.countryCode = countryCode;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isFeatureXPermitted = isFeatureXPermitted;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isFeatureYPermitted = isFeatureYPermitted;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isFeatureZPermitted = isFeatureZPermitted;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandWithStubbedFallback.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p>The following unit test demonstrates its behavior:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CommandWithStubbedFallback command = <span class=\"keyword\">new</span> CommandWithStubbedFallback(<span class=\"number\">1234</span>, <span class=\"string\">\"ca\"</span>);</span><br><span class=\"line\">    UserAccount account = command.execute();</span><br><span class=\"line\">    assertTrue(command.isFailedExecution());</span><br><span class=\"line\">    assertTrue(command.isResponseFromFallback());</span><br><span class=\"line\">    assertEquals(<span class=\"number\">1234</span>, account.customerId);</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"ca\"</span>, account.countryCode);</span><br><span class=\"line\">    assertEquals(<span class=\"keyword\">true</span>, account.isFeatureXPermitted);</span><br><span class=\"line\">    assertEquals(<span class=\"keyword\">true</span>, account.isFeatureYPermitted);</span><br><span class=\"line\">    assertEquals(<span class=\"keyword\">false</span>, account.isFeatureZPermitted);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent-5\"><a href=\"#HystrixObservableCommand-Equivalent-5\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>The equivalent Stubbed solution for a <code>HystrixObservableCommand</code> would involve overriding the <code>resumeWithFallback</code> method to return an <code>Observable</code> that emits the stub responses. A version equivalent to the previous example would look like this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;Boolean&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.just( <span class=\"keyword\">new</span> UserAccount(customerId, <span class=\"string\">\"Unknown Name\"</span>,</span><br><span class=\"line\">                                            countryCodeFromGeoLookup, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>) );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>But if you are expecting to emit multiple items from your <code>Observable</code>, you may be more interested in generating stubs for only those items that the original <code>Observable</code> had not yet emitted before it failed. Here is a simple example to show how you might accomplish this &mdash; it keeps track of the last item emitted from the main <code>Observable</code> so that the fallback knows where to pick up to continue the sequence:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;Integer&gt; <span class=\"title\">construct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            .concatWith(Observable.&lt;Integer&gt; error(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"forced error\"</span>)))</span><br><span class=\"line\">            .doOnNext(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer t1)</span> </span>&#123;</span><br><span class=\"line\">                    lastSeen = t1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .subscribeOn(Schedulers.computation());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;Integer&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastSeen &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.range(lastSeen + <span class=\"number\">1</span>, <span class=\"number\">4</span> - lastSeen);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Common-Patterns-FallbackCacheViaNetwork\"></a></p>\n<h3 id=\"Fallback-Cache-via-Network\"><a href=\"#Fallback-Cache-via-Network\" class=\"headerlink\" title=\"Fallback: Cache via Network\"></a>Fallback: Cache via Network</h3><p>Sometimes if a back-end service fails, a stale version of data can be retrieved from a cache service such as memcached.</p>\n<p>Since the fallback will go over the network it is another possible point of failure and so it also needs to be wrapped by a <code>HystrixCommand</code> or <code>HystrixObservableCommand</code>.</p>\n<p>[[images/fallback-via-command-640.png]]</p>\n<p>It is important to execute the fallback command on a separate thread-pool, otherwise if the main command were to become latent and fill the thread-pool, this would prevent the fallback from running if the two commands share the same pool.</p>\n<p>The following code shows how <code>CommandWithFallbackViaNetwork</code> executes <code>FallbackViaNetwork</code> in its <code>getFallback()</code> method.</p>\n<p>Note how if the fallback fails, it <em>also</em> has a fallback which does the &ldquo;fail silent&rdquo; approach of returning <code>null</code>.</p>\n<p>To configure the <code>FallbackViaNetwork</code> command to run on a different threadpool than the default <code>RemoteServiceX</code> derived from the <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.html\" target=\"_blank\" rel=\"external\"><code>HystrixCommandGroupKey</code></a>, it injects <code>HystrixThreadPoolKey.Factory.asKey(&quot;RemoteServiceXFallback&quot;)</code> into the constructor.</p>\n<p>This means <code>CommandWithFallbackViaNetwork</code> will run on a thread-pool named <code>RemoteServiceX</code> and <code>FallbackViaNetwork</code> will run on a thread-pool named <code>RemoteServiceXFallback</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandWithFallbackViaNetwork</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">CommandWithFallbackViaNetwork</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"RemoteServiceX\"</span>))</span><br><span class=\"line\">                .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"GetValueCommand\"</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//        RemoteServiceXClient.getValue(id);</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"force failure for example\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FallbackViaNetwork(id).execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FallbackViaNetwork</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FallbackViaNetwork</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"RemoteServiceX\"</span>))</span><br><span class=\"line\">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"GetValueFallbackCommand\"</span>))</span><br><span class=\"line\">                    <span class=\"comment\">// use a different threadpool for the fallback command</span></span><br><span class=\"line\">                    <span class=\"comment\">// so saturating the RemoteServiceX pool won't prevent</span></span><br><span class=\"line\">                    <span class=\"comment\">// fallbacks from executing</span></span><br><span class=\"line\">                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"RemoteServiceXFallback\"</span>)));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            MemCacheClient.getValue(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// the fallback also failed</span></span><br><span class=\"line\">            <span class=\"comment\">// so this fallback-of-a-fallback will </span></span><br><span class=\"line\">            <span class=\"comment\">// fail silently and return null</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandWithFallbackViaNetwork.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p><a name=\"Common-Patterns-PrimarySecondaryWithFallback\"></a></p>\n<h3 id=\"Primary-Secondary-with-Fallback\"><a href=\"#Primary-Secondary-with-Fallback\" class=\"headerlink\" title=\"Primary + Secondary with Fallback\"></a>Primary + Secondary with Fallback</h3><p>Some systems have dual-mode behavior &mdash; primary and secondary, or primary and failover.</p>\n<p>Sometimes the secondary or failover is considered a failure state and it is intended only for fallback; in those scenarios it would fit in the same pattern as &ldquo;Cache via Network&rdquo; described above.</p>\n<p>However, if flipping to the secondary system is common, such as a normal part of rolling out new code (sometimes this is part of how stateful systems handle code pushes) then every time the secondary system is used the primary will be in a failure state, tripping circuit breakers and firing alerts.</p>\n<p>This is not the desired behavior, if for no other reason than to avoid the &ldquo;cry wolf&rdquo; fatigue that will cause alerts to be ignored when a real issue is occurring.</p>\n<p>So in such a case the strategy is instead to treat the switching between primary and secondary as normal, healthy patterns and put a fa&ccedil;ade in front of them.</p>\n<p>[[images/primary-secondary-example-640.png]]</p>\n<p>The primary and secondary <code>HystrixCommand</code> implementations are thread-isolated since they are doing network traffic and business logic. They may each have very different performance characteristics (often the secondary system is a static cache) so another benefit of separate commands for each is that they can be individually tuned.</p>\n<p>You do not expose these two commands publicly but you instead hide them behind another <code>HystrixCommand</code> that is semaphore-isolated and that implements the conditional logic as to whether to invoke the primary or secondary command. If both primary and secondary fail then control switches to the fallback of the fa&ccedil;ade command itself.</p>\n<p>The fa&ccedil;ade <code>HystrixCommand</code> can use semaphore-isolation since all of the work it is doing is going through two other <code>HystrixCommand</code>s that are already thread-isolated. It is unnecessary to have yet another layer of threading as long as the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run\\(\\\" target=\"_blank\" rel=\"external\"><code>run()</code></a>) method of the fa&ccedil;ade is not doing any other network calls, retry logic, or other &ldquo;error prone&rdquo; things.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandFacadeWithPrimarySecondary</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DynamicBooleanProperty usePrimary = DynamicPropertyFactory.getInstance().getBooleanProperty(<span class=\"string\">\"primarySecondary.usePrimary\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandFacadeWithPrimarySecondary</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Setter</span><br><span class=\"line\">                .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"SystemX\"</span>))</span><br><span class=\"line\">                .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"PrimarySecondaryCommand\"</span>))</span><br><span class=\"line\">                .andCommandPropertiesDefaults(</span><br><span class=\"line\">                        <span class=\"comment\">// we want to default to semaphore-isolation since this wraps</span></span><br><span class=\"line\">                        <span class=\"comment\">// 2 others commands that are already thread isolated</span></span><br><span class=\"line\">                        HystrixCommandProperties.Setter()</span><br><span class=\"line\">                                .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (usePrimary.get()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrimaryCommand(id).execute();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SecondaryCommand(id).execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"static-fallback-\"</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getCacheKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">PrimaryCommand</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(Setter</span><br><span class=\"line\">                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"SystemX\"</span>))</span><br><span class=\"line\">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"PrimaryCommand\"</span>))</span><br><span class=\"line\">                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"PrimaryCommand\"</span>))</span><br><span class=\"line\">                    .andCommandPropertiesDefaults(</span><br><span class=\"line\">                            <span class=\"comment\">// we default to a 600ms timeout for primary</span></span><br><span class=\"line\">                            HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class=\"number\">600</span>)));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// perform expensive 'primary' service call</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"responseFromPrimary-\"</span> + id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondaryCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SecondaryCommand</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(Setter</span><br><span class=\"line\">                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"SystemX\"</span>))</span><br><span class=\"line\">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"SecondaryCommand\"</span>))</span><br><span class=\"line\">                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"SecondaryCommand\"</span>))</span><br><span class=\"line\">                    .andCommandPropertiesDefaults(</span><br><span class=\"line\">                            <span class=\"comment\">// we default to a 100ms timeout for secondary</span></span><br><span class=\"line\">                            HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class=\"number\">100</span>)));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// perform fast 'secondary' service call</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"responseFromSecondary-\"</span> + id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnitTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPrimary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ConfigurationManager.getConfigInstance().setProperty(<span class=\"string\">\"primarySecondary.usePrimary\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                assertEquals(<span class=\"string\">\"responseFromPrimary-20\"</span>, <span class=\"keyword\">new</span> CommandFacadeWithPrimarySecondary(<span class=\"number\">20</span>).execute());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                context.shutdown();</span><br><span class=\"line\">                ConfigurationManager.getConfigInstance().clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSecondary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ConfigurationManager.getConfigInstance().setProperty(<span class=\"string\">\"primarySecondary.usePrimary\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                assertEquals(<span class=\"string\">\"responseFromSecondary-20\"</span>, <span class=\"keyword\">new</span> CommandFacadeWithPrimarySecondary(<span class=\"number\">20</span>).execute());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                context.shutdown();</span><br><span class=\"line\">                ConfigurationManager.getConfigInstance().clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandFacadeWithPrimarySecondary.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p><a name=\"Common-Patterns-Semaphore\"></a></p>\n<h3 id=\"Client-Doesn’t-Perform-Network-Access\"><a href=\"#Client-Doesn’t-Perform-Network-Access\" class=\"headerlink\" title=\"Client Doesn’t Perform Network Access\"></a>Client Doesn’t Perform Network Access</h3><p>When you wrap behavior that does not perform network access, but where latency is a concern or the threading overhead is unacceptable, you can set the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.html#executionIsolationStrategy\\(\\\" target=\"_blank\" rel=\"external\"><code>executionIsolationStrategy</code></a>) property to <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.ExecutionIsolationStrategy.html\" target=\"_blank\" rel=\"external\"><code>ExecutionIsolationStrategy</code></a><code>.SEMAPHORE</code> and Hystrix will use semaphore isolation instead.</p>\n<p>The following shows how to set this property as the default for a command via code (you can also override it via dynamic properties at runtime).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandUsingSemaphoreIsolation</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandUsingSemaphoreIsolation</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">                <span class=\"comment\">// since we're doing an in-memory cache lookup we choose SEMAPHORE isolation</span></span><br><span class=\"line\">                .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()</span><br><span class=\"line\">                        .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// a real implementation would retrieve data from in memory data structure</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ValueFromHashMap_\"</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingSemaphoreIsolation.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p><a name=\"Common-Patterns-GetSetGet\"></a></p>\n<h3 id=\"Get-Set-Get-with-Request-Cache-Invalidation\"><a href=\"#Get-Set-Get-with-Request-Cache-Invalidation\" class=\"headerlink\" title=\"Get-Set-Get with Request Cache Invalidation\"></a>Get-Set-Get with Request Cache Invalidation</h3><p>If you are implementing a Get-Set-Get use case where the Get receives enough traffic that request caching is desired but sometimes a Set occurs on another command that should invalidate the cache within the same request, you can invalidate the cache by calling <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixRequestCache.html#clear\\(java.lang.String\\\" target=\"_blank\" rel=\"external\"><code>HystrixRequestCache.clear()</code></a>).</p>\n<p>Here is an example implementation:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandUsingRequestCacheInvalidation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* represents a remote data store */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> String prefixStoredOnRemoteDataStore = <span class=\"string\">\"ValueBeforeSet_\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetterCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HystrixCommandKey GETTER_KEY = HystrixCommandKey.Factory.asKey(<span class=\"string\">\"GetterCommand\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GetterCommand</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"GetSetGet\"</span>))</span><br><span class=\"line\">                    .andCommandKey(GETTER_KEY));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> prefixStoredOnRemoteDataStore + id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getCacheKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span><br><span class=\"line\">         * Allow the cache to be flushed for this object.</span><br><span class=\"line\">         * </span><br><span class=\"line\">         * <span class=\"doctag\">@param</span> id</span><br><span class=\"line\">         *            argument that would normally be passed to the command</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">flushCache</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            HystrixRequestCache.getInstance(GETTER_KEY,</span><br><span class=\"line\">                    HystrixConcurrencyStrategyDefault.getInstance()).clear(String.valueOf(id));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetterCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SetterCommand</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String prefix)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"GetSetGet\"</span>));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.prefix = prefix;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// persist the value against the datastore</span></span><br><span class=\"line\">            prefixStoredOnRemoteDataStore = prefix;</span><br><span class=\"line\">            <span class=\"comment\">// flush the cache</span></span><br><span class=\"line\">            GetterCommand.flushCache(id);</span><br><span class=\"line\">            <span class=\"comment\">// no return value</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingRequestCacheInvalidation.java\" target=\"_blank\" rel=\"external\">View Source</a></p>\n<p>The unit test that confirms the behavior is:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getGetSetGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            assertEquals(<span class=\"string\">\"ValueBeforeSet_1\"</span>, <span class=\"keyword\">new</span> GetterCommand(<span class=\"number\">1</span>).execute());</span><br><span class=\"line\">            GetterCommand commandAgainstCache = <span class=\"keyword\">new</span> GetterCommand(<span class=\"number\">1</span>);</span><br><span class=\"line\">            assertEquals(<span class=\"string\">\"ValueBeforeSet_1\"</span>, commandAgainstCache.execute());</span><br><span class=\"line\">            <span class=\"comment\">// confirm it executed against cache the second time</span></span><br><span class=\"line\">            assertTrue(commandAgainstCache.isResponseFromCache());</span><br><span class=\"line\">            <span class=\"comment\">// set the new value</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> SetterCommand(<span class=\"number\">1</span>, <span class=\"string\">\"ValueAfterSet_\"</span>).execute();</span><br><span class=\"line\">            <span class=\"comment\">// fetch it again</span></span><br><span class=\"line\">            GetterCommand commandAfterSet = <span class=\"keyword\">new</span> GetterCommand(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// the getter should return with the new prefix, not the value from cache</span></span><br><span class=\"line\">            assertFalse(commandAfterSet.isResponseFromCache());</span><br><span class=\"line\">            assertEquals(<span class=\"string\">\"ValueAfterSet_1\"</span>, commandAfterSet.execute());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            context.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"MigratingLibrary\"></a></p>\n<h2 id=\"Migrating-a-Library-to-Hystrix\"><a href=\"#Migrating-a-Library-to-Hystrix\" class=\"headerlink\" title=\"Migrating a Library to Hystrix\"></a>Migrating a Library to Hystrix</h2><p>When you are migrating an existing client library to use Hystrix, you should replace each of the &ldquo;service methods&rdquo; with a <code>HystrixCommand</code>.</p>\n<p>The service methods should then forward calls to the <code>HystrixCommand</code> and not have any additional business logic in them.</p>\n<p>Thus, before migration a service library may look like this:</p>\n<p>[[images/library-migration-to-hystrix-without-640.png]]</p>\n<p>After migrating, users of a library will be able to access the <code>HystrixCommand</code>s directly or indirectly via the service facade that delegates to the <code>HystrixCommand</code>s.</p>\n<p>[[images/library-migration-to-hystrix-with-640.png]]</p>\n","excerpt":"","more":"<h2 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h2><ol>\n<li><a href=\"#Hello-World\">&ldquo;Hello World!&rdquo;</a></li>\n<li><a href=\"#Synchronous-Execution\">Synchronous Execution</a></li>\n<li><a href=\"#Asynchronous-Execution\">Asynchronous Execution</a></li>\n<li><a href=\"#Reactive-Execution\">Reactive Execution</a></li>\n<li><a href=\"#Reactive-Commands\">Reactive Commands</a></li>\n<li><a href=\"#Fallback\">Fallback</a></li>\n<li><a href=\"#ErrorPropagation\">Error Propagation</a></li>\n<li><a href=\"#CommandName\">Command Name</a></li>\n<li><a href=\"#CommandGroup\">Command Group</a></li>\n<li><a href=\"#CommandThreadPool\">Command Thread-Pool</a></li>\n<li><a href=\"#Caching\">Request Cache</a></li>\n<li><a href=\"#Collapsing\">Request Collapsing</a></li>\n<li><a href=\"#RequestContextSetup\">Request Context Setup</a></li>\n<li><a href=\"#Common-Patterns\">Common Patterns:</a><ol>\n<li><a href=\"#Common-Patterns-FailFast\">Fail Fast</a></li>\n<li><a href=\"#Common-Patterns-FailSilent\">Fail Silent</a></li>\n<li><a href=\"#Common-Patterns-FallbackStatic\">Fallback: Static</a></li>\n<li><a href=\"#Common-Patterns-FallbackStubbed\">Fallback: Stubbed</a></li>\n<li><a href=\"#Common-Patterns-FallbackCacheViaNetwork\">Fallback: Cache via Network</a></li>\n<li><a href=\"#Common-Patterns-PrimarySecondaryWithFallback\">Primary + Secondary with Fallback</a></li>\n<li><a href=\"#Common-Patterns-Sempahore\">Client Doesn&#8217;t Perform Network Access</a></li>\n<li><a href=\"#Common-Patterns-GetSetGet\">Get-Set-Get with Request Cache Invalidation</a></li>\n</ol>\n</li>\n<li><a href=\"#MigratingLibrary\">Migrating a Library to Hystrix</a></li>\n</ol>\n<p><a name='Hello-World'/></p>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World!\"></a>Hello World!</h2><p>实现一个<a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommand.html\"><code>HystrixCommand</code></a>最简单的&ldquo;Hello World&rdquo;例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// a real example would do work like a network call here</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name + <span class=\"string\">\"!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandHelloWorld.java\">View Source</a></p>\n<h4 id=\"等同使用HystrixObservableCommand\"><a href=\"#等同使用HystrixObservableCommand\" class=\"headerlink\" title=\"等同使用HystrixObservableCommand\"></a>等同使用<code>HystrixObservableCommand</code></h4><p>和&ldquo;Hello World&rdquo;等同的实现，用<a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixObservableCommand.html\"><code>HystrixObservableCommand</code></a> 替代<code>HystrixCommand</code>，并包含一个overriding <code>construct</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixObservableCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;String&gt; <span class=\"title\">construct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!observer.isUnsubscribed()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// a real example would do work like a network call here</span></span><br><span class=\"line\">                        observer.onNext(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">                        observer.onNext(name + <span class=\"string\">\"!\"</span>);</span><br><span class=\"line\">                        observer.onCompleted();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    observer.onError(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125; );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name='Synchronous-Execution'/></p>\n<h2 id=\"Synchronous-Execution同步执行\"><a href=\"#Synchronous-Execution同步执行\" class=\"headerlink\" title=\"Synchronous Execution同步执行\"></a>Synchronous Execution同步执行</h2><p>用<a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#execute\\(\\\"><code>execute()</code></a>)方法同步执行一个<code>HystrixCommand</code>，如下例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).execute();</span><br></pre></td></tr></table></figure>\n<p>单元测试执行和assert的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSynchronous</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello World!\"</span>, <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).execute());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Bob!\"</span>, <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"Bob\"</span>).execute());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"等同使用HystrixObservableCommand-1\"><a href=\"#等同使用HystrixObservableCommand-1\" class=\"headerlink\" title=\"等同使用HystrixObservableCommand\"></a>等同使用<code>HystrixObservableCommand</code></h4><p><code>HystrixObservableCommand</code> 没有<code>execute</code>方法，但如果知道<code>Observable</code>总是只生产一个单值，就使用<code>Observable</code>的<code>.toBlocking().toFuture().get()</code> 可以模仿<code>execute</code>行为。</p>\n<p><a name='Asynchronous-Execution'/></p>\n<h2 id=\"Asynchronous-Execution\"><a href=\"#Asynchronous-Execution\" class=\"headerlink\" title=\"Asynchronous Execution\"></a>Asynchronous Execution</h2><p>用<a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#queue\\(\\\"><code>queue()</code></a>) 方法异步执行<code>HystrixCommand</code>，例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;String&gt; fs = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue();</span><br></pre></td></tr></table></figure>\n<p> 可以使用Future来获取command执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = fs.get();</span><br></pre></td></tr></table></figure>\n<p> 单元测试例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAsynchronous1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello World!\"</span>, <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue().get());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Bob!\"</span>, <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"Bob\"</span>).queue().get());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAsynchronous2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Future&lt;String&gt; fWorld = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue();</span><br><span class=\"line\">    Future&lt;String&gt; fBob = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"Bob\"</span>).queue();</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello World!\"</span>, fWorld.get());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Bob!\"</span>, fBob.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面的使用方式是等同的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).execute();</span><br><span class=\"line\">String s2 = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).queue().get();</span><br></pre></td></tr></table></figure>\n<h4 id=\"等同使用HystrixObservableCommand-2\"><a href=\"#等同使用HystrixObservableCommand-2\" class=\"headerlink\" title=\"等同使用HystrixObservableCommand\"></a>等同使用<code>HystrixObservableCommand</code></h4><p>There is no simple equivalent to <code>queue</code> for a <code>HystrixObservableCommand</code>, but if you know that the <code>Observable</code> produced by such a command must always produce only a single value, you can mimic the behavior of <code>queue</code> by applying the RxJava operators <code>.toBlocking().toFuture()</code> to the <code>Observable</code>.</p>\n<p><a name='Reactive-Execution'/></p>\n<h2 id=\"Reactive-Execution\"><a href=\"#Reactive-Execution\" class=\"headerlink\" title=\"Reactive Execution\"></a>Reactive Execution</h2><p>You can also observe the results of a <code>HystrixCommand</code> as an <code>Observable</code> by using one of the following methods:</p>\n<ul>\n<li><a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#observe\\(\\\"><code>observe()</code></a>) &mdash; returns a &ldquo;hot&rdquo; Observable that executes the command immediately, though because the Observable is filtered through a <code>ReplaySubject</code> you are not in danger of losing any items that it emits before you have a chance to subscribe</li>\n<li><a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#toObservable\\(\\\"><code>toObservable()</code></a>) &mdash; returns a &ldquo;cold&rdquo; Observable that won&#8217;t execute the command and begin emitting its results until you subscribe to the Observable</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;String&gt; ho = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).observe();</span><br><span class=\"line\"><span class=\"comment\">// or Observable&lt;String&gt; co = new CommandHelloWorld(\"World\").toObservable();</span></span><br></pre></td></tr></table></figure>\n<p>You then retrieve the value of the command by subscribing to the Observable:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ho.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">// value emitted here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>The following unit tests demonstrate the behavior:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testObservable</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Observable&lt;String&gt; fWorld = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"World\"</span>).observe();</span><br><span class=\"line\">    Observable&lt;String&gt; fBob = <span class=\"keyword\">new</span> CommandHelloWorld(<span class=\"string\">\"Bob\"</span>).observe();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// blocking</span></span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello World!\"</span>, fWorld.toBlockingObservable().single());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Bob!\"</span>, fBob.toBlockingObservable().single());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// non-blocking </span></span><br><span class=\"line\">    <span class=\"comment\">// - this is a verbose anonymous inner-class approach and doesn't do assertions</span></span><br><span class=\"line\">    fWorld.subscribe(<span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// nothing needed here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String v)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"onNext: \"</span> + v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// non-blocking</span></span><br><span class=\"line\">    <span class=\"comment\">// - also verbose anonymous inner-class</span></span><br><span class=\"line\">    <span class=\"comment\">// - ignore errors and onCompleted signal</span></span><br><span class=\"line\">    fBob.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String v)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"onNext: \"</span> + v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Using Java 8 lambdas/closures is more compact; it would look like this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fWorld.subscribe((v) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"onNext: \"</span> + v);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// - or while also including error handling</span></span><br><span class=\"line\"></span><br><span class=\"line\">fWorld.subscribe((v) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"onNext: \"</span> + v);</span><br><span class=\"line\">&#125;, (exception) -&gt; &#123;</span><br><span class=\"line\">    exception.printStackTrace();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>More information about Observable can be found at <a href=\"http://reactivex.io/documentation/observable.html\">http://reactivex.io/documentation/observable.html</a></p>\n<p><a name='Reactive-Commands' /></p>\n<h2 id=\"Reactive-Commands\"><a href=\"#Reactive-Commands\" class=\"headerlink\" title=\"Reactive Commands\"></a>Reactive Commands</h2><p>Rather than converting a <code>HystrixCommand</code> into an <code>Observable</code> using the methods described above, you can also create a <code>HystrixObservableCommand</code> that is a specialized version of <code>HystrixCommand</code> meant to wrap Observables. A <code>HystrixObservableCommand</code> is capable of wrapping Observables that emit multiple items, whereas ordinary <code>HystrixCommands</code>, even when converted into Observables, will never emit more than one item.</p>\n<p>In such a case, instead of overriding the <code>run</code> method with your command logic (as you would with an ordinary <code>HystrixCommand</code>), you would override the <code>construct</code> method so that it returns the Observable you intend to wrap.</p>\n<p>To obtain an Observable representation of the <code>HystrixObservableCommand</code>, use one of the following two methods:</p>\n<ul>\n<li><a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#observe\\(\\\"><code>observe()</code></a>) &mdash; returns a &ldquo;hot&rdquo; Observable that subscribes to the underlying Observable immediately, though because it is filtered through a <code>ReplaySubject</code> you are not in danger of losing any items that it emits before you have a chance to subscribe to the resulting Observable</li>\n<li><a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#toObservable\\(\\\"><code>toObservable()</code></a>) &mdash; returns a &ldquo;cold&rdquo; Observable that won&#8217;t subscribe to the underlying Observable until you subscribe to the resulting Observable</li>\n</ul>\n<p><a name='Fallback'/></p>\n<h2 id=\"Fallback\"><a href=\"#Fallback\" class=\"headerlink\" title=\"Fallback\"></a>Fallback</h2><p>You can support graceful degradation in a Hystrix command by adding a fallback method that Hystrix will call to obtain a default value or values in case the main command fails.  You will want to implement a fallback for most Hystrix commands that might conceivably fail, with a couple of exceptions:</p>\n<ol>\n<li>a command that performs a write operation<ul>\n<li>If your Hystrix command is designed to do a write operation rather than to return a value (such a command might normally return a <code>void</code> in the case of a <code>HystrixCommand</code> or an empty Observable in the case of a <code>HystrixObservableCommand</code>), there isn&#8217;t much point in implementing a fallback. If the write fails, you probably want the failure to propagate back to the caller.</li>\n</ul>\n</li>\n<li>batch systems/offline compute<ul>\n<li>If your Hystrix command is filling up a cache, or generating a report, or doing any sort of offline computation, it&#8217;s usually more appropriate to propagate the error back to the caller who can then retry the command later, rather than to send the caller a silently-degraded response.</li>\n</ul>\n</li>\n</ol>\n<p>Whether or not your command has a fallback, all of the usual Hystrix state and circuit-breaker state/metrics are updated to indicate the command failure.</p>\n<p>In an ordinary <code>HystrixCommand</code> you implement a fallback by means of a <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback\\(\\\"><code>getFallback()</code></a>) implementation. Hystrix will execute this fallback for all types of failure such as <code>run()</code> failure, timeout, thread pool or semaphore rejection, and circuit-breaker short-circuiting. The following example includes such a fallback:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHelloFailure</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloFailure</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"this command always fails\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Failure \"</span> + name + <span class=\"string\">\"!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandHelloFailure.java\">View Source</a></p>\n<p>This command&#8217;s <code>run()</code> method will fail on every execution. However, the caller will always receive the value returned by the command&#8217;s <code>getFallback()</code> method instead of receiving an exception:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSynchronous</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Failure World!\"</span>, <span class=\"keyword\">new</span> CommandHelloFailure(<span class=\"string\">\"World\"</span>).execute());</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"Hello Failure Bob!\"</span>, <span class=\"keyword\">new</span> CommandHelloFailure(<span class=\"string\">\"Bob\"</span>).execute());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent\"><a href=\"#HystrixObservableCommand-Equivalent\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>For a <code>HystrixObservableCommand</code> you instead may override the <code>resumeWithFallback</code> method so that it returns a second <code>Observable</code> that will take over from the primary <code>Observable</code> if it fails. Note that because an <code>Observable</code> may fail after having already emitted one or more items, your fallback should not assume that it will be emitting the only values that the observer will see.</p>\n<p>Internally, Hystrix uses the RxJava <a href=\"http://reactivex.io/documentation/operators/catch.html\"><code>onErrorResumeNext</code></a> operator to seamlessly transition between the primary and fallback <code>Observable</code> in case of an error.</p>\n<p><a name='ErrorPropagation'/></p>\n<h2 id=\"Error-Propagation\"><a href=\"#Error-Propagation\" class=\"headerlink\" title=\"Error Propagation\"></a>Error Propagation</h2><p>All exceptions thrown from the <code>run()</code> method except for <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/exception/HystrixBadRequestException.html\"><code>HystrixBadRequestException</code></a> count as failures and trigger <code>getFallback()</code> and circuit-breaker logic.</p>\n<p>You can wrap the exception that you would like to throw in <code>HystrixBadRequestException</code> and retrieve it via <code>getCause()</code>. The <code>HystrixBadRequestException</code> is intended for use cases such as reporting illegal arguments or non-system failures that should not count against the failure metrics and should not trigger fallback logic.</p>\n<h4 id=\"HystrixObservableCommand-Equivalent-1\"><a href=\"#HystrixObservableCommand-Equivalent-1\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>In the case of a <code>HystrixObservableCommand</code>, non-recoverable errors are returned via <code>onError</code> notifications from the resulting <code>Observable</code>, and fallbacks are accomplished by falling back to a second Observable that Hystrix obtains through the <code>resumeWithFallback</code> method that you implement.</p>\n<p><a name='CommandName'/></p>\n<h2 id=\"Command-Name\"><a href=\"#Command-Name\" class=\"headerlink\" title=\"Command Name\"></a>Command Name</h2><p>A command name is, by default, derived from the class name:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getClass().getSimpleName();</span><br></pre></td></tr></table></figure>\n<p>To explicitly define the name pass it in via the <code>HystrixCommand</code> or <code>HystrixObservableCommand</code> constructor:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">            .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"HelloWorld\"</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>To save a Setter allocation per command allocation, you may also cache the Setter like so:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Setter cachedSetter = </span><br><span class=\"line\">    Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">        .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"HelloWorld\"</span>));    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(cachedSetter);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.html\"><code>HystrixCommandKey</code></a> is an interface and can be implemented as an enum or regular class, but it also has the helper <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.Factory.html\"><code>Factory</code></a> class to construct and intern instances such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixCommandKey.Factory.asKey(<span class=\"string\">\"HelloWorld\"</span>)</span><br></pre></td></tr></table></figure>\n<p><a name='CommandGroup'/></p>\n<h2 id=\"Command-Group\"><a href=\"#Command-Group\" class=\"headerlink\" title=\"Command Group\"></a>Command Group</h2><p>Hystrix uses the command group key to group together commands such as for reporting, alerting, dashboards, or team/library ownership.</p>\n<p>By default Hystrix uses this to define the command thread-pool unless a separate one is defined.</p>\n<p><a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.html\"><code>HystrixCommandGroupKey</code></a> is an interface and can be implemented as an enum or regular class, but it also has the helper <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.Factory.html\"><code>Factory</code></a> class to construct and intern instances such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>)</span><br></pre></td></tr></table></figure>\n<p><a name='CommandThreadPool'/></p>\n<h2 id=\"Command-Thread-Pool\"><a href=\"#Command-Thread-Pool\" class=\"headerlink\" title=\"Command Thread-Pool\"></a>Command Thread-Pool</h2><p>The thread-pool key represents a <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPool.html\"><code>HystrixThreadPool</code></a> for monitoring, metrics publishing, caching, and other such uses. A <code>HystrixCommand</code> is associated with a single <code>HystrixThreadPool</code> as retrieved by the <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.html\"><code>HystrixThreadPoolKey</code></a> injected into it, or it defaults to one created using the <code>HystrixCommandGroupKey</code> it is created with.</p>\n<p>To explicitly define the name pass it in via the <code>HystrixCommand</code> or <code>HystrixObservableCommand</code> constructor:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandHelloWorld</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">            .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"HelloWorld\"</span>))</span><br><span class=\"line\">            .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"HelloWorldPool\"</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.html\"><code>HystrixThreadPoolKey</code></a> is an interface and can be implemented as an enum or regular class, but it also has the helper <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixThreadPoolKey.Factory.html\"><code>Factory</code></a> class to construct and intern instances such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"HelloWorldPool\"</span>)</span><br></pre></td></tr></table></figure>\n<p>The reason why you might use <code>HystrixThreadPoolKey</code> instead of just a different <code>HystrixCommandGroupKey</code> is that multiple commands may belong to the same &ldquo;group&rdquo; of ownership or logical functionality, but certain commands may need to be isolated from each other.</p>\n<p>Here is a simple example:</p>\n<ul>\n<li>two commands used to access Video metadata</li>\n<li>group name is &ldquo;VideoMetadata&rdquo;</li>\n<li>command A goes against resource #1</li>\n<li>command B goes against resource #2</li>\n</ul>\n<p>If command A becomes latent and saturates its thread-pool it should not prevent command B from executing requests since they each hit different back-end resources.</p>\n<p>Thus, we logically want these commands grouped together but want them isolated differently and would use <code>HystrixThreadPoolKey</code> to give each of them a different thread-pool.</p>\n<p><a name='Caching'/></p>\n<h2 id=\"Request-Cache\"><a href=\"#Request-Cache\" class=\"headerlink\" title=\"Request Cache\"></a>Request Cache</h2><p>You enable request caching by implementing the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getCacheKey\\(\\\"><code>getCacheKey()</code></a>) method on a <code>HystrixCommand</code> or <code>HystrixObservableCommand</code> object as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandUsingRequestCache</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">Boolean</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">CommandUsingRequestCache</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Boolean <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value == <span class=\"number\">0</span> || value % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getCacheKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingRequestCache.java\">View Source</a></p>\n<p>Since this depends on request context we must initialize the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html\"><code>HystrixRequestContext</code></a>.</p>\n<p>In a simple unit test you could do this as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testWithoutCacheHits</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        assertTrue(<span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">2</span>).execute());</span><br><span class=\"line\">        assertFalse(<span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">1</span>).execute());</span><br><span class=\"line\">        assertTrue(<span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">0</span>).execute());</span><br><span class=\"line\">        assertTrue(<span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">58672</span>).execute());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        context.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Typically this context will be initialized and shut down via a <code>ServletFilter</code> that wraps a user request or some other lifecycle hook.</p>\n<p>The following is an example that shows how commands retrieve their values from the cache (and how you can query an object to know whether its value came from the cache) within a request context:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testWithCacheHits</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        CommandUsingRequestCache command2a = <span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">2</span>);</span><br><span class=\"line\">        CommandUsingRequestCache command2b = <span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(command2a.execute());</span><br><span class=\"line\">        <span class=\"comment\">// this is the first time we've executed this command with</span></span><br><span class=\"line\">        <span class=\"comment\">// the value of \"2\" so it should not be from cache</span></span><br><span class=\"line\">        assertFalse(command2a.isResponseFromCache());</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(command2b.execute());</span><br><span class=\"line\">        <span class=\"comment\">// this is the second time we've executed this command with</span></span><br><span class=\"line\">        <span class=\"comment\">// the same value so it should return from cache</span></span><br><span class=\"line\">        assertTrue(command2b.isResponseFromCache());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        context.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// start a new request context</span></span><br><span class=\"line\">    context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        CommandUsingRequestCache command3b = <span class=\"keyword\">new</span> CommandUsingRequestCache(<span class=\"number\">2</span>);</span><br><span class=\"line\">        assertTrue(command3b.execute());</span><br><span class=\"line\">        <span class=\"comment\">// this is a new request context so this </span></span><br><span class=\"line\">        <span class=\"comment\">// should not come from cache</span></span><br><span class=\"line\">        assertFalse(command3b.isResponseFromCache());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        context.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name='Collapsing'/></p>\n<h2 id=\"Request-Collapsing\"><a href=\"#Request-Collapsing\" class=\"headerlink\" title=\"Request Collapsing\"></a>Request Collapsing</h2><p>Request collapsing enables multiple requests to be batched into a single <code>HystrixCommand</code> instance execution.</p>\n<p>A collapser can use the batch size and the elapsed time since the creation of the batch as triggers for executing a batch.</p>\n<p>There are 2 styles of request-collapsing supported by Hystrix: request-scoped and globally-scoped.  This is configured at collapser construction, and defaulted to request-scoped.  </p>\n<p>A request-scoped collapser collects a batch per <code>HystrixRequestContext</code>, while a globally-scoped collapser collects a batch across multiple <code>HystrixRequestContext</code>s.  As a result, if your downstream dependencies cannot handle multiple <code>HystrixRequestContext</code>s in a single command invocation, request-scoped collapsing is the proper choice.  </p>\n<p>At Netflix, we exclusively use request-scoped collapsers because all current systems have been built on the assumption that a single <code>HystrixRequestContext</code> will be used in each command.  Since the batches are per-request only, collapsing is effective when commands occur in parallel with different arguments in the same request.</p>\n<p>Following is a simple example of how to implement a request-scoped <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCollapser.html\"><code>HystrixCollapser</code></a>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandCollapserGetValueForKey</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCollapser</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">String</span>, <span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandCollapserGetValueForKey</span><span class=\"params\">(Integer key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getRequestArgument</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> HystrixCommand&lt;List&lt;String&gt;&gt; createCommand(<span class=\"keyword\">final</span> Collection&lt;CollapsedRequest&lt;String, Integer&gt;&gt; requests) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BatchCommand(requests);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">mapResponseToRequests</span><span class=\"params\">(List&lt;String&gt; batchResponse, Collection&lt;CollapsedRequest&lt;String, Integer&gt;&gt; requests)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (CollapsedRequest&lt;String, Integer&gt; request : requests) &#123;</span><br><span class=\"line\">            request.setResponse(batchResponse.get(count++));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BatchCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">String</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Collection&lt;CollapsedRequest&lt;String, Integer&gt;&gt; requests;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">BatchCommand</span><span class=\"params\">(Collection&lt;CollapsedRequest&lt;String, Integer&gt;&gt; requests)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"GetValueForKey\"</span>)));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.requests = requests;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            ArrayList&lt;String&gt; response = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (CollapsedRequest&lt;String, Integer&gt; request : requests) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// artificial response for each argument received in the batch</span></span><br><span class=\"line\">                response.add(<span class=\"string\">\"ValueForKey: \"</span> + request.getArgument());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandCollapserGetValueForKey.java\">View Source</a></p>\n<p>The following unit test shows how to use a collapser to automatically batch four executions of <code>CommandCollapserGetValueForKey</code> into a single <code>HystrixCommand</code> execution:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCollapser</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Future&lt;String&gt; f1 = <span class=\"keyword\">new</span> CommandCollapserGetValueForKey(<span class=\"number\">1</span>).queue();</span><br><span class=\"line\">        Future&lt;String&gt; f2 = <span class=\"keyword\">new</span> CommandCollapserGetValueForKey(<span class=\"number\">2</span>).queue();</span><br><span class=\"line\">        Future&lt;String&gt; f3 = <span class=\"keyword\">new</span> CommandCollapserGetValueForKey(<span class=\"number\">3</span>).queue();</span><br><span class=\"line\">        Future&lt;String&gt; f4 = <span class=\"keyword\">new</span> CommandCollapserGetValueForKey(<span class=\"number\">4</span>).queue();</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"ValueForKey: 1\"</span>, f1.get());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"ValueForKey: 2\"</span>, f2.get());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"ValueForKey: 3\"</span>, f3.get());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"ValueForKey: 4\"</span>, f4.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// assert that the batch command 'GetValueForKey' was in fact</span></span><br><span class=\"line\">        <span class=\"comment\">// executed and that it executed only once</span></span><br><span class=\"line\">        assertEquals(<span class=\"number\">1</span>, HystrixRequestLog.getCurrentRequest().getExecutedCommands().size());</span><br><span class=\"line\">        HystrixCommand&lt;?&gt; command = HystrixRequestLog.getCurrentRequest().getExecutedCommands().toArray(<span class=\"keyword\">new</span> HystrixCommand&lt;?&gt;[<span class=\"number\">1</span>])[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// assert the command is the one we're expecting</span></span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"GetValueForKey\"</span>, command.getCommandKey().name());</span><br><span class=\"line\">        <span class=\"comment\">// confirm that it was a COLLAPSED command execution</span></span><br><span class=\"line\">        assertTrue(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));</span><br><span class=\"line\">        <span class=\"comment\">// and that it was successful</span></span><br><span class=\"line\">        assertTrue(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        context.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name='RequestContextSetup'/></p>\n<h2 id=\"Request-Context-Setup\"><a href=\"#Request-Context-Setup\" class=\"headerlink\" title=\"Request Context Setup\"></a>Request Context Setup</h2><p>To use request-scoped features (request caching, request collapsing, request log) you must manage the <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html\"><code>HystrixRequestContext</code></a> lifecycle (or implement an alternative <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixConcurrencyStrategy.html\"><code>HystrixConcurrencyStrategy</code></a>).</p>\n<p>This means that you must execute the following before a request:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br></pre></td></tr></table></figure>\n<p>and then this at the end of the request:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.shutdown();</span><br></pre></td></tr></table></figure>\n<p>In a standard Java web application, you can use a Servlet Filter to initialize this lifecycle by implementing a filter similar to this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixRequestContextServletFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span><br><span class=\"line\">     <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            chain.doFilter(request, response);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            context.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You could enable the filter for all incoming traffic by adding a section to the <code>web.xml</code> as follows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;filter&gt;</span><br><span class=\"line\">   &lt;display-name&gt;HystrixRequestContextServletFilter&lt;/display-name&gt;</span><br><span class=\"line\">   &lt;filter-name&gt;HystrixRequestContextServletFilter&lt;/filter-name&gt;</span><br><span class=\"line\">   &lt;filter-class&gt;com.netflix.hystrix.contrib.requestservlet.HystrixRequestContextServletFilter&lt;/filter-class&gt;</span><br><span class=\"line\"> &lt;/filter&gt;</span><br><span class=\"line\"> &lt;filter-mapping&gt;</span><br><span class=\"line\">   &lt;filter-name&gt;HystrixRequestContextServletFilter&lt;/filter-name&gt;</span><br><span class=\"line\">   &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p><a name='Common-Patterns'/></p>\n<h2 id=\"Common-Patterns\"><a href=\"#Common-Patterns\" class=\"headerlink\" title=\"Common Patterns\"></a>Common Patterns</h2><p>In the following sections are common uses and patterns of use for <code>HystrixCommand</code> and <code>HystrixObservableCommand</code>.</p>\n<p><a name='Common-Patterns-FailFast'/></p>\n<h3 id=\"Fail-Fast\"><a href=\"#Fail-Fast\" class=\"headerlink\" title=\"Fail Fast\"></a>Fail Fast</h3><p>The most basic execution is one that does a single thing and has no fallback behavior. It will throw an exception if any type of failure occurs.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandThatFailsFast</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> throwException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandThatFailsFast</span><span class=\"params\">(<span class=\"keyword\">boolean</span> throwException)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.throwException = throwException;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (throwException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"failure from CommandThatFailsFast\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandThatFailsFast.java\">View Source</a></p>\n<p>These unit tests show how it behaves:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"success\"</span>, <span class=\"keyword\">new</span> CommandThatFailsFast(<span class=\"keyword\">false</span>).execute());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CommandThatFailsFast(<span class=\"keyword\">true</span>).execute();</span><br><span class=\"line\">        fail(<span class=\"string\">\"we should have thrown an exception\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HystrixRuntimeException e) &#123;</span><br><span class=\"line\">        assertEquals(<span class=\"string\">\"failure from CommandThatFailsFast\"</span>, e.getCause().getMessage());</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent-2\"><a href=\"#HystrixObservableCommand-Equivalent-2\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>The equivalent Fail-Fast solution for a <code>HystrixObservableCommand</code> would involve overriding the <code>resumeWithFallback</code> method as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;String&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (throwException) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.error(<span class=\"keyword\">new</span> Throwable(<span class=\"string\">\"failure from CommandThatFailsFast\"</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.just(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name='Common-Patterns-FailSilent'/></p>\n<h3 id=\"Fail-Silent\"><a href=\"#Fail-Silent\" class=\"headerlink\" title=\"Fail Silent\"></a>Fail Silent</h3><p>Failing silently is the equivalent of returning an empty response or removing functionality. It can be done by returning <code>null</code>, an empty Map, empty List, or other such responses.</p>\n<p>You do this by implementing a <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback\\(\\\"><code>getFallback()</code></a>) method on the <code>HystrixCommand</code> instance:</p>\n<p>[[images/fallback-640.png]]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandThatFailsSilently</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> throwException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandThatFailsSilently</span><span class=\"params\">(<span class=\"keyword\">boolean</span> throwException)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.throwException = throwException;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (throwException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"failure from CommandThatFailsFast\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandThatFailsSilently.java\">View Source</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"success\"</span>, <span class=\"keyword\">new</span> CommandThatFailsSilently(<span class=\"keyword\">false</span>).execute());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        assertEquals(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CommandThatFailsSilently(<span class=\"keyword\">true</span>).execute());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HystrixRuntimeException e) &#123;</span><br><span class=\"line\">        fail(<span class=\"string\">\"we should not get an exception as we fail silently with a fallback\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Another implementation that returns an empty list would look like:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent-3\"><a href=\"#HystrixObservableCommand-Equivalent-3\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>The equivalent Fail-Silently solution for a <code>HystrixObservableCommand</code> would involve overriding the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#resumeWithFallback\\(\\\"><code>resumeWithFallback()</code></a>) method as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;String&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.empty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name='Common-Patterns-FallbackStatic'/></p>\n<h3 id=\"Fallback-Static\"><a href=\"#Fallback-Static\" class=\"headerlink\" title=\"Fallback: Static\"></a>Fallback: Static</h3><p>Fallbacks can return default values statically embedded in code. This doesn&#8217;t cause the feature or service to be removed in the way that &ldquo;fail silent&rdquo; often does, but instead causes default behavior to occur.</p>\n<p>For example, if a command returns a true/false based on user credentials but the command execution fails, it can default to true:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Boolean <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent-4\"><a href=\"#HystrixObservableCommand-Equivalent-4\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>The equivalent Static solution for a <code>HystrixObservableCommand</code> would involve overriding the <code>resumeWithFallback</code> method as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;Boolean&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.just( <span class=\"keyword\">true</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name='Common-Patterns-FallbackStubbed'/></p>\n<h3 id=\"Fallback-Stubbed\"><a href=\"#Fallback-Stubbed\" class=\"headerlink\" title=\"Fallback: Stubbed\"></a>Fallback: Stubbed</h3><p>You typically use a stubbed fallback when your command returns a compound object containing multiple fields, some of which can be determined from other request state while other fields are set to default values.</p>\n<p>Examples of places where you might find state appropriate to use in these stubbed values are:</p>\n<ul>\n<li>cookies</li>\n<li>request arguments and headers</li>\n<li>responses from previous service requests prior to the current one failing</li>\n</ul>\n<p>Your fallback can retrieve stubbed values statically from the request scope, but typically it is recommended that they be injected at command instantiation time for use if they are needed such as this following example demonstrates in the way it treats the <code>countryCodeFromGeoLookup</code> field:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandWithStubbedFallback</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">UserAccount</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> customerId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String countryCodeFromGeoLookup;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> customerId</span><br><span class=\"line\">     *            The customerID to retrieve UserAccount for</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> countryCodeFromGeoLookup</span><br><span class=\"line\">     *            The default country code from the HTTP request geo code lookup used for fallback.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">CommandWithStubbedFallback</span><span class=\"params\">(<span class=\"keyword\">int</span> customerId, String countryCodeFromGeoLookup)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customerId = customerId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.countryCodeFromGeoLookup = countryCodeFromGeoLookup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> UserAccount <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// fetch UserAccount from remote service</span></span><br><span class=\"line\">        <span class=\"comment\">//        return UserAccountClient.getAccount(customerId);</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"forcing failure for example\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> UserAccount <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span><br><span class=\"line\">         * Return stubbed fallback with some static defaults, placeholders,</span><br><span class=\"line\">         * and an injected value 'countryCodeFromGeoLookup' that we'll use</span><br><span class=\"line\">         * instead of what we would have retrieved from the remote service.</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UserAccount(customerId, <span class=\"string\">\"Unknown Name\"</span>,</span><br><span class=\"line\">                countryCodeFromGeoLookup, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAccount</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> customerId;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String countryCode;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isFeatureXPermitted;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isFeatureYPermitted;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isFeatureZPermitted;</span><br><span class=\"line\"></span><br><span class=\"line\">        UserAccount(<span class=\"keyword\">int</span> customerId, String name, String countryCode,</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isFeatureXPermitted,</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isFeatureYPermitted,</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isFeatureZPermitted) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.customerId = customerId;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.countryCode = countryCode;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isFeatureXPermitted = isFeatureXPermitted;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isFeatureYPermitted = isFeatureYPermitted;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isFeatureZPermitted = isFeatureZPermitted;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandWithStubbedFallback.java\">View Source</a></p>\n<p>The following unit test demonstrates its behavior:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CommandWithStubbedFallback command = <span class=\"keyword\">new</span> CommandWithStubbedFallback(<span class=\"number\">1234</span>, <span class=\"string\">\"ca\"</span>);</span><br><span class=\"line\">    UserAccount account = command.execute();</span><br><span class=\"line\">    assertTrue(command.isFailedExecution());</span><br><span class=\"line\">    assertTrue(command.isResponseFromFallback());</span><br><span class=\"line\">    assertEquals(<span class=\"number\">1234</span>, account.customerId);</span><br><span class=\"line\">    assertEquals(<span class=\"string\">\"ca\"</span>, account.countryCode);</span><br><span class=\"line\">    assertEquals(<span class=\"keyword\">true</span>, account.isFeatureXPermitted);</span><br><span class=\"line\">    assertEquals(<span class=\"keyword\">true</span>, account.isFeatureYPermitted);</span><br><span class=\"line\">    assertEquals(<span class=\"keyword\">false</span>, account.isFeatureZPermitted);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HystrixObservableCommand-Equivalent-5\"><a href=\"#HystrixObservableCommand-Equivalent-5\" class=\"headerlink\" title=\"HystrixObservableCommand Equivalent\"></a><code>HystrixObservableCommand</code> Equivalent</h4><p>The equivalent Stubbed solution for a <code>HystrixObservableCommand</code> would involve overriding the <code>resumeWithFallback</code> method to return an <code>Observable</code> that emits the stub responses. A version equivalent to the previous example would look like this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;Boolean&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.just( <span class=\"keyword\">new</span> UserAccount(customerId, <span class=\"string\">\"Unknown Name\"</span>,</span><br><span class=\"line\">                                            countryCodeFromGeoLookup, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>) );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>But if you are expecting to emit multiple items from your <code>Observable</code>, you may be more interested in generating stubs for only those items that the original <code>Observable</code> had not yet emitted before it failed. Here is a simple example to show how you might accomplish this &mdash; it keeps track of the last item emitted from the main <code>Observable</code> so that the fallback knows where to pick up to continue the sequence:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;Integer&gt; <span class=\"title\">construct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            .concatWith(Observable.&lt;Integer&gt; error(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"forced error\"</span>)))</span><br><span class=\"line\">            .doOnNext(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer t1)</span> </span>&#123;</span><br><span class=\"line\">                    lastSeen = t1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .subscribeOn(Schedulers.computation());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Observable&lt;Integer&gt; <span class=\"title\">resumeWithFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastSeen &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.range(lastSeen + <span class=\"number\">1</span>, <span class=\"number\">4</span> - lastSeen);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name='Common-Patterns-FallbackCacheViaNetwork'/></p>\n<h3 id=\"Fallback-Cache-via-Network\"><a href=\"#Fallback-Cache-via-Network\" class=\"headerlink\" title=\"Fallback: Cache via Network\"></a>Fallback: Cache via Network</h3><p>Sometimes if a back-end service fails, a stale version of data can be retrieved from a cache service such as memcached.</p>\n<p>Since the fallback will go over the network it is another possible point of failure and so it also needs to be wrapped by a <code>HystrixCommand</code> or <code>HystrixObservableCommand</code>.</p>\n<p>[[images/fallback-via-command-640.png]]</p>\n<p>It is important to execute the fallback command on a separate thread-pool, otherwise if the main command were to become latent and fill the thread-pool, this would prevent the fallback from running if the two commands share the same pool.</p>\n<p>The following code shows how <code>CommandWithFallbackViaNetwork</code> executes <code>FallbackViaNetwork</code> in its <code>getFallback()</code> method.</p>\n<p>Note how if the fallback fails, it <em>also</em> has a fallback which does the &ldquo;fail silent&rdquo; approach of returning <code>null</code>.</p>\n<p>To configure the <code>FallbackViaNetwork</code> command to run on a different threadpool than the default <code>RemoteServiceX</code> derived from the <a href=\"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandGroupKey.html\"><code>HystrixCommandGroupKey</code></a>, it injects <code>HystrixThreadPoolKey.Factory.asKey(&quot;RemoteServiceXFallback&quot;)</code> into the constructor.</p>\n<p>This means <code>CommandWithFallbackViaNetwork</code> will run on a thread-pool named <code>RemoteServiceX</code> and <code>FallbackViaNetwork</code> will run on a thread-pool named <code>RemoteServiceXFallback</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandWithFallbackViaNetwork</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">CommandWithFallbackViaNetwork</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"RemoteServiceX\"</span>))</span><br><span class=\"line\">                .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"GetValueCommand\"</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//        RemoteServiceXClient.getValue(id);</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"force failure for example\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FallbackViaNetwork(id).execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FallbackViaNetwork</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FallbackViaNetwork</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"RemoteServiceX\"</span>))</span><br><span class=\"line\">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"GetValueFallbackCommand\"</span>))</span><br><span class=\"line\">                    <span class=\"comment\">// use a different threadpool for the fallback command</span></span><br><span class=\"line\">                    <span class=\"comment\">// so saturating the RemoteServiceX pool won't prevent</span></span><br><span class=\"line\">                    <span class=\"comment\">// fallbacks from executing</span></span><br><span class=\"line\">                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"RemoteServiceXFallback\"</span>)));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            MemCacheClient.getValue(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// the fallback also failed</span></span><br><span class=\"line\">            <span class=\"comment\">// so this fallback-of-a-fallback will </span></span><br><span class=\"line\">            <span class=\"comment\">// fail silently and return null</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandWithFallbackViaNetwork.java\">View Source</a></p>\n<p><a name='Common-Patterns-PrimarySecondaryWithFallback'/></p>\n<h3 id=\"Primary-Secondary-with-Fallback\"><a href=\"#Primary-Secondary-with-Fallback\" class=\"headerlink\" title=\"Primary + Secondary with Fallback\"></a>Primary + Secondary with Fallback</h3><p>Some systems have dual-mode behavior &mdash; primary and secondary, or primary and failover.</p>\n<p>Sometimes the secondary or failover is considered a failure state and it is intended only for fallback; in those scenarios it would fit in the same pattern as &ldquo;Cache via Network&rdquo; described above.</p>\n<p>However, if flipping to the secondary system is common, such as a normal part of rolling out new code (sometimes this is part of how stateful systems handle code pushes) then every time the secondary system is used the primary will be in a failure state, tripping circuit breakers and firing alerts.</p>\n<p>This is not the desired behavior, if for no other reason than to avoid the &ldquo;cry wolf&rdquo; fatigue that will cause alerts to be ignored when a real issue is occurring.</p>\n<p>So in such a case the strategy is instead to treat the switching between primary and secondary as normal, healthy patterns and put a fa&ccedil;ade in front of them.</p>\n<p>[[images/primary-secondary-example-640.png]]</p>\n<p>The primary and secondary <code>HystrixCommand</code> implementations are thread-isolated since they are doing network traffic and business logic. They may each have very different performance characteristics (often the secondary system is a static cache) so another benefit of separate commands for each is that they can be individually tuned.</p>\n<p>You do not expose these two commands publicly but you instead hide them behind another <code>HystrixCommand</code> that is semaphore-isolated and that implements the conditional logic as to whether to invoke the primary or secondary command. If both primary and secondary fail then control switches to the fallback of the fa&ccedil;ade command itself.</p>\n<p>The fa&ccedil;ade <code>HystrixCommand</code> can use semaphore-isolation since all of the work it is doing is going through two other <code>HystrixCommand</code>s that are already thread-isolated. It is unnecessary to have yet another layer of threading as long as the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run\\(\\\"><code>run()</code></a>) method of the fa&ccedil;ade is not doing any other network calls, retry logic, or other &ldquo;error prone&rdquo; things.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandFacadeWithPrimarySecondary</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DynamicBooleanProperty usePrimary = DynamicPropertyFactory.getInstance().getBooleanProperty(<span class=\"string\">\"primarySecondary.usePrimary\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandFacadeWithPrimarySecondary</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Setter</span><br><span class=\"line\">                .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"SystemX\"</span>))</span><br><span class=\"line\">                .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"PrimarySecondaryCommand\"</span>))</span><br><span class=\"line\">                .andCommandPropertiesDefaults(</span><br><span class=\"line\">                        <span class=\"comment\">// we want to default to semaphore-isolation since this wraps</span></span><br><span class=\"line\">                        <span class=\"comment\">// 2 others commands that are already thread isolated</span></span><br><span class=\"line\">                        HystrixCommandProperties.Setter()</span><br><span class=\"line\">                                .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (usePrimary.get()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrimaryCommand(id).execute();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SecondaryCommand(id).execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"static-fallback-\"</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getCacheKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">PrimaryCommand</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(Setter</span><br><span class=\"line\">                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"SystemX\"</span>))</span><br><span class=\"line\">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"PrimaryCommand\"</span>))</span><br><span class=\"line\">                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"PrimaryCommand\"</span>))</span><br><span class=\"line\">                    .andCommandPropertiesDefaults(</span><br><span class=\"line\">                            <span class=\"comment\">// we default to a 600ms timeout for primary</span></span><br><span class=\"line\">                            HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class=\"number\">600</span>)));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// perform expensive 'primary' service call</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"responseFromPrimary-\"</span> + id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondaryCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SecondaryCommand</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(Setter</span><br><span class=\"line\">                    .withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"SystemX\"</span>))</span><br><span class=\"line\">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class=\"string\">\"SecondaryCommand\"</span>))</span><br><span class=\"line\">                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class=\"string\">\"SecondaryCommand\"</span>))</span><br><span class=\"line\">                    .andCommandPropertiesDefaults(</span><br><span class=\"line\">                            <span class=\"comment\">// we default to a 100ms timeout for secondary</span></span><br><span class=\"line\">                            HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class=\"number\">100</span>)));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// perform fast 'secondary' service call</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"responseFromSecondary-\"</span> + id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnitTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPrimary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ConfigurationManager.getConfigInstance().setProperty(<span class=\"string\">\"primarySecondary.usePrimary\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                assertEquals(<span class=\"string\">\"responseFromPrimary-20\"</span>, <span class=\"keyword\">new</span> CommandFacadeWithPrimarySecondary(<span class=\"number\">20</span>).execute());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                context.shutdown();</span><br><span class=\"line\">                ConfigurationManager.getConfigInstance().clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSecondary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ConfigurationManager.getConfigInstance().setProperty(<span class=\"string\">\"primarySecondary.usePrimary\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                assertEquals(<span class=\"string\">\"responseFromSecondary-20\"</span>, <span class=\"keyword\">new</span> CommandFacadeWithPrimarySecondary(<span class=\"number\">20</span>).execute());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                context.shutdown();</span><br><span class=\"line\">                ConfigurationManager.getConfigInstance().clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandFacadeWithPrimarySecondary.java\">View Source</a></p>\n<p><a name='Common-Patterns-Semaphore'/></p>\n<h3 id=\"Client-Doesn’t-Perform-Network-Access\"><a href=\"#Client-Doesn’t-Perform-Network-Access\" class=\"headerlink\" title=\"Client Doesn’t Perform Network Access\"></a>Client Doesn’t Perform Network Access</h3><p>When you wrap behavior that does not perform network access, but where latency is a concern or the threading overhead is unacceptable, you can set the <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.html#executionIsolationStrategy\\(\\\"><code>executionIsolationStrategy</code></a>) property to <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.ExecutionIsolationStrategy.html\"><code>ExecutionIsolationStrategy</code></a><code>.SEMAPHORE</code> and Hystrix will use semaphore isolation instead.</p>\n<p>The following shows how to set this property as the default for a command via code (you can also override it via dynamic properties at runtime).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandUsingSemaphoreIsolation</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CommandUsingSemaphoreIsolation</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"ExampleGroup\"</span>))</span><br><span class=\"line\">                <span class=\"comment\">// since we're doing an in-memory cache lookup we choose SEMAPHORE isolation</span></span><br><span class=\"line\">                .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()</span><br><span class=\"line\">                        .withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// a real implementation would retrieve data from in memory data structure</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ValueFromHashMap_\"</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingSemaphoreIsolation.java\">View Source</a></p>\n<p><a name='Common-Patterns-GetSetGet'/></p>\n<h3 id=\"Get-Set-Get-with-Request-Cache-Invalidation\"><a href=\"#Get-Set-Get-with-Request-Cache-Invalidation\" class=\"headerlink\" title=\"Get-Set-Get with Request Cache Invalidation\"></a>Get-Set-Get with Request Cache Invalidation</h3><p>If you are implementing a Get-Set-Get use case where the Get receives enough traffic that request caching is desired but sometimes a Set occurs on another command that should invalidate the cache within the same request, you can invalidate the cache by calling <a href=\"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixRequestCache.html#clear\\(java.lang.String\\\"><code>HystrixRequestCache.clear()</code></a>).</p>\n<p>Here is an example implementation:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandUsingRequestCacheInvalidation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* represents a remote data store */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> String prefixStoredOnRemoteDataStore = <span class=\"string\">\"ValueBeforeSet_\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetterCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HystrixCommandKey GETTER_KEY = HystrixCommandKey.Factory.asKey(<span class=\"string\">\"GetterCommand\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GetterCommand</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"GetSetGet\"</span>))</span><br><span class=\"line\">                    .andCommandKey(GETTER_KEY));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> prefixStoredOnRemoteDataStore + id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getCacheKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span><br><span class=\"line\">         * Allow the cache to be flushed for this object.</span><br><span class=\"line\">         * </span><br><span class=\"line\">         * <span class=\"doctag\">@param</span> id</span><br><span class=\"line\">         *            argument that would normally be passed to the command</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">flushCache</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">            HystrixRequestCache.getInstance(GETTER_KEY,</span><br><span class=\"line\">                    HystrixConcurrencyStrategyDefault.getInstance()).clear(String.valueOf(id));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetterCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">HystrixCommand</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SetterCommand</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String prefix)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class=\"string\">\"GetSetGet\"</span>));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.prefix = prefix;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// persist the value against the datastore</span></span><br><span class=\"line\">            prefixStoredOnRemoteDataStore = prefix;</span><br><span class=\"line\">            <span class=\"comment\">// flush the cache</span></span><br><span class=\"line\">            GetterCommand.flushCache(id);</span><br><span class=\"line\">            <span class=\"comment\">// no return value</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/hystrix-examples/src/main/java/com/netflix/hystrix/examples/basic/CommandUsingRequestCacheInvalidation.java\">View Source</a></p>\n<p>The unit test that confirms the behavior is:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getGetSetGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            assertEquals(<span class=\"string\">\"ValueBeforeSet_1\"</span>, <span class=\"keyword\">new</span> GetterCommand(<span class=\"number\">1</span>).execute());</span><br><span class=\"line\">            GetterCommand commandAgainstCache = <span class=\"keyword\">new</span> GetterCommand(<span class=\"number\">1</span>);</span><br><span class=\"line\">            assertEquals(<span class=\"string\">\"ValueBeforeSet_1\"</span>, commandAgainstCache.execute());</span><br><span class=\"line\">            <span class=\"comment\">// confirm it executed against cache the second time</span></span><br><span class=\"line\">            assertTrue(commandAgainstCache.isResponseFromCache());</span><br><span class=\"line\">            <span class=\"comment\">// set the new value</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> SetterCommand(<span class=\"number\">1</span>, <span class=\"string\">\"ValueAfterSet_\"</span>).execute();</span><br><span class=\"line\">            <span class=\"comment\">// fetch it again</span></span><br><span class=\"line\">            GetterCommand commandAfterSet = <span class=\"keyword\">new</span> GetterCommand(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// the getter should return with the new prefix, not the value from cache</span></span><br><span class=\"line\">            assertFalse(commandAfterSet.isResponseFromCache());</span><br><span class=\"line\">            assertEquals(<span class=\"string\">\"ValueAfterSet_1\"</span>, commandAfterSet.execute());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            context.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name='MigratingLibrary'/></p>\n<h2 id=\"Migrating-a-Library-to-Hystrix\"><a href=\"#Migrating-a-Library-to-Hystrix\" class=\"headerlink\" title=\"Migrating a Library to Hystrix\"></a>Migrating a Library to Hystrix</h2><p>When you are migrating an existing client library to use Hystrix, you should replace each of the &ldquo;service methods&rdquo; with a <code>HystrixCommand</code>.</p>\n<p>The service methods should then forward calls to the <code>HystrixCommand</code> and not have any additional business logic in them.</p>\n<p>Thus, before migration a service library may look like this:</p>\n<p>[[images/library-migration-to-hystrix-without-640.png]]</p>\n<p>After migrating, users of a library will be able to access the <code>HystrixCommand</code>s directly or indirectly via the service facade that delegates to the <code>HystrixCommand</code>s.</p>\n<p>[[images/library-migration-to-hystrix-with-640.png]]</p>\n"},{"title":"微服务之微","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-06-02T01:20:00.000Z","keywords":null,"description":null,"_content":" \n \n\n\n 单一职责\n","source":"_posts/微服务/微服务之微.md","raw":"---\ntitle: 微服务之微\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG'\ndate: 2016-06-02 09:20:00\ncategories:\n\t- 微服务 \ntags:\n\t \n\t- 微服务\nkeywords:\ndescription:\n---\n \n \n\n\n 单一职责\n","slug":"微服务/微服务之微","published":1,"updated":"2016-06-03T02:02:02.000Z","_id":"cioz2uxkm000flginmvkui28h","comments":1,"layout":"post","photos":[],"link":"","content":"<p> 单一职责</p>\n","excerpt":"","more":"<p> 单一职责</p>\n"},{"title":"Matthew Lien-Bleeding Wolves","thumbnail":"http://ftp.ytbbs.com/attachments/forum/day_081028/20081028_ae33dbbe16d4417e2b55GlDpalRfZsm4.jpg","date":"2016-02-22T05:22:54.000Z","keywords":null,"description":null,"_content":"\n\n \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n ","source":"_posts/music/Matthew-Lien-Bleeding-Wolves.md","raw":"---\ntitle: Matthew Lien-Bleeding Wolves\nthumbnail: 'http://ftp.ytbbs.com/attachments/forum/day_081028/20081028_ae33dbbe16d4417e2b55GlDpalRfZsm4.jpg'\ndate: 2016-02-22 13:22:54\ncategories: music\ntags:\nkeywords:\ndescription:\n---\n\n\n \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n ","slug":"music/Matthew-Lien-Bleeding-Wolves","published":1,"updated":"2016-03-09T12:15:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxkq000ilgincglcww71","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n","excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n"},{"title":"FlatBuffers 使用指南","date":"2016-02-19T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122224.JPG","_content":"\n# FlatBuffers 使用指南\n\nFlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍\n\n## 编译源码\n\n```\n$ git clone https://github.com/google/flatbuffers.git\n#切换到最新release版本\n$ git checkout v1.2.0\n```\n\n### 安装cmake \n\nhttp://www.cmake.org.\n\n```\nfor mac osx\n$ brew install cmake\nfor centOS\n$ sudo yum install cmake\n```\n\n### 用cmake构建project\n\n```\ncmake -G \"Unix Makefiles\"\ncmake -G \"Visual Studio 10\"\ncmake -G \"Xcode\"\n```\n在*nix系统，mac osx系统也建议使用 `cmake -G \"Unix Makefiles\"`，生成`Makefile`,之后`make & make install`\n编译生成`flatc`并安装到系统。\n\n```\n$ cmake -G \"Unix Makefiles\"\n$ make\n$ make insall\n\n```\n\n\n## 使用schema编译器flatc来生成基础代码\n\n```\n$ cd samples\n#在目录src中生成java代码\n$flatc -j -o src monster.fbs \n\n```\n\n### 编程语言参数:\n\n+ --cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).\n+ --java, -j : Generate Java code.\n+ --csharp, -n : Generate C# code.\n+ --go, -g : Generate Go code.\n+ --python, -p: Generate Python code.\n+ --javascript, -s: Generate JavaScript code.\n+ --php: Generate PHP code.\n\n### 其他常用选项：\n\n+ -o PATH 指定源码输出目录\n+ -I PATH 有include语句时，指定include目录\n\n\n# 完整的参数\n\n```\nusage: flatc [OPTION]... FILE... [-- FILE...]\n  -b              Generate wire format binaries for any data definitions.\n  -t              Generate text output for any data definitions.\n  -c              Generate C++ headers for tables/structs.\n  -g              Generate Go files for tables/structs.\n  -j              Generate Java classes for tables/structs.\n  -s              Generate JavaScript code for tables/structs.\n  -n              Generate C# classes for tables/structs.\n  -p              Generate Python files for tables/structs.\n  -o PATH         Prefix PATH to all generated files.\n  -I PATH         Search for includes in the specified path.\n  -M              Print make rules for generated files.\n  --strict-json   Strict JSON: field names must be / will be quoted,\n                  no trailing commas in tables/vectors.\n  --defaults-json Output fields whose value is the default when\n                  writing JSON\n  --no-prefix     Don't prefix enum values with the enum type in C++.\n  --scoped-enums  Use C++11 style scoped and strongly typed enums.\n                  also implies --no-prefix.\n  --gen-includes  (deprecated), this is the default behavior.\n                  If the original behavior is required (no include\n                  statements) use --no-includes.\n  --no-includes   Don't generate include statements for included\n                  schemas the generated file depends on (C++).\n  --gen-mutable   Generate accessors that can mutate buffers in-place.\n  --gen-onefile   Generate single output file for C#\n  --raw-binary    Allow binaries without file_indentifier to be read.\n                  This may crash flatc given a mismatched schema.\n  --proto         Input is a .proto, translate to .fbs.\n  --schema        Serialize schemas instead of JSON (use with -b)\nFILEs may depend on declarations in earlier files.\nFILEs after the -- must be binary flatbuffer format files.\nOutput files are named using the base file name of the input,\nand written to the current directory or the path given by -o.\nexample: flatc -c -b schema1.fbs schema2.fbs data.json\n```\n\n## 写schema IDL文件\n\n参考：http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\n","source":"_posts/技术/FlatBuffers/FlatBuffers使用指南.md","raw":"---\ntitle: FlatBuffers 使用指南\ndate: 2016-02-19 20:20:42\ncategories: \n\t- 技术\n\t- FlatBuffers\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122224.JPG\ntags: \n\t- FlatBuffers\n\t- 序列化\n---\n\n# FlatBuffers 使用指南\n\nFlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍\n\n## 编译源码\n\n```\n$ git clone https://github.com/google/flatbuffers.git\n#切换到最新release版本\n$ git checkout v1.2.0\n```\n\n### 安装cmake \n\nhttp://www.cmake.org.\n\n```\nfor mac osx\n$ brew install cmake\nfor centOS\n$ sudo yum install cmake\n```\n\n### 用cmake构建project\n\n```\ncmake -G \"Unix Makefiles\"\ncmake -G \"Visual Studio 10\"\ncmake -G \"Xcode\"\n```\n在*nix系统，mac osx系统也建议使用 `cmake -G \"Unix Makefiles\"`，生成`Makefile`,之后`make & make install`\n编译生成`flatc`并安装到系统。\n\n```\n$ cmake -G \"Unix Makefiles\"\n$ make\n$ make insall\n\n```\n\n\n## 使用schema编译器flatc来生成基础代码\n\n```\n$ cd samples\n#在目录src中生成java代码\n$flatc -j -o src monster.fbs \n\n```\n\n### 编程语言参数:\n\n+ --cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).\n+ --java, -j : Generate Java code.\n+ --csharp, -n : Generate C# code.\n+ --go, -g : Generate Go code.\n+ --python, -p: Generate Python code.\n+ --javascript, -s: Generate JavaScript code.\n+ --php: Generate PHP code.\n\n### 其他常用选项：\n\n+ -o PATH 指定源码输出目录\n+ -I PATH 有include语句时，指定include目录\n\n\n# 完整的参数\n\n```\nusage: flatc [OPTION]... FILE... [-- FILE...]\n  -b              Generate wire format binaries for any data definitions.\n  -t              Generate text output for any data definitions.\n  -c              Generate C++ headers for tables/structs.\n  -g              Generate Go files for tables/structs.\n  -j              Generate Java classes for tables/structs.\n  -s              Generate JavaScript code for tables/structs.\n  -n              Generate C# classes for tables/structs.\n  -p              Generate Python files for tables/structs.\n  -o PATH         Prefix PATH to all generated files.\n  -I PATH         Search for includes in the specified path.\n  -M              Print make rules for generated files.\n  --strict-json   Strict JSON: field names must be / will be quoted,\n                  no trailing commas in tables/vectors.\n  --defaults-json Output fields whose value is the default when\n                  writing JSON\n  --no-prefix     Don't prefix enum values with the enum type in C++.\n  --scoped-enums  Use C++11 style scoped and strongly typed enums.\n                  also implies --no-prefix.\n  --gen-includes  (deprecated), this is the default behavior.\n                  If the original behavior is required (no include\n                  statements) use --no-includes.\n  --no-includes   Don't generate include statements for included\n                  schemas the generated file depends on (C++).\n  --gen-mutable   Generate accessors that can mutate buffers in-place.\n  --gen-onefile   Generate single output file for C#\n  --raw-binary    Allow binaries without file_indentifier to be read.\n                  This may crash flatc given a mismatched schema.\n  --proto         Input is a .proto, translate to .fbs.\n  --schema        Serialize schemas instead of JSON (use with -b)\nFILEs may depend on declarations in earlier files.\nFILEs after the -- must be binary flatbuffer format files.\nOutput files are named using the base file name of the input,\nand written to the current directory or the path given by -o.\nexample: flatc -c -b schema1.fbs schema2.fbs data.json\n```\n\n## 写schema IDL文件\n\n参考：http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\n","slug":"技术/FlatBuffers/FlatBuffers使用指南","published":1,"updated":"2016-02-19T13:42:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxmb0017lginvuuiv7lh","content":"<h1 id=\"FlatBuffers-使用指南\"><a href=\"#FlatBuffers-使用指南\" class=\"headerlink\" title=\"FlatBuffers 使用指南\"></a>FlatBuffers 使用指南</h1><p>FlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍</p>\n<h2 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/google/flatbuffers.git</span><br><span class=\"line\">#切换到最新release版本</span><br><span class=\"line\">$ git checkout v1.2.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装cmake\"><a href=\"#安装cmake\" class=\"headerlink\" title=\"安装cmake\"></a>安装cmake</h3><p><a href=\"http://www.cmake.org\" target=\"_blank\" rel=\"external\">http://www.cmake.org</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for mac osx</span><br><span class=\"line\">$ brew install cmake</span><br><span class=\"line\">for centOS</span><br><span class=\"line\">$ sudo yum install cmake</span><br></pre></td></tr></table></figure>\n<h3 id=\"用cmake构建project\"><a href=\"#用cmake构建project\" class=\"headerlink\" title=\"用cmake构建project\"></a>用cmake构建project</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -G &quot;Unix Makefiles&quot;</span><br><span class=\"line\">cmake -G &quot;Visual Studio 10&quot;</span><br><span class=\"line\">cmake -G &quot;Xcode&quot;</span><br></pre></td></tr></table></figure>\n<p>在*nix系统，mac osx系统也建议使用 <code>cmake -G &quot;Unix Makefiles&quot;</code>，生成<code>Makefile</code>,之后<code>make &amp; make install</code><br>编译生成<code>flatc</code>并安装到系统。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake -G &quot;Unix Makefiles&quot;</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ make insall</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用schema编译器flatc来生成基础代码\"><a href=\"#使用schema编译器flatc来生成基础代码\" class=\"headerlink\" title=\"使用schema编译器flatc来生成基础代码\"></a>使用schema编译器flatc来生成基础代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd samples</span><br><span class=\"line\">#在目录src中生成java代码</span><br><span class=\"line\">$flatc -j -o src monster.fbs</span><br></pre></td></tr></table></figure>\n<h3 id=\"编程语言参数\"><a href=\"#编程语言参数\" class=\"headerlink\" title=\"编程语言参数:\"></a>编程语言参数:</h3><ul>\n<li>–cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).</li>\n<li>–java, -j : Generate Java code.</li>\n<li>–csharp, -n : Generate C# code.</li>\n<li>–go, -g : Generate Go code.</li>\n<li>–python, -p: Generate Python code.</li>\n<li>–javascript, -s: Generate JavaScript code.</li>\n<li>–php: Generate PHP code.</li>\n</ul>\n<h3 id=\"其他常用选项：\"><a href=\"#其他常用选项：\" class=\"headerlink\" title=\"其他常用选项：\"></a>其他常用选项：</h3><ul>\n<li>-o PATH 指定源码输出目录</li>\n<li>-I PATH 有include语句时，指定include目录</li>\n</ul>\n<h1 id=\"完整的参数\"><a href=\"#完整的参数\" class=\"headerlink\" title=\"完整的参数\"></a>完整的参数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: flatc [OPTION]... FILE... [-- FILE...]</span><br><span class=\"line\">  -b              Generate wire format binaries for any data definitions.</span><br><span class=\"line\">  -t              Generate text output for any data definitions.</span><br><span class=\"line\">  -c              Generate C++ headers for tables/structs.</span><br><span class=\"line\">  -g              Generate Go files for tables/structs.</span><br><span class=\"line\">  -j              Generate Java classes for tables/structs.</span><br><span class=\"line\">  -s              Generate JavaScript code for tables/structs.</span><br><span class=\"line\">  -n              Generate C# classes for tables/structs.</span><br><span class=\"line\">  -p              Generate Python files for tables/structs.</span><br><span class=\"line\">  -o PATH         Prefix PATH to all generated files.</span><br><span class=\"line\">  -I PATH         Search for includes in the specified path.</span><br><span class=\"line\">  -M              Print make rules for generated files.</span><br><span class=\"line\">  --strict-json   Strict JSON: field names must be / will be quoted,</span><br><span class=\"line\">                  no trailing commas in tables/vectors.</span><br><span class=\"line\">  --defaults-json Output fields whose value is the default when</span><br><span class=\"line\">                  writing JSON</span><br><span class=\"line\">  --no-prefix     Don&apos;t prefix enum values with the enum type in C++.</span><br><span class=\"line\">  --scoped-enums  Use C++11 style scoped and strongly typed enums.</span><br><span class=\"line\">                  also implies --no-prefix.</span><br><span class=\"line\">  --gen-includes  (deprecated), this is the default behavior.</span><br><span class=\"line\">                  If the original behavior is required (no include</span><br><span class=\"line\">                  statements) use --no-includes.</span><br><span class=\"line\">  --no-includes   Don&apos;t generate include statements for included</span><br><span class=\"line\">                  schemas the generated file depends on (C++).</span><br><span class=\"line\">  --gen-mutable   Generate accessors that can mutate buffers in-place.</span><br><span class=\"line\">  --gen-onefile   Generate single output file for C#</span><br><span class=\"line\">  --raw-binary    Allow binaries without file_indentifier to be read.</span><br><span class=\"line\">                  This may crash flatc given a mismatched schema.</span><br><span class=\"line\">  --proto         Input is a .proto, translate to .fbs.</span><br><span class=\"line\">  --schema        Serialize schemas instead of JSON (use with -b)</span><br><span class=\"line\">FILEs may depend on declarations in earlier files.</span><br><span class=\"line\">FILEs after the -- must be binary flatbuffer format files.</span><br><span class=\"line\">Output files are named using the base file name of the input,</span><br><span class=\"line\">and written to the current directory or the path given by -o.</span><br><span class=\"line\">example: flatc -c -b schema1.fbs schema2.fbs data.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"写schema-IDL文件\"><a href=\"#写schema-IDL文件\" class=\"headerlink\" title=\"写schema IDL文件\"></a>写schema IDL文件</h2><p>参考：<a href=\"http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html</a></p>\n","excerpt":"","more":"<h1 id=\"FlatBuffers-使用指南\"><a href=\"#FlatBuffers-使用指南\" class=\"headerlink\" title=\"FlatBuffers 使用指南\"></a>FlatBuffers 使用指南</h1><p>FlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍</p>\n<h2 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/google/flatbuffers.git</span><br><span class=\"line\">#切换到最新release版本</span><br><span class=\"line\">$ git checkout v1.2.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装cmake\"><a href=\"#安装cmake\" class=\"headerlink\" title=\"安装cmake\"></a>安装cmake</h3><p><a href=\"http://www.cmake.org\">http://www.cmake.org</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for mac osx</span><br><span class=\"line\">$ brew install cmake</span><br><span class=\"line\">for centOS</span><br><span class=\"line\">$ sudo yum install cmake</span><br></pre></td></tr></table></figure>\n<h3 id=\"用cmake构建project\"><a href=\"#用cmake构建project\" class=\"headerlink\" title=\"用cmake构建project\"></a>用cmake构建project</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -G &quot;Unix Makefiles&quot;</span><br><span class=\"line\">cmake -G &quot;Visual Studio 10&quot;</span><br><span class=\"line\">cmake -G &quot;Xcode&quot;</span><br></pre></td></tr></table></figure>\n<p>在*nix系统，mac osx系统也建议使用 <code>cmake -G &quot;Unix Makefiles&quot;</code>，生成<code>Makefile</code>,之后<code>make &amp; make install</code><br>编译生成<code>flatc</code>并安装到系统。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake -G &quot;Unix Makefiles&quot;</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ make insall</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用schema编译器flatc来生成基础代码\"><a href=\"#使用schema编译器flatc来生成基础代码\" class=\"headerlink\" title=\"使用schema编译器flatc来生成基础代码\"></a>使用schema编译器flatc来生成基础代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd samples</span><br><span class=\"line\">#在目录src中生成java代码</span><br><span class=\"line\">$flatc -j -o src monster.fbs</span><br></pre></td></tr></table></figure>\n<h3 id=\"编程语言参数\"><a href=\"#编程语言参数\" class=\"headerlink\" title=\"编程语言参数:\"></a>编程语言参数:</h3><ul>\n<li>–cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).</li>\n<li>–java, -j : Generate Java code.</li>\n<li>–csharp, -n : Generate C# code.</li>\n<li>–go, -g : Generate Go code.</li>\n<li>–python, -p: Generate Python code.</li>\n<li>–javascript, -s: Generate JavaScript code.</li>\n<li>–php: Generate PHP code.</li>\n</ul>\n<h3 id=\"其他常用选项：\"><a href=\"#其他常用选项：\" class=\"headerlink\" title=\"其他常用选项：\"></a>其他常用选项：</h3><ul>\n<li>-o PATH 指定源码输出目录</li>\n<li>-I PATH 有include语句时，指定include目录</li>\n</ul>\n<h1 id=\"完整的参数\"><a href=\"#完整的参数\" class=\"headerlink\" title=\"完整的参数\"></a>完整的参数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: flatc [OPTION]... FILE... [-- FILE...]</span><br><span class=\"line\">  -b              Generate wire format binaries for any data definitions.</span><br><span class=\"line\">  -t              Generate text output for any data definitions.</span><br><span class=\"line\">  -c              Generate C++ headers for tables/structs.</span><br><span class=\"line\">  -g              Generate Go files for tables/structs.</span><br><span class=\"line\">  -j              Generate Java classes for tables/structs.</span><br><span class=\"line\">  -s              Generate JavaScript code for tables/structs.</span><br><span class=\"line\">  -n              Generate C# classes for tables/structs.</span><br><span class=\"line\">  -p              Generate Python files for tables/structs.</span><br><span class=\"line\">  -o PATH         Prefix PATH to all generated files.</span><br><span class=\"line\">  -I PATH         Search for includes in the specified path.</span><br><span class=\"line\">  -M              Print make rules for generated files.</span><br><span class=\"line\">  --strict-json   Strict JSON: field names must be / will be quoted,</span><br><span class=\"line\">                  no trailing commas in tables/vectors.</span><br><span class=\"line\">  --defaults-json Output fields whose value is the default when</span><br><span class=\"line\">                  writing JSON</span><br><span class=\"line\">  --no-prefix     Don&apos;t prefix enum values with the enum type in C++.</span><br><span class=\"line\">  --scoped-enums  Use C++11 style scoped and strongly typed enums.</span><br><span class=\"line\">                  also implies --no-prefix.</span><br><span class=\"line\">  --gen-includes  (deprecated), this is the default behavior.</span><br><span class=\"line\">                  If the original behavior is required (no include</span><br><span class=\"line\">                  statements) use --no-includes.</span><br><span class=\"line\">  --no-includes   Don&apos;t generate include statements for included</span><br><span class=\"line\">                  schemas the generated file depends on (C++).</span><br><span class=\"line\">  --gen-mutable   Generate accessors that can mutate buffers in-place.</span><br><span class=\"line\">  --gen-onefile   Generate single output file for C#</span><br><span class=\"line\">  --raw-binary    Allow binaries without file_indentifier to be read.</span><br><span class=\"line\">                  This may crash flatc given a mismatched schema.</span><br><span class=\"line\">  --proto         Input is a .proto, translate to .fbs.</span><br><span class=\"line\">  --schema        Serialize schemas instead of JSON (use with -b)</span><br><span class=\"line\">FILEs may depend on declarations in earlier files.</span><br><span class=\"line\">FILEs after the -- must be binary flatbuffer format files.</span><br><span class=\"line\">Output files are named using the base file name of the input,</span><br><span class=\"line\">and written to the current directory or the path given by -o.</span><br><span class=\"line\">example: flatc -c -b schema1.fbs schema2.fbs data.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"写schema-IDL文件\"><a href=\"#写schema-IDL文件\" class=\"headerlink\" title=\"写schema IDL文件\"></a>写schema IDL文件</h2><p>参考：<a href=\"http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\">http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html</a></p>\n"},{"title":"FlatBuffers简介","date":"2016-02-19T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG","_content":"\n## FlatBuffers简介\n\n代码：https://github.com/google/flatbuffers/\n\n文档：http://google.github.io/flatbuffers/\n\n\nFlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。\n\n\n\n### 支持的操作系统\n\n* Android\n* Windows\n* MacOS X\n* Linux\n\n\n### 目前支持的编程语言\n\n* C++\n* C#\n* Go\n* Java\n* JavaScript\n* PHP\n* Python\n\nand many more in progress...\n\n## 为什么要用FlatBuffers?\n\n+ **对序列化数据的访问不需要打包和拆包**——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；\n+ **内存效率和速度**——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；\n+ **扩展性、灵活性【多版本兼容】**——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；\n+ **最小代码依赖**——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；\n+ **强类型设计**——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；\n+ **使用简单**——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；\n+ **跨平台**——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；\n\n \n### 为什么不使用Protocol Buffers的，或者JSON\n\nProtocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。\n\nJSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。\n\n与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。http://google.github.io/flatbuffers/md__benchmarks.html\n\n\n\n \n ","source":"_posts/技术/FlatBuffers/FlatBuffers简介.md","raw":"---\ntitle: FlatBuffers简介\ndate: 2016-02-19 20:20:42\ncategories: \n\t- 技术\n\t- FlatBuffers\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG\ntags: \n\t- FlatBuffers\n\t- 序列化\n---\n\n## FlatBuffers简介\n\n代码：https://github.com/google/flatbuffers/\n\n文档：http://google.github.io/flatbuffers/\n\n\nFlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。\n\n\n\n### 支持的操作系统\n\n* Android\n* Windows\n* MacOS X\n* Linux\n\n\n### 目前支持的编程语言\n\n* C++\n* C#\n* Go\n* Java\n* JavaScript\n* PHP\n* Python\n\nand many more in progress...\n\n## 为什么要用FlatBuffers?\n\n+ **对序列化数据的访问不需要打包和拆包**——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；\n+ **内存效率和速度**——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；\n+ **扩展性、灵活性【多版本兼容】**——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；\n+ **最小代码依赖**——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；\n+ **强类型设计**——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；\n+ **使用简单**——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；\n+ **跨平台**——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；\n\n \n### 为什么不使用Protocol Buffers的，或者JSON\n\nProtocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。\n\nJSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。\n\n与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。http://google.github.io/flatbuffers/md__benchmarks.html\n\n\n\n \n ","slug":"技术/FlatBuffers/FlatBuffers简介","published":1,"updated":"2016-02-19T14:08:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxmc0018lgini9i0al9j","content":"<h2 id=\"FlatBuffers简介\"><a href=\"#FlatBuffers简介\" class=\"headerlink\" title=\"FlatBuffers简介\"></a>FlatBuffers简介</h2><p>代码：<a href=\"https://github.com/google/flatbuffers/\" target=\"_blank\" rel=\"external\">https://github.com/google/flatbuffers/</a></p>\n<p>文档：<a href=\"http://google.github.io/flatbuffers/\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/</a></p>\n<p>FlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。</p>\n<h3 id=\"支持的操作系统\"><a href=\"#支持的操作系统\" class=\"headerlink\" title=\"支持的操作系统\"></a>支持的操作系统</h3><ul>\n<li>Android</li>\n<li>Windows</li>\n<li>MacOS X</li>\n<li>Linux</li>\n</ul>\n<h3 id=\"目前支持的编程语言\"><a href=\"#目前支持的编程语言\" class=\"headerlink\" title=\"目前支持的编程语言\"></a>目前支持的编程语言</h3><ul>\n<li>C++</li>\n<li>C#</li>\n<li>Go</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Python</li>\n</ul>\n<p>and many more in progress…</p>\n<h2 id=\"为什么要用FlatBuffers\"><a href=\"#为什么要用FlatBuffers\" class=\"headerlink\" title=\"为什么要用FlatBuffers?\"></a>为什么要用FlatBuffers?</h2><ul>\n<li><strong>对序列化数据的访问不需要打包和拆包</strong>——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；</li>\n<li><strong>内存效率和速度</strong>——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；</li>\n<li><strong>扩展性、灵活性【多版本兼容】</strong>——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；</li>\n<li><strong>最小代码依赖</strong>——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；</li>\n<li><strong>强类型设计</strong>——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；</li>\n<li><strong>使用简单</strong>——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；</li>\n<li><strong>跨平台</strong>——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；</li>\n</ul>\n<h3 id=\"为什么不使用Protocol-Buffers的，或者JSON\"><a href=\"#为什么不使用Protocol-Buffers的，或者JSON\" class=\"headerlink\" title=\"为什么不使用Protocol Buffers的，或者JSON\"></a>为什么不使用Protocol Buffers的，或者JSON</h3><p>Protocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。</p>\n<p>JSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。</p>\n<p>与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。<a href=\"http://google.github.io/flatbuffers/md__benchmarks.html\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/md__benchmarks.html</a></p>\n","excerpt":"","more":"<h2 id=\"FlatBuffers简介\"><a href=\"#FlatBuffers简介\" class=\"headerlink\" title=\"FlatBuffers简介\"></a>FlatBuffers简介</h2><p>代码：<a href=\"https://github.com/google/flatbuffers/\">https://github.com/google/flatbuffers/</a></p>\n<p>文档：<a href=\"http://google.github.io/flatbuffers/\">http://google.github.io/flatbuffers/</a></p>\n<p>FlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。</p>\n<h3 id=\"支持的操作系统\"><a href=\"#支持的操作系统\" class=\"headerlink\" title=\"支持的操作系统\"></a>支持的操作系统</h3><ul>\n<li>Android</li>\n<li>Windows</li>\n<li>MacOS X</li>\n<li>Linux</li>\n</ul>\n<h3 id=\"目前支持的编程语言\"><a href=\"#目前支持的编程语言\" class=\"headerlink\" title=\"目前支持的编程语言\"></a>目前支持的编程语言</h3><ul>\n<li>C++</li>\n<li>C#</li>\n<li>Go</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Python</li>\n</ul>\n<p>and many more in progress…</p>\n<h2 id=\"为什么要用FlatBuffers\"><a href=\"#为什么要用FlatBuffers\" class=\"headerlink\" title=\"为什么要用FlatBuffers?\"></a>为什么要用FlatBuffers?</h2><ul>\n<li><strong>对序列化数据的访问不需要打包和拆包</strong>——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；</li>\n<li><strong>内存效率和速度</strong>——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；</li>\n<li><strong>扩展性、灵活性【多版本兼容】</strong>——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；</li>\n<li><strong>最小代码依赖</strong>——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；</li>\n<li><strong>强类型设计</strong>——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；</li>\n<li><strong>使用简单</strong>——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；</li>\n<li><strong>跨平台</strong>——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；</li>\n</ul>\n<h3 id=\"为什么不使用Protocol-Buffers的，或者JSON\"><a href=\"#为什么不使用Protocol-Buffers的，或者JSON\" class=\"headerlink\" title=\"为什么不使用Protocol Buffers的，或者JSON\"></a>为什么不使用Protocol Buffers的，或者JSON</h3><p>Protocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。</p>\n<p>JSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。</p>\n<p>与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。<a href=\"http://google.github.io/flatbuffers/md__benchmarks.html\">http://google.github.io/flatbuffers/md__benchmarks.html</a></p>\n"},{"title":"wrk基准测试工具安装使用","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-03-04T01:06:33.000Z","keywords":"基准测试,wrk","description":null,"_content":"\n\n\n\n## git\n\nhttps://github.com/wg/wrk\n\ngit clone https://github.com/wg/wrk.git\n\n## 安装\n\n在makefile中33行\nLDIR     = deps/luajit/src\nLIBS    := -lluajit $(LIBS)\nCFLAGS  += -I$(LDIR)\nLDFLAGS += -L$(LDIR)\n\n下面添加：\n\nLDFLAGS  +=  -L/usr/local/opt/openssl/lib\nCFLAGS += -I/usr/local/opt/openssl/include\n\n\nmake\n\n## 基本使用\n\nBasic Usage\n\n  wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 12 threads, and keeping\n  400 HTTP connections open.\n\n  Output:\n\n```\n  Running 30s test @ http://127.0.0.1:8080/index.html\n    12 threads and 400 connections\n    Thread Stats   Avg      Stdev     Max   +/- Stdev\n      Latency   635.91us    0.89ms  12.92ms   93.69%\n      Req/Sec    56.20k     8.07k   62.00k    86.54%\n    22464657 requests in 30.00s, 17.76GB read\n  Requests/sec: 748868.53\n  Transfer/sec:    606.33MB\n```\n\n## 参数说明\n\n```\n$ wrk\nUsage: wrk <options> <url>                            \n  Options:                                            \n    -c, --connections <N>  Connections to keep open   \n    -d, --duration    <T>  Duration of test           \n    -t, --threads     <N>  Number of threads to use   \n                                                      \n    -s, --script      <S>  Load Lua script file       \n    -H, --header      <H>  Add header to request      \n        --latency          Print latency statistics   \n        --timeout     <T>  Socket/request timeout     \n    -v, --version          Print version details      \n                                                      \n  Numeric arguments may include a SI unit (1k, 1M, 1G)\n  Time arguments may include a time unit (2s, 2m, 2h)\n  \n```\n\n\n","source":"_posts/技术/工具/wrk基准测试工具安装使用.md","raw":"---\ntitle: wrk基准测试工具安装使用\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG'\ndate: 2016-03-04 09:06:33\ncategories:\n\t- 技术\n\t- 工具\ntags:\n\t- 基准测试\n\t- wrk\nkeywords: 基准测试,wrk\ndescription:\n---\n\n\n\n\n## git\n\nhttps://github.com/wg/wrk\n\ngit clone https://github.com/wg/wrk.git\n\n## 安装\n\n在makefile中33行\nLDIR     = deps/luajit/src\nLIBS    := -lluajit $(LIBS)\nCFLAGS  += -I$(LDIR)\nLDFLAGS += -L$(LDIR)\n\n下面添加：\n\nLDFLAGS  +=  -L/usr/local/opt/openssl/lib\nCFLAGS += -I/usr/local/opt/openssl/include\n\n\nmake\n\n## 基本使用\n\nBasic Usage\n\n  wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 12 threads, and keeping\n  400 HTTP connections open.\n\n  Output:\n\n```\n  Running 30s test @ http://127.0.0.1:8080/index.html\n    12 threads and 400 connections\n    Thread Stats   Avg      Stdev     Max   +/- Stdev\n      Latency   635.91us    0.89ms  12.92ms   93.69%\n      Req/Sec    56.20k     8.07k   62.00k    86.54%\n    22464657 requests in 30.00s, 17.76GB read\n  Requests/sec: 748868.53\n  Transfer/sec:    606.33MB\n```\n\n## 参数说明\n\n```\n$ wrk\nUsage: wrk <options> <url>                            \n  Options:                                            \n    -c, --connections <N>  Connections to keep open   \n    -d, --duration    <T>  Duration of test           \n    -t, --threads     <N>  Number of threads to use   \n                                                      \n    -s, --script      <S>  Load Lua script file       \n    -H, --header      <H>  Add header to request      \n        --latency          Print latency statistics   \n        --timeout     <T>  Socket/request timeout     \n    -v, --version          Print version details      \n                                                      \n  Numeric arguments may include a SI unit (1k, 1M, 1G)\n  Time arguments may include a time unit (2s, 2m, 2h)\n  \n```\n\n\n","slug":"技术/工具/wrk基准测试工具安装使用","published":1,"updated":"2016-03-04T01:11:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxmf001alginut3fpvq9","content":"<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p><a href=\"https://github.com/wg/wrk\" target=\"_blank\" rel=\"external\">https://github.com/wg/wrk</a></p>\n<p>git clone <a href=\"https://github.com/wg/wrk.git\" target=\"_blank\" rel=\"external\">https://github.com/wg/wrk.git</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在makefile中33行<br>LDIR     = deps/luajit/src<br>LIBS    := -lluajit $(LIBS)<br>CFLAGS  += -I$(LDIR)<br>LDFLAGS += -L$(LDIR)</p>\n<p>下面添加：</p>\n<p>LDFLAGS  +=  -L/usr/local/opt/openssl/lib<br>CFLAGS += -I/usr/local/opt/openssl/include</p>\n<p>make</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>Basic Usage</p>\n<p>  wrk -t12 -c400 -d30s <a href=\"http://127.0.0.1:8080/index.html\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/index.html</a></p>\n<p>  This runs a benchmark for 30 seconds, using 12 threads, and keeping<br>  400 HTTP connections open.</p>\n<p>  Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running 30s test @ http://127.0.0.1:8080/index.html</span><br><span class=\"line\">  12 threads and 400 connections</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency   635.91us    0.89ms  12.92ms   93.69%</span><br><span class=\"line\">    Req/Sec    56.20k     8.07k   62.00k    86.54%</span><br><span class=\"line\">  22464657 requests in 30.00s, 17.76GB read</span><br><span class=\"line\">Requests/sec: 748868.53</span><br><span class=\"line\">Transfer/sec:    606.33MB</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wrk</span><br><span class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class=\"line\">  Options:                                            </span><br><span class=\"line\">    -c, --connections &lt;N&gt;  Connections to keep open   </span><br><span class=\"line\">    -d, --duration    &lt;T&gt;  Duration of test           </span><br><span class=\"line\">    -t, --threads     &lt;N&gt;  Number of threads to use   </span><br><span class=\"line\">                                                      </span><br><span class=\"line\">    -s, --script      &lt;S&gt;  Load Lua script file       </span><br><span class=\"line\">    -H, --header      &lt;H&gt;  Add header to request      </span><br><span class=\"line\">        --latency          Print latency statistics   </span><br><span class=\"line\">        --timeout     &lt;T&gt;  Socket/request timeout     </span><br><span class=\"line\">    -v, --version          Print version details      </span><br><span class=\"line\">                                                      </span><br><span class=\"line\">  Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class=\"line\">  Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p><a href=\"https://github.com/wg/wrk\">https://github.com/wg/wrk</a></p>\n<p>git clone <a href=\"https://github.com/wg/wrk.git\">https://github.com/wg/wrk.git</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在makefile中33行<br>LDIR     = deps/luajit/src<br>LIBS    := -lluajit $(LIBS)<br>CFLAGS  += -I$(LDIR)<br>LDFLAGS += -L$(LDIR)</p>\n<p>下面添加：</p>\n<p>LDFLAGS  +=  -L/usr/local/opt/openssl/lib<br>CFLAGS += -I/usr/local/opt/openssl/include</p>\n<p>make</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>Basic Usage</p>\n<p>  wrk -t12 -c400 -d30s <a href=\"http://127.0.0.1:8080/index.html\">http://127.0.0.1:8080/index.html</a></p>\n<p>  This runs a benchmark for 30 seconds, using 12 threads, and keeping<br>  400 HTTP connections open.</p>\n<p>  Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running 30s test @ http://127.0.0.1:8080/index.html</span><br><span class=\"line\">  12 threads and 400 connections</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency   635.91us    0.89ms  12.92ms   93.69%</span><br><span class=\"line\">    Req/Sec    56.20k     8.07k   62.00k    86.54%</span><br><span class=\"line\">  22464657 requests in 30.00s, 17.76GB read</span><br><span class=\"line\">Requests/sec: 748868.53</span><br><span class=\"line\">Transfer/sec:    606.33MB</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wrk</span><br><span class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class=\"line\">  Options:                                            </span><br><span class=\"line\">    -c, --connections &lt;N&gt;  Connections to keep open   </span><br><span class=\"line\">    -d, --duration    &lt;T&gt;  Duration of test           </span><br><span class=\"line\">    -t, --threads     &lt;N&gt;  Number of threads to use   </span><br><span class=\"line\">                                                      </span><br><span class=\"line\">    -s, --script      &lt;S&gt;  Load Lua script file       </span><br><span class=\"line\">    -H, --header      &lt;H&gt;  Add header to request      </span><br><span class=\"line\">        --latency          Print latency statistics   </span><br><span class=\"line\">        --timeout     &lt;T&gt;  Socket/request timeout     </span><br><span class=\"line\">    -v, --version          Print version details      </span><br><span class=\"line\">                                                      </span><br><span class=\"line\">  Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class=\"line\">  Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure>\n"},{"title":"领域模型的价值","date":"2016-02-21T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG","_content":"\n\n## 价值\n\n+ 提供什么服务：\n\t+ 什么来体现服务：运行方式，运行过程和业务逻辑\n+ 提供的质量：如何服务，要做的事情\n\n## 传统数据库为中心\n\n业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。\n以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。\n\n## OO|面向对象\n\n表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中\n逻辑直接存在于对象上﹐这与现实情况是吻合的。\n\n领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。\n\n在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。\n\n## 领域模型的特点\n\n1. 领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；\n　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；\n　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；\n　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；\n　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；\n　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；\n　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；\n　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。","source":"_posts/技术/领域模型/领域模型的价值.md","raw":"---\ntitle: 领域模型的价值\ndate: 2016-02-21 20:20:42\ncategories: \n\t- 技术\n\t- 领域模型\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG\ntags: \n\t- 领域模型\n\t- DDD\n---\n\n\n## 价值\n\n+ 提供什么服务：\n\t+ 什么来体现服务：运行方式，运行过程和业务逻辑\n+ 提供的质量：如何服务，要做的事情\n\n## 传统数据库为中心\n\n业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。\n以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。\n\n## OO|面向对象\n\n表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中\n逻辑直接存在于对象上﹐这与现实情况是吻合的。\n\n领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。\n\n在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。\n\n## 领域模型的特点\n\n1. 领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；\n　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；\n　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；\n　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；\n　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；\n　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；\n　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；\n　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。","slug":"技术/领域模型/领域模型的价值","published":1,"updated":"2016-02-21T15:57:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxmj001clginujgns7tq","content":"<h2 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h2><ul>\n<li>提供什么服务：<ul>\n<li>什么来体现服务：运行方式，运行过程和业务逻辑</li>\n</ul>\n</li>\n<li>提供的质量：如何服务，要做的事情</li>\n</ul>\n<h2 id=\"传统数据库为中心\"><a href=\"#传统数据库为中心\" class=\"headerlink\" title=\"传统数据库为中心\"></a>传统数据库为中心</h2><p>业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。<br>以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。</p>\n<h2 id=\"OO-面向对象\"><a href=\"#OO-面向对象\" class=\"headerlink\" title=\"OO|面向对象\"></a>OO|面向对象</h2><p>表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中<br>逻辑直接存在于对象上﹐这与现实情况是吻合的。</p>\n<p>领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。</p>\n<p>在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。</p>\n<h2 id=\"领域模型的特点\"><a href=\"#领域模型的特点\" class=\"headerlink\" title=\"领域模型的特点\"></a>领域模型的特点</h2><ol>\n<li>领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；<br>　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；<br>　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；<br>　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；<br>　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；<br>　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；<br>　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；<br>　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h2><ul>\n<li>提供什么服务：<ul>\n<li>什么来体现服务：运行方式，运行过程和业务逻辑</li>\n</ul>\n</li>\n<li>提供的质量：如何服务，要做的事情</li>\n</ul>\n<h2 id=\"传统数据库为中心\"><a href=\"#传统数据库为中心\" class=\"headerlink\" title=\"传统数据库为中心\"></a>传统数据库为中心</h2><p>业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。<br>以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。</p>\n<h2 id=\"OO-面向对象\"><a href=\"#OO-面向对象\" class=\"headerlink\" title=\"OO|面向对象\"></a>OO|面向对象</h2><p>表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中<br>逻辑直接存在于对象上﹐这与现实情况是吻合的。</p>\n<p>领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。</p>\n<p>在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。</p>\n<h2 id=\"领域模型的特点\"><a href=\"#领域模型的特点\" class=\"headerlink\" title=\"领域模型的特点\"></a>领域模型的特点</h2><ol>\n<li>领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；<br>　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；<br>　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；<br>　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；<br>　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；<br>　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；<br>　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；<br>　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。</li>\n</ol>\n"},{"title":"Hexo命令速记","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-21T14:31:12.000Z","_content":"\n## 简写\n\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n```\n\n## 服务器\n\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n```\n\n## 监视文件变动\n\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n```\n## 完成后部署\n\n```\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n```\n\n## 模版\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n```\n\n变量 | 描述\n--- | ---\nlayout | 布局\ntitle\t| 标题\ndate\t| 文件建立日期\n\n\n\n```\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n常用指令\n---\n\n## 安装升级\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \n```\n\n## init\n\n``` bash\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n## new\n\n``` bash\n$ hexo new [layout] <title>\n$ hexo n [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](configuration.html) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n\n\n## generate\n\n``` bash\n$ hexo generate\n```\n\n生成静态文件。\n\n选项 | 描述\n--- | ---\n`-d`, `--deploy` | 文件生成后立即部署网站\n`-w`, `--watch` | 监视文件变动\n\n## publish\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n``` bash\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n选项 | 描述\n--- | ---\n`-p`, `--port` | 重设端口\n`-s`, `--static` | 只使用静态文件\n`-l`, `--log` | 启动日记记录，使用覆盖记录格式\n\n## deploy\n\n``` bash\n$ hexo deploy\n```\n\n部署网站。\n\n参数 | 描述\n--- | ---\n`-g`, `--generate` | 部署之前预先生成静态文件\n\n## render\n\n``` bash\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n参数 | 描述\n--- | ---\n`-o`, `--output` | 设置输出路径\n\n## migrate\n\n``` bash\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](migration.html)。\n\n## clean\n\n``` bash\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n## list\n\n``` bash\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n``` bash\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n``` bash\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n``` bash\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n``` bash\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n``` bash\n$ hexo --config custom.yml\n```\n\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n### 显示草稿\n\n``` bash\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n``` bash\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n\n\n\n","source":"_posts/技术/Hexo/Hexo命令速记.md","raw":"---\ntitle: Hexo命令速记\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG\ndate: 2016-02-21 22:31:12\ncategories: \n\t- 技术\n\t- Hexo\ntags:\n\t- Hexo\n---\n\n## 简写\n\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n```\n\n## 服务器\n\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n```\n\n## 监视文件变动\n\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n```\n## 完成后部署\n\n```\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n```\n\n## 模版\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n```\n\n变量 | 描述\n--- | ---\nlayout | 布局\ntitle\t| 标题\ndate\t| 文件建立日期\n\n\n\n```\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n常用指令\n---\n\n## 安装升级\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \n```\n\n## init\n\n``` bash\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n## new\n\n``` bash\n$ hexo new [layout] <title>\n$ hexo n [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](configuration.html) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n\n\n## generate\n\n``` bash\n$ hexo generate\n```\n\n生成静态文件。\n\n选项 | 描述\n--- | ---\n`-d`, `--deploy` | 文件生成后立即部署网站\n`-w`, `--watch` | 监视文件变动\n\n## publish\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n``` bash\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n选项 | 描述\n--- | ---\n`-p`, `--port` | 重设端口\n`-s`, `--static` | 只使用静态文件\n`-l`, `--log` | 启动日记记录，使用覆盖记录格式\n\n## deploy\n\n``` bash\n$ hexo deploy\n```\n\n部署网站。\n\n参数 | 描述\n--- | ---\n`-g`, `--generate` | 部署之前预先生成静态文件\n\n## render\n\n``` bash\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n参数 | 描述\n--- | ---\n`-o`, `--output` | 设置输出路径\n\n## migrate\n\n``` bash\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](migration.html)。\n\n## clean\n\n``` bash\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n## list\n\n``` bash\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n``` bash\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n``` bash\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n``` bash\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n``` bash\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n``` bash\n$ hexo --config custom.yml\n```\n\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n### 显示草稿\n\n``` bash\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n``` bash\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n\n\n\n","slug":"技术/Hexo/Hexo命令速记","published":1,"updated":"2016-02-21T15:23:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxmm001elgintan22o1d","content":"<h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate#生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\">hexo g #生成静态网页</span><br><span class=\"line\">hexo d #开始部署</span><br></pre></td></tr></table></figure>\n<h2 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class=\"line\">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure>\n<h2 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个命令的作用是相同的</span><br><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">hexo new photo &quot;My Gallery&quot;</span><br><span class=\"line\">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: post</span><br><span class=\"line\">date: 2014-03-03 19:07:43</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Blog</span><br><span class=\"line\">tags: [Hexo]</span><br><span class=\"line\">keywords: Hexo, Blog</span><br><span class=\"line\">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h2 id=\"安装升级\"><a href=\"#安装升级\" class=\"headerlink\" title=\"安装升级\"></a>安装升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装  </span><br><span class=\"line\">npm update hexo -g #升级</span><br></pre></td></tr></table></figure>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">$ hexo n [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"configuration.html\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"migration.html\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"external\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","excerpt":"","more":"<h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate#生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\">hexo g #生成静态网页</span><br><span class=\"line\">hexo d #开始部署</span><br></pre></td></tr></table></figure>\n<h2 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class=\"line\">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure>\n<h2 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个命令的作用是相同的</span><br><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">hexo new photo &quot;My Gallery&quot;</span><br><span class=\"line\">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: post</span><br><span class=\"line\">date: 2014-03-03 19:07:43</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Blog</span><br><span class=\"line\">tags: [Hexo]</span><br><span class=\"line\">keywords: Hexo, Blog</span><br><span class=\"line\">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h2 id=\"安装升级\"><a href=\"#安装升级\" class=\"headerlink\" title=\"安装升级\"></a>安装升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装  </span><br><span class=\"line\">npm update hexo -g #升级</span><br></pre></td></tr></table></figure>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">$ hexo n [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"configuration.html\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"migration.html\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n"},{"title":"装载：HTTP2.0的奇妙日常","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-22T01:57:03.000Z","keywords":"HTTP2,HTTP2性能","description":"HTTP2.0性能增强的核心：二进制分帧；HTTP2.0 首部压缩；所有的HTTP2.0的请求都在一个TCP链接上；并行双向字节流的请求和响应；HTTP2.0的请求优先级；HTTP2.0的服务器推送；“十年前端，终归如初”","_content":"\n \n转载自AlloyTeam：http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\n\n\n“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。\n    “我给你一个表情，你自己体会一下”![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg>)\n    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。\n但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。\n \n \n## HTTP2.0性能增强的核心：二进制分帧\n\nHTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。\n    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。\n    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。\n    \nhttp2.0\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg>)\n\n\n然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。\n \n  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。\n   \n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg>)\n    \n  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）\n    \n## HTTP2.0 首部压缩\n\n HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。\n    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。\n \n  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解\n  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也\n  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。\n\n   晨伯起来又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ \n \n\n## 所有的HTTP2.0的请求都在一个TCP链接上\n\n   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\n    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。\n\n   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：\n   \n   1. 可以减少服务链接压力,内存占用少了,连接吞吐量大了\n   2. 由于 TCP 连接减少而使网络拥塞状况得以改观;\n   3. 慢启动时间减少,拥塞和丢包恢复速度更快。\n \n**也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。**\n \n他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。\n“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。\n“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来\n当时我就有预感要![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，而晨伯总是按套路出牌….\n \n## 并行双向字节流的请求和响应\n\n   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg>)\n\n \n把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:\n \n可以并行交错地发送请求,请求之间互不影响;\n可以并行交错地发送响应,响应之间互不干扰;\n只使用一个连接即可并行发送多个请求和响应;\n消除不必要的延迟,从而减少页面加载的时间;\n \n那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。\n \n \n“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。\n晨伯又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)。我开始确信，这是多年后程序员的肢体礼仪方式。\n \n## HTTP2.0的请求优先级\n\n   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。\n \n“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。\n“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。\n  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。\n内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。\n \n \nHTTP2.0的服务器推送\n    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。\n当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。\n   \n   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。\n \n \n   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。\n \n到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png>)\n\n在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。\n这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。\n出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..\n \n \n \n \n \n \n参考：\nhttp://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\nhttps://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/","source":"_posts/转载/http2.0/装载：HTTP2-0的奇妙日常.md","raw":"---\ntitle: 装载：HTTP2.0的奇妙日常\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG'\ndate: 2016-02-22 09:57:03\ncategories:\n\t- 转载\n\t- http 2.0\ntags:\n\t- http 2.0\nkeywords: HTTP2,HTTP2性能\ndescription: HTTP2.0性能增强的核心：二进制分帧；HTTP2.0 首部压缩；所有的HTTP2.0的请求都在一个TCP链接上；并行双向字节流的请求和响应；HTTP2.0的请求优先级；HTTP2.0的服务器推送；“十年前端，终归如初”\n---\n\n \n转载自AlloyTeam：http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\n\n\n“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。\n    “我给你一个表情，你自己体会一下”![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg>)\n    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。\n但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。\n \n \n## HTTP2.0性能增强的核心：二进制分帧\n\nHTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。\n    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。\n    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。\n    \nhttp2.0\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg>)\n\n\n然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。\n \n  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。\n   \n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg>)\n    \n  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）\n    \n## HTTP2.0 首部压缩\n\n HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。\n    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。\n \n  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解\n  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也\n  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。\n\n   晨伯起来又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ \n \n\n## 所有的HTTP2.0的请求都在一个TCP链接上\n\n   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\n    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。\n\n   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：\n   \n   1. 可以减少服务链接压力,内存占用少了,连接吞吐量大了\n   2. 由于 TCP 连接减少而使网络拥塞状况得以改观;\n   3. 慢启动时间减少,拥塞和丢包恢复速度更快。\n \n**也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。**\n \n他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。\n“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。\n“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来\n当时我就有预感要![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，而晨伯总是按套路出牌….\n \n## 并行双向字节流的请求和响应\n\n   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg>)\n\n \n把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:\n \n可以并行交错地发送请求,请求之间互不影响;\n可以并行交错地发送响应,响应之间互不干扰;\n只使用一个连接即可并行发送多个请求和响应;\n消除不必要的延迟,从而减少页面加载的时间;\n \n那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。\n \n \n“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。\n晨伯又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)。我开始确信，这是多年后程序员的肢体礼仪方式。\n \n## HTTP2.0的请求优先级\n\n   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。\n \n“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。\n“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。\n  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。\n内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。\n \n \nHTTP2.0的服务器推送\n    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。\n当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。\n   \n   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。\n \n \n   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。\n \n到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png>)\n\n在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。\n这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。\n出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..\n \n \n \n \n \n \n参考：\nhttp://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\nhttps://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/","slug":"转载/http2.0/装载：HTTP2-0的奇妙日常","published":1,"updated":"2016-02-23T01:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioz2uxmn001glging4tsnur7","content":"<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/</a></p>\n<p>“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。<br>    “我给你一个表情，你自己体会一下”<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg\" alt=\"\"><br>    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。<br>但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。</p>\n<h2 id=\"HTTP2-0性能增强的核心：二进制分帧\"><a href=\"#HTTP2-0性能增强的核心：二进制分帧\" class=\"headerlink\" title=\"HTTP2.0性能增强的核心：二进制分帧\"></a>HTTP2.0性能增强的核心：二进制分帧</h2><p>HTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。<br>    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。<br>    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。</p>\n<p>http2.0</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg\" alt=\"\"></p>\n<p>然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。</p>\n<p>  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg\" alt=\"\"></p>\n<p>  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。<br><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）</p>\n<h2 id=\"HTTP2-0-首部压缩\"><a href=\"#HTTP2-0-首部压缩\" class=\"headerlink\" title=\"HTTP2.0 首部压缩\"></a>HTTP2.0 首部压缩</h2><p> HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。<br>    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。</p>\n<p>  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解<br>  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也<br>  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。</p>\n<p>   晨伯起来又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ </p>\n<h2 id=\"所有的HTTP2-0的请求都在一个TCP链接上\"><a href=\"#所有的HTTP2-0的请求都在一个TCP链接上\" class=\"headerlink\" title=\"所有的HTTP2.0的请求都在一个TCP链接上\"></a>所有的HTTP2.0的请求都在一个TCP链接上</h2><p>   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面<a href=\"http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\" target=\"_blank\" rel=\"external\">http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！</a><br>    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。</p>\n<p>   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：</p>\n<ol>\n<li>可以减少服务链接压力,内存占用少了,连接吞吐量大了</li>\n<li>由于 TCP 连接减少而使网络拥塞状况得以改观;</li>\n<li>慢启动时间减少,拥塞和丢包恢复速度更快。</li>\n</ol>\n<p><strong>也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。</strong></p>\n<p>他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。<br>“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。<br>“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来<br>当时我就有预感要<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，而晨伯总是按套路出牌….</p>\n<h2 id=\"并行双向字节流的请求和响应\"><a href=\"#并行双向字节流的请求和响应\" class=\"headerlink\" title=\"并行双向字节流的请求和响应\"></a>并行双向字节流的请求和响应</h2><p>   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg\" alt=\"\"></p>\n<p>把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:</p>\n<p>可以并行交错地发送请求,请求之间互不影响;<br>可以并行交错地发送响应,响应之间互不干扰;<br>只使用一个连接即可并行发送多个请求和响应;<br>消除不必要的延迟,从而减少页面加载的时间;</p>\n<p>那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。</p>\n<p>“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。<br>晨伯又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">。我开始确信，这是多年后程序员的肢体礼仪方式。</p>\n<h2 id=\"HTTP2-0的请求优先级\"><a href=\"#HTTP2-0的请求优先级\" class=\"headerlink\" title=\"HTTP2.0的请求优先级\"></a>HTTP2.0的请求优先级</h2><p>   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。</p>\n<p>“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。<br>“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。<br>  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。<br>内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。</p>\n<p>HTTP2.0的服务器推送<br>    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。<br>当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。</p>\n<p>   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。</p>\n<p>   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。</p>\n<p>到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png\" alt=\"\"></p>\n<p>在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。<br>这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。<br>出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..</p>\n<p>参考：<br><a href=\"http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\" target=\"_blank\" rel=\"external\">http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data</a><br><a href=\"https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/\" target=\"_blank\" rel=\"external\">https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/</a></p>\n","excerpt":"","more":"<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\">http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/</a></p>\n<p>“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。<br>    “我给你一个表情，你自己体会一下”<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg\" alt=\"\"><br>    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。<br>但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。</p>\n<h2 id=\"HTTP2-0性能增强的核心：二进制分帧\"><a href=\"#HTTP2-0性能增强的核心：二进制分帧\" class=\"headerlink\" title=\"HTTP2.0性能增强的核心：二进制分帧\"></a>HTTP2.0性能增强的核心：二进制分帧</h2><p>HTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。<br>    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。<br>    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。</p>\n<p>http2.0</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg\" alt=\"\"></p>\n<p>然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。</p>\n<p>  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg\" alt=\"\"></p>\n<p>  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。<br><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）</p>\n<h2 id=\"HTTP2-0-首部压缩\"><a href=\"#HTTP2-0-首部压缩\" class=\"headerlink\" title=\"HTTP2.0 首部压缩\"></a>HTTP2.0 首部压缩</h2><p> HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。<br>    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。</p>\n<p>  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解<br>  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也<br>  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。</p>\n<p>   晨伯起来又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ </p>\n<h2 id=\"所有的HTTP2-0的请求都在一个TCP链接上\"><a href=\"#所有的HTTP2-0的请求都在一个TCP链接上\" class=\"headerlink\" title=\"所有的HTTP2.0的请求都在一个TCP链接上\"></a>所有的HTTP2.0的请求都在一个TCP链接上</h2><p>   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面<a href=\"http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\">http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！</a><br>    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。</p>\n<p>   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：</p>\n<ol>\n<li>可以减少服务链接压力,内存占用少了,连接吞吐量大了</li>\n<li>由于 TCP 连接减少而使网络拥塞状况得以改观;</li>\n<li>慢启动时间减少,拥塞和丢包恢复速度更快。</li>\n</ol>\n<p><strong>也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。</strong></p>\n<p>他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。<br>“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。<br>“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来<br>当时我就有预感要<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，而晨伯总是按套路出牌….</p>\n<h2 id=\"并行双向字节流的请求和响应\"><a href=\"#并行双向字节流的请求和响应\" class=\"headerlink\" title=\"并行双向字节流的请求和响应\"></a>并行双向字节流的请求和响应</h2><p>   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg\" alt=\"\"></p>\n<p>把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:</p>\n<p>可以并行交错地发送请求,请求之间互不影响;<br>可以并行交错地发送响应,响应之间互不干扰;<br>只使用一个连接即可并行发送多个请求和响应;<br>消除不必要的延迟,从而减少页面加载的时间;</p>\n<p>那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。</p>\n<p>“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。<br>晨伯又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">。我开始确信，这是多年后程序员的肢体礼仪方式。</p>\n<h2 id=\"HTTP2-0的请求优先级\"><a href=\"#HTTP2-0的请求优先级\" class=\"headerlink\" title=\"HTTP2.0的请求优先级\"></a>HTTP2.0的请求优先级</h2><p>   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。</p>\n<p>“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。<br>“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。<br>  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。<br>内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。</p>\n<p>HTTP2.0的服务器推送<br>    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。<br>当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。</p>\n<p>   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。</p>\n<p>   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。</p>\n<p>到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png\" alt=\"\"></p>\n<p>在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。<br>这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。<br>出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..</p>\n<p>参考：<br><a href=\"http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\">http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data</a><br><a href=\"https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/\">https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cioz2uxhz0001lginepuu9n43","category_id":"cioz2uxi70003lgin3c2d99j2","_id":"cioz2uxi90005lgine9jeccks"},{"post_id":"cioz2uxkk000dlginiyfp8n2l","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxky000slgindk24vshr"},{"post_id":"cioz2uxkk000dlginiyfp8n2l","category_id":"cioz2uxkv000llgincy5e3ynm","_id":"cioz2uxky000ulginr6yudz5n"},{"post_id":"cioz2uxkf0008lginjr8z27kg","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxkz000wlginwlp2o51g"},{"post_id":"cioz2uxkf0008lginjr8z27kg","category_id":"cioz2uxkv000llgincy5e3ynm","_id":"cioz2uxl0000ylginuve7lokh"},{"post_id":"cioz2uxkm000flginmvkui28h","category_id":"cioz2uxky000tlgin5xwz67ee","_id":"cioz2uxl0000zlginc6dhnt3e"},{"post_id":"cioz2uxkq000ilgincglcww71","category_id":"cioz2uxl0000xlgin7xj3b48d","_id":"cioz2uxl10011lgin3mfpnpr8"},{"post_id":"cioz2uxkh0009lginxxignkxn","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxl30013lginmlbgwmu9"},{"post_id":"cioz2uxkh0009lginxxignkxn","category_id":"cioz2uxkv000llgincy5e3ynm","_id":"cioz2uxl30014lginjc3ybxiu"},{"post_id":"cioz2uxkj000clginxqcgyfj9","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxl40015lginnzvw995z"},{"post_id":"cioz2uxkj000clginxqcgyfj9","category_id":"cioz2uxkv000llgincy5e3ynm","_id":"cioz2uxl40016lgin28gb8q9b"},{"post_id":"cioz2uxmb0017lginvuuiv7lh","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxmo001hlgin189yw3td"},{"post_id":"cioz2uxmb0017lginvuuiv7lh","category_id":"cioz2uxmh001blginbo6pl4eq","_id":"cioz2uxmq001llginh6pzsxhs"},{"post_id":"cioz2uxmc0018lgini9i0al9j","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxmq001nlginxwbs4qgx"},{"post_id":"cioz2uxmc0018lgini9i0al9j","category_id":"cioz2uxmh001blginbo6pl4eq","_id":"cioz2uxmr001qlgine4uh200t"},{"post_id":"cioz2uxmf001alginut3fpvq9","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxms001slgin3z1rxehs"},{"post_id":"cioz2uxmf001alginut3fpvq9","category_id":"cioz2uxmp001jlgingu927mq7","_id":"cioz2uxmt001vlginiax9yvds"},{"post_id":"cioz2uxmj001clginujgns7tq","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxmu001ylginpamvsvj4"},{"post_id":"cioz2uxmj001clginujgns7tq","category_id":"cioz2uxmr001plgingxcs63ov","_id":"cioz2uxmu0020lginn0a4011j"},{"post_id":"cioz2uxmm001elgintan22o1d","category_id":"cioz2uxki000blginbwqdo99y","_id":"cioz2uxmv0022lginocfj3wte"},{"post_id":"cioz2uxmm001elgintan22o1d","category_id":"cioz2uxms001tlgin0900fl7z","_id":"cioz2uxmw0024lgin3cqtqvct"},{"post_id":"cioz2uxmn001glging4tsnur7","category_id":"cioz2uxmu001zlginxt835pma","_id":"cioz2uxmx002alginrtccljd3"},{"post_id":"cioz2uxmn001glging4tsnur7","category_id":"cioz2uxmw0025lginvfw90n92","_id":"cioz2uxmx002clgin8l8c7k9o"}],"PostTag":[{"post_id":"cioz2uxhz0001lginepuu9n43","tag_id":"cioz2uxi50002lginy4iq3pby","_id":"cioz2uxib0006lginzoffvjto"},{"post_id":"cioz2uxhz0001lginepuu9n43","tag_id":"cioz2uxi80004lginutq1h7ze","_id":"cioz2uxib0007lgintzz4vh33"},{"post_id":"cioz2uxkf0008lginjr8z27kg","tag_id":"cioz2uxki000alginfr0ykw3u","_id":"cioz2uxkp000hlginhx8onyqd"},{"post_id":"cioz2uxkh0009lginxxignkxn","tag_id":"cioz2uxki000alginfr0ykw3u","_id":"cioz2uxkw000nlginsj164o3k"},{"post_id":"cioz2uxkh0009lginxxignkxn","tag_id":"cioz2uxkt000jlginl821mqwy","_id":"cioz2uxkw000olginpc23dtr3"},{"post_id":"cioz2uxkj000clginxqcgyfj9","tag_id":"cioz2uxki000alginfr0ykw3u","_id":"cioz2uxkx000rlgin5yse2r38"},{"post_id":"cioz2uxkm000flginmvkui28h","tag_id":"cioz2uxkw000plginv1sirdp3","_id":"cioz2uxky000vlginzefmye1l"},{"post_id":"cioz2uxmb0017lginvuuiv7lh","tag_id":"cioz2uxmf0019lgin3lzrf1zd","_id":"cioz2uxmq001klgin1fggwrgi"},{"post_id":"cioz2uxmb0017lginvuuiv7lh","tag_id":"cioz2uxml001dlgine1xai9mo","_id":"cioz2uxmq001mlgindzy901no"},{"post_id":"cioz2uxmc0018lgini9i0al9j","tag_id":"cioz2uxmf0019lgin3lzrf1zd","_id":"cioz2uxms001ulginin8pdozy"},{"post_id":"cioz2uxmc0018lgini9i0al9j","tag_id":"cioz2uxml001dlgine1xai9mo","_id":"cioz2uxmt001wlgin1uyvt4oq"},{"post_id":"cioz2uxmf001alginut3fpvq9","tag_id":"cioz2uxmr001rlgin2w661u85","_id":"cioz2uxmw0023lgin0f82ldx3"},{"post_id":"cioz2uxmf001alginut3fpvq9","tag_id":"cioz2uxmu001xlgin4zwiyaj9","_id":"cioz2uxmw0026lgini20fshzb"},{"post_id":"cioz2uxmj001clginujgns7tq","tag_id":"cioz2uxmv0021lginhci1vxzs","_id":"cioz2uxmx0029lgintcw1d96l"},{"post_id":"cioz2uxmj001clginujgns7tq","tag_id":"cioz2uxmw0027lginfgkn2xpa","_id":"cioz2uxmx002blginyjdbt0ff"},{"post_id":"cioz2uxmm001elgintan22o1d","tag_id":"cioz2uxmx0028lginm2gb97zz","_id":"cioz2uxmx002elginb10zgqpd"},{"post_id":"cioz2uxmn001glging4tsnur7","tag_id":"cioz2uxmx002dlginv1iruzy7","_id":"cioz2uxmy002flginski9mtzw"}],"Tag":[{"name":"春天","_id":"cioz2uxi50002lginy4iq3pby"},{"name":"梅花","_id":"cioz2uxi80004lginutq1h7ze"},{"name":"hystrix","_id":"cioz2uxki000alginfr0ykw3u"},{"name":"Circuit Breaker","_id":"cioz2uxkt000jlginl821mqwy"},{"name":"微服务","_id":"cioz2uxkw000plginv1sirdp3"},{"name":"FlatBuffers","_id":"cioz2uxmf0019lgin3lzrf1zd"},{"name":"序列化","_id":"cioz2uxml001dlgine1xai9mo"},{"name":"基准测试","_id":"cioz2uxmr001rlgin2w661u85"},{"name":"wrk","_id":"cioz2uxmu001xlgin4zwiyaj9"},{"name":"领域模型","_id":"cioz2uxmv0021lginhci1vxzs"},{"name":"DDD","_id":"cioz2uxmw0027lginfgkn2xpa"},{"name":"Hexo","_id":"cioz2uxmx0028lginm2gb97zz"},{"name":"http 2.0","_id":"cioz2uxmx002dlginv1iruzy7"}]}}