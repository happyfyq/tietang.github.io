{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/hueman/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/images/185638fo3y9el8ie2ohese.jpg","path":"images/185638fo3y9el8ie2ohese.jpg","modified":0,"renderable":0},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/blank.gif","path":"vendor/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading.gif","path":"vendor/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite.png","path":"vendor/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite@2x.png","path":"vendor/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_overlay.png","path":"vendor/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading@2x.gif","path":"vendor/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.css","path":"vendor/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.js","path":"vendor/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.pack.js","path":"vendor/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/styles.css","path":"vendor/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/main.js","path":"vendor/scrollLoading/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/jquery.scrollLoading.js","path":"vendor/scrollLoading/jquery.scrollLoading.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/style.css","path":"vendor/scrollLoading/style.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/fancybox_buttons.png","path":"vendor/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-media.js","path":"vendor/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader@2x.gif","path":"vendor/scrollLoading/images/preloader@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader.gif","path":"vendor/scrollLoading/images/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/jquery/2.0.3/jquery.min.js","path":"vendor/jquery/2.0.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a62ab0f6c01693ac5a84c299b672d232589887bb","modified":1473299758000},{"_id":"source/CNAME","hash":"704f5291fe9f9f9d297c839806479c17e209a2d7","modified":1464921534000},{"_id":"themes/hueman/.DS_Store","hash":"a1d3554135e8e06ee72f9ce58359df58280c5bae","modified":1467273799000},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1455845553000},{"_id":"themes/hueman/README.md","hash":"19244590bc775eba6566007a436b06d7ace8e42b","modified":1455845553000},{"_id":"themes/hueman/_config.yml","hash":"7439c5a98244d3c6b54841234ddb651559c9314d","modified":1467273799000},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1455845553000},{"_id":"themes/hueman/_config.yml.example","hash":"8e07118ad9a76d8e778373bbe963be9e99476249","modified":1455845553000},{"_id":"themes/hueman/package.json","hash":"13dcc13c13e0347515f7f92292ac0e1a824413cd","modified":1455845553000},{"_id":"source/_posts/.DS_Store","hash":"dddac8e7d7961bbd5d7372e3813d81b127aa4848","modified":1473299758000},{"_id":"source/_posts/春天花会开.md","hash":"ef48ea849017084cde1c927b67a625edcfac1f8b","modified":1455889188000},{"_id":"source/about/index.md","hash":"75cbc514dd78b7419574eefa17b1a3d7b1766760","modified":1455872322000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1456110557000},{"_id":"themes/hueman/.git/COMMIT_EDITMSG","hash":"4669b0e7ad2c1be1287229311836c0f306696ba8","modified":1455933663000},{"_id":"themes/hueman/.git/FETCH_HEAD","hash":"baf9fdc04cde8fc0ab5fd0cd388b02fab622a7d6","modified":1455845849000},{"_id":"themes/hueman/.git/HEAD","hash":"63aa444c83e593b82c6c520d7017d1650250554a","modified":1455869955000},{"_id":"themes/hueman/.git/ORIG_HEAD","hash":"fa20e3e7e862c0d48266949a09842e39bbe635e6","modified":1455845849000},{"_id":"themes/hueman/.git/config","hash":"e1edb40c9185c45aaf038ac93a73733bcb556c48","modified":1455845553000},{"_id":"themes/hueman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1455845526000},{"_id":"themes/hueman/.git/index","hash":"a8dcc058d30c14f580912aa0b196f331d180b41d","modified":1455933663000},{"_id":"themes/hueman/.git/packed-refs","hash":"4d842d0f5ea4e8594bb6d5c12fe4736c88d6e4c2","modified":1455845553000},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"db4ec5d979e663d7fa239be332ef634b6bbd1a2b","modified":1455845553000},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1455845553000},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1455845553000},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1455845553000},{"_id":"themes/hueman/layout/layout.ejs","hash":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1455845553000},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1455845553000},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1455845553000},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1455845553000},{"_id":"themes/hueman/scripts/fancybox.js","hash":"c1b01a9c2d96474cdd7e09657e522e4a03579413","modified":1455845553000},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1455845553000},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1455845553000},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"8bd30b7e9294c11f0364dd1e840684aa961b736f","modified":1455845553000},{"_id":"themes/hueman/languages/es.yml","hash":"475ee0c8bc6935d94ef7081ab044cab85e4c75f8","modified":1455871957000},{"_id":"themes/hueman/languages/en.yml","hash":"7cdf2693e05bf7bc70030453bbd7e679e4fc6264","modified":1455871957000},{"_id":"themes/hueman/languages/fr.yml","hash":"85bbe883d8929f0282fb2e851e88bf92dd6fade7","modified":1455871957000},{"_id":"themes/hueman/languages/id.yml","hash":"96e63f0e9c37203991d6695320a514c96088d3d8","modified":1455871957000},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"1ee9843e3f9b6767c3a48a9343234e81e0b632f9","modified":1455871957000},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"22b19f1ca04c28e81f2406061050f5b8c9ad854b","modified":1455872054000},{"_id":"themes/hueman/languages/ru.yml","hash":"a795dffebd9a74bc0692058a172d9327cd6bdfba","modified":1455871957000},{"_id":"themes/hueman/source/.DS_Store","hash":"3037d5331d92d3f549f33102664cadfff9459707","modified":1467272263000},{"_id":"themes/hueman/source/favicon.ico","hash":"a5c41d966e5eef597a50b91f0b6a9bdf8ac80583","modified":1455933380000},{"_id":"source/_posts/hystrix/Hystrix参数详解.md","hash":"f0a79b618f97690cf20bfb4719d570baa236d276","modified":1458564347000},{"_id":"source/_posts/hystrix/.DS_Store","hash":"f9b6497e91a13896b90b89dd7549838a791a5a17","modified":1467603017000},{"_id":"source/_posts/hystrix/Hystrix简介.md","hash":"123c8b30be57d733d4c5b6e49d2483cf6929cc84","modified":1458564360000},{"_id":"source/_posts/hystrix/Hystrix降级模式总结.md","hash":"ff4ba6b939c0c07cb32da615766ef95e69d0519a","modified":1467602608000},{"_id":"source/_posts/hystrix/Hystrix是怎样工作的.md.todo","hash":"e73b5c93871b17e3ece23e6322974ed24af5391a","modified":1458564505000},{"_id":"source/_posts/music/Matthew-Lien-Bleeding-Wolves.md","hash":"176287eb31802776c2d1202d8148d0c2ee944e13","modified":1457525700000},{"_id":"source/_posts/微服务/微服务之微.md","hash":"bd82a63ac382c2fd19a141f11dfe22de81f272f7","modified":1467604518000},{"_id":"source/_posts/hystrix/怎样使用Hystrix.md.todo","hash":"ef9297f3d8bc5c7082aff82e2355a1cc906a5aae","modified":1458181320000},{"_id":"source/_posts/技术/.DS_Store","hash":"6a9f941481a966f9e939ba0d57cecaf1a09852a9","modified":1467604545000},{"_id":"source/_posts/技术/负载均衡之加权轮询算法.md","hash":"d74fad2aa76b797d93ca31668f5c2897bb826df6","modified":1467603033000},{"_id":"source/_posts/技术/软件开发中的单一职责.md","hash":"f9bf87818cfbd64d8e92b57aafc146a5f7b0aa25","modified":1467604303000},{"_id":"source/_posts/转载/.DS_Store","hash":"10a5f5e23ea5263475686bb72ec99254d8d3997d","modified":1456111275000},{"_id":"themes/hueman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1455845526000},{"_id":"source/images/185638fo3y9el8ie2ohese.jpg","hash":"4d278765113277adc24d16fda2004d179911d5bc","modified":1443687700000},{"_id":"themes/hueman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1455845526000},{"_id":"themes/hueman/.git/logs/HEAD","hash":"0c33bc1722db301307556617df84927d9ca2be4d","modified":1455933663000},{"_id":"themes/hueman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1455845526000},{"_id":"themes/hueman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1455845526000},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"13d2b93435398dc29a968f93326fbd18d4b28d8c","modified":1455845553000},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1455845553000},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1455845553000},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"d45635e78a3fc40e424a401e983f2c8eef6ebcfd","modified":1455845553000},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1455845553000},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1455845553000},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"43288ebc0ea30d80e6d7df56f2e7ed5d7935ed1a","modified":1455845553000},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1455845553000},{"_id":"themes/hueman/layout/common/article.ejs","hash":"c30804f0b167053f731ad2a3429ddac603b1ac48","modified":1455845553000},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"8e4f5a1b69a29cf0a896376d99c464743cddda7b","modified":1455862108000},{"_id":"themes/hueman/layout/common/head.ejs","hash":"4934318fea3ef94f0aef73f32ae3538351599be3","modified":1455932920000},{"_id":"themes/hueman/layout/common/header.ejs","hash":"02d75ac6b559de2414a2927988a133d6007dc243","modified":1455889250000},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1455845553000},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"745666ee78b714aa34d8774a005a0598261ec349","modified":1455845553000},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"a49ffb76c1897e5a60cee70e65c765d212dce500","modified":1455845553000},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"3ee280d4847f2cde7d450e298f917b10b9c5d507","modified":1455845553000},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1455845553000},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1455845553000},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"45f11b8bc3c1ddbe907cf5b8b36488e6c0ee15b3","modified":1455845553000},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1455845553000},{"_id":"themes/hueman/layout/search/index.ejs","hash":"8057338370fbda31dc9f21ec99fb91fcbab9d5c7","modified":1455845553000},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1455845553000},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1455845553000},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1455845553000},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1455845553000},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1455845553000},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1455845553000},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1455845553000},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1455845553000},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1455845553000},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1455845553000},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1455845553000},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1455845553000},{"_id":"themes/hueman/source/css/.DS_Store","hash":"442f01f823b61600451f05bc7585cd1d023b03bb","modified":1467272268000},{"_id":"themes/hueman/source/css/_extend.styl","hash":"2860d503b68ae81ea7675c82c6e63873e0c9e761","modified":1455845553000},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1455845553000},{"_id":"themes/hueman/source/css/_retina.styl","hash":"6849940ab43a9bdd83db1fde8e1e7ba6897f9016","modified":1455845553000},{"_id":"themes/hueman/source/css/_variables.styl","hash":"8799b5e8a3d706a344c6819a274cb9022628c6c4","modified":1455845553000},{"_id":"themes/hueman/source/css/style.styl","hash":"de67ea150743e1f93e10a533711da8995dd0a5c3","modified":1455863813000},{"_id":"themes/hueman/source/js/main.js","hash":"5027fe5ba72a88d5f16a7feba312574ad50556b5","modified":1455845553000},{"_id":"source/_posts/hystrix/images/.DS_Store","hash":"d3ed620ce95c9987592040ac15a4fd1e2ed1bdf0","modified":1457526565000},{"_id":"source/_posts/hystrix/images/circuit-identity-jitter.png","hash":"821d85ffcd3d26c7a887e1e44134c679314efe8e","modified":1453268970000},{"_id":"source/_posts/hystrix/images/circuit-identity-jitter-640.png","hash":"135da3a23c10948de618849d6494b0dfc433f2c6","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-direct-vs-turbine-640.png","hash":"276a9423acbda0686cd8b5a145d50bf8970fca77","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-example-open-circuit-640.png","hash":"fd81fc8bcd35391f9121907ce45efcdcda3a385d","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-640.png","hash":"c0d6c9bf527dde8fa08355e05b38b8b95f8c0f6b","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-original.png","hash":"3e32d8498d66d1dab0d8b4fcb9f5637536bba2b2","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-via-command-640.png","hash":"b126e4a3c058c320fc7d5bbcabef89650e3af2bc","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-single-row-640.png","hash":"27f4fb06ec60fdb17245c209be28b229155939ab","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-small.png","hash":"56efa7fcc51b9e83f4349411926d31fd699a0a5b","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-640.png","hash":"bf8298330f1dab68b6be738af506ced4d471f208","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-tiny.png","hash":"91a5f1685da6faa6339257f58757af739c70df9c","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tiny.png","hash":"230ea59eacd045eef9bb24a8276c2090bd6e49b3","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-return-flow-640.png","hash":"38897b0a0f3c0f233db9f064767436196fe2ef6d","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo.png","hash":"d1f1e2250adab47330eea7b7bbc8827dce70635b","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-return-flow.png","hash":"2c5d2ec83b730f679092013e8085a1032673adeb","modified":1453268970000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-without-640.png","hash":"3115e27c225110d3020606793c97e1e4fe7d2775","modified":1453268970000},{"_id":"source/_posts/hystrix/images/primary-secondary-example-640.png","hash":"6ba522ed88c63b18c7fbbdcc669aaa4c12233a02","modified":1453268970000},{"_id":"source/_posts/hystrix/images/rolling-stats-640.png","hash":"e981ebefb95332bf421c4e3460f1aae610559ece","modified":1453268971000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-640.png","hash":"25febf95dd29b3e29356e9079b3caf1175a3e5ce","modified":1453268971000},{"_id":"source/_posts/hystrix/images/transitive-commands-640.png","hash":"4b9a9f10096913db1a6b825cd747c4b94997e0b4","modified":1453268971000},{"_id":"source/_posts/技术/FlatBuffers/FlatBuffers使用指南.md","hash":"1e449739cb72cf1721461a9707d27f5c424c1c6b","modified":1455889337000},{"_id":"source/_posts/技术/FlatBuffers/FlatBuffers简介.md","hash":"26ff079b5809dd67ba1cb07f8fffa16820a51bbd","modified":1455890891000},{"_id":"source/_posts/hystrix/images/transitive-commands.png","hash":"b8cd5957414b9740676c562dd935c335bec5b1b5","modified":1453268971000},{"_id":"source/_posts/技术/工具/wrk基准测试工具安装使用.md","hash":"bcd0db7bd156b9036f7e34cf9d3f7caaebd02d34","modified":1467604577000},{"_id":"source/_posts/技术/Hexo/Hexo命令速记.md","hash":"957bd92c5466c58b049b139bc86d34e5e2e70e2c","modified":1467604394000},{"_id":"source/_posts/技术/领域模型/领域模型的价值.md","hash":"559ff74a1c99e776f64cae80e823057b11b77d39","modified":1456070226000},{"_id":"source/_posts/技术/领域模型/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1457053796000},{"_id":"source/_posts/转载/http2.0/装载：HTTP2-0的奇妙日常.md","hash":"9b597fa6a433bdf287bbae9c50679bda3dd270b7","modified":1456190912000},{"_id":"themes/hueman/.git/objects/00/ea7ced8ffd028e39718565bcb6dbcd95030983","hash":"6c321fcb3d5ca65cd7812fc850fbd218582b960c","modified":1455933663000},{"_id":"themes/hueman/.git/objects/28/6114e3ddff291e2c0a2e1ce94bb266b7f1e42e","hash":"4a8aa703136a0a4a94cea4a52ae26442aec0b788","modified":1455891082000},{"_id":"themes/hueman/.git/objects/09/1b738262e595a6d93b24d852ddaca2b884157f","hash":"1297efb752ce0473d8ab5d9b068bf7aeb4c63ee6","modified":1455868563000},{"_id":"themes/hueman/.git/objects/37/622cb11f6e867bd801c4f343e65a8fb15a996b","hash":"3a52b720b219cb04542f3d42a7be69971bc52801","modified":1455891082000},{"_id":"themes/hueman/.git/objects/42/766e8223148450a423a316f6d8fe610183d6ac","hash":"dbdc536feff6a0742aab8f1547ccf8f10c650c0b","modified":1455891082000},{"_id":"themes/hueman/.git/objects/42/754cc924c140e1d2334cb0f15d3e5f907b3528","hash":"b2ffeccff10e1a2413407051f7f53053a5deb53d","modified":1455891082000},{"_id":"themes/hueman/.git/objects/44/03ce175ac09a0dd215f6a2a7edf281fc2b5bc9","hash":"ca4f1521a39d4c496edbc53a519af93b17f92733","modified":1455933663000},{"_id":"themes/hueman/.git/objects/3f/6985167d605150935c4d64739aad8463b09d55","hash":"ae911d77c73c71e1a7c1bfa35f760a8223680227","modified":1455933663000},{"_id":"themes/hueman/.git/objects/46/6b674faf5c339b69a5a92c67af927a61f0a60c","hash":"5ca5c1eded742304b130c1be7f40f97090fe3333","modified":1455933663000},{"_id":"themes/hueman/.git/objects/24/62853892108047d8169ac4896338e35b1d9028","hash":"40da7e009d1cb960b13bb4bd7e0e05d260b815b9","modified":1455891082000},{"_id":"themes/hueman/.git/objects/49/ac89fdf9a5a94903a6199fe0e424e9d756c4a4","hash":"7e4ca3d7a9faa5d8d468dcc0e601579668dbbd59","modified":1455933663000},{"_id":"themes/hueman/.git/objects/59/76a6ae788eb5bddf533daa50ba07a4295d65a8","hash":"b4e35f2f59265b6f4a720d046031fee4b1766cb8","modified":1455868563000},{"_id":"themes/hueman/.git/objects/5f/2341c8635688d09a4eb81fa43ddaf93e18aced","hash":"10acdb29aa5b811ff798d44f207a6e5dc23b6142","modified":1455868563000},{"_id":"themes/hueman/.git/objects/71/457eac34aa084e4a7a9c2628c6a5b648864621","hash":"20435e736dee7905803a519ea50d7228c8fa92dc","modified":1455933663000},{"_id":"themes/hueman/.git/objects/80/90aaae3b11a12ef36df9e9aec5bb7296f224dd","hash":"e66e043caedfbfec6575f0f93dfedcde18bc5e6b","modified":1455891082000},{"_id":"themes/hueman/.git/objects/89/5c37b48a797023a9a460ceaf62974137dcd89a","hash":"9334eefe151c864705859ea42ae01df16d292a48","modified":1455868563000},{"_id":"themes/hueman/.git/objects/95/16647f60a349c0bf3d478f9ee0ed9ba296be07","hash":"6abb229a814c36f261442bd37b4dba91937007f0","modified":1455891082000},{"_id":"themes/hueman/.git/objects/97/01c3818d9df1639962c0a8418febbd81777b68","hash":"44b87bd6b79c4f94e96f174c578280d0c1475885","modified":1455933663000},{"_id":"themes/hueman/.git/objects/8e/3f1a845dad43288b1579dcc0a0c1d7e32ad647","hash":"404a627fe6aed11433168485f215fa4c8cb264b8","modified":1455868563000},{"_id":"themes/hueman/.git/objects/98/56e4d0dc4f9d8a3f7fd817b6abc59ac660bd95","hash":"8603f9b0f6c2a39751ae2f1ba84c90604a55ea93","modified":1455933663000},{"_id":"themes/hueman/.git/objects/9c/a7f9f2e2a0012c5bd88562610383d3f2d8851e","hash":"9fa5de1dddfb58959eb2ea5fbb06eabef6184022","modified":1455891082000},{"_id":"themes/hueman/.git/objects/a3/c16361204bf0192427497720e6461f66f788a8","hash":"da49129809c5759c2078347e4f487047053fc6d4","modified":1455933663000},{"_id":"themes/hueman/.git/objects/9d/e9c6f878358462e6656b8043521d1905f363b5","hash":"0cc60f1e99b9ca0bca74fe1ba67667b5291eafa3","modified":1455868563000},{"_id":"themes/hueman/.git/objects/a6/6a02ddc2fbf26708b7e4476fcc29f33f8f1c5e","hash":"ce1756f388709fd35e88b06409f0936c076da11e","modified":1455891082000},{"_id":"themes/hueman/.git/objects/aa/658b7480e1e572a5077d00190757914012648d","hash":"76054d1fb58c7ea3f64efe67baba4981dbcf8666","modified":1455891082000},{"_id":"themes/hueman/.git/objects/ae/e0416277d57ebf1622f366f9fbefb1076240c9","hash":"a7af6162958ce305be9b50760a564144fc1332fe","modified":1455868563000},{"_id":"themes/hueman/.git/objects/af/066201af6037164a8b750b94f04316a2341f3b","hash":"b6bf1992138b0afb188a14c807a44f1da078df68","modified":1455933663000},{"_id":"themes/hueman/.git/objects/b3/e21708088d53a34dcd9f36984393bfdd1577fe","hash":"27479cb13126d625c6f8e0cfb20876fdfa1eb5da","modified":1455891082000},{"_id":"themes/hueman/.git/objects/de/5af1831fb43c839d08c193224be1bb9b9d221c","hash":"1da3b498b69294f6bd447e95d168b2374c4b0246","modified":1455868563000},{"_id":"themes/hueman/.git/objects/f3/b4cc5fdd6e5d730b656a10242d7f24906cc3e0","hash":"e9cbe01921dc3a4cd4b52c78613d3d74901ee145","modified":1455891082000},{"_id":"themes/hueman/.git/objects/cf/b85bf3eb402c26219f01960097c8cddca57540","hash":"e8c76e43b84d826a152b395120343175fabd1e93","modified":1455891082000},{"_id":"themes/hueman/.git/objects/pack/pack-f4fb5b25f0ca9450ac36f4e3193757f049b09475.idx","hash":"f27dc1d08a719e2c23cce5e776608afe8aea3dae","modified":1455845553000},{"_id":"themes/hueman/.git/refs/heads/_post","hash":"7ca729efe0bedc4627fc361ae6a3b21b2f0ea7d8","modified":1455933663000},{"_id":"themes/hueman/.git/refs/heads/master","hash":"5b2b8086583e919cdce585b34a7867a85be4d414","modified":1455868563000},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1455845553000},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"2d090d33cbd23129d63a0ba768a03d717399d9c5","modified":1455845553000},{"_id":"themes/hueman/layout/common/post/category.ejs","hash":"f47522c059d3b4d721ce501203c05f94a285c0b5","modified":1455845553000},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1455845553000},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"a364204d7152adf6c7522b6568990437e8308d1f","modified":1455845553000},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1455845553000},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1455845553000},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1455845553000},{"_id":"themes/hueman/source/css/images/.DS_Store","hash":"03277924b60406fa5960a5163c303c0b5a52e573","modified":1467272268000},{"_id":"themes/hueman/source/vendor/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455845553000},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1455845553000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"5b05389db22550ffe09005e122d779fa350c387e","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.js","hash":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.pack.js","hash":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"63f6191dcb4f3d2127cd6789f99664f0d10dc031","modified":1455863889000},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"11e32468f993133e5d2bfe4f4efc68240746f8c6","modified":1455845553000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"1e6255f1bfa1a820f70d5cfdadf2caa726bf853d","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"a7c35f55255d2455eb7274dbc7ad9dd263899297","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1455845553000},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1455845553000},{"_id":"themes/hueman/source/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1455845553000},{"_id":"source/_posts/hystrix/images/circuit-breaker-640.png","hash":"6dee7062440ac53277ef97e0bd8000e4c19b90d9","modified":1453268970000},{"_id":"source/_posts/hystrix/images/collapser-640.png","hash":"c27ac262add50eff2d2ff300b15d21b253929304","modified":1453268970000},{"_id":"source/_posts/hystrix/images/collapser-flow-640.png","hash":"28aa4117d38673c44dd0ec4a83b3869f07de1d4c","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-annoted-circuit-640.png","hash":"948e548cfef1deb9129b8ea82afef27b4cf94cc2","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-direct-vs-turbine.png","hash":"11d22278b6ce5c8f5d0dec564dde0c3a827a8571","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-via-command-original.png","hash":"f179625e7510541b61cec9b8c326ed6ec1c79dea","modified":1453268970000},{"_id":"source/_posts/hystrix/images/fallback-via-command-1280.png","hash":"a9b7e695a88ec66e5dba042d4ed824084ad6c260","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-command-flow-chart-640.png","hash":"111a6f17a4fc132dff069c60b797548d971cc0ea","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-command-flow-chart.png","hash":"530633edb85557bbb6a6f31b384bf7f2f95daa3a","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-620.png","hash":"d837ef2bd778ec1eb56513ee4e699fecca41e7e8","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-single-row.png","hash":"ad2f050bc1aebab2c9e66881d648e92b1ec41f6a","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-850.png","hash":"684300d9ef43d50c89c065e276871b7bef6199ac","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-github-516.png","hash":"10e663fb2e3d839f8f875a92fc9a10dee1d71c50","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-640.png","hash":"209ea2caa9bd43006ce8f3bd11f2e228408153e9","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline-github-640.png","hash":"6542fb3862bada2a3e9f5f56846519f2dac9c0b8","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline.png","hash":"c3e6a33e0b0ceeb8c1218632415aacdd98d1a3fa","modified":1453268970000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-640.png","hash":"9eb820ba5ffd5e1e34f1ab1767b838327ed8a1d0","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-logo-tagline.graffle","hash":"dc1b74c04d0c9a83943dede41f11f7702b0558db","modified":1453268970000},{"_id":"source/_posts/hystrix/images/isolation-options-640.png","hash":"066719d23b378aa011dbc03e95cbe1e50741b8eb","modified":1453268970000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-with-640.png","hash":"810b1ddffb9b7f0327df0997ecebe562f293cf41","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-cinematch-1.png","hash":"8f2650b8712a0289f8233dd9043b618eaba562dc","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-cinematch-1-640.png","hash":"709e7ffcdc9fcba221ef91c48cb4ecca21115781","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-getbookmarks-640.png","hash":"11d87be552894886f8968db273a04004f8b85161","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-cache-640.png","hash":"3432e75e505598e0875a10940fa6ef925577ca4c","modified":1453268970000},{"_id":"source/_posts/hystrix/images/rolling-stats-1280.png","hash":"5e299504ba402de113568f3a7d2207a51691af0b","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-1-640.png","hash":"0264dedf3fd4ec05ad4321151fb06728b3eb05a3","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-2-640.png","hash":"487f186ee27f9afaee04ea501770da21f9aebfa4","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-640.png","hash":"4f40ed3361f652c019d9a56b4e3f990f5211b26c","modified":1453268971000},{"_id":"source/_posts/hystrix/images/thread-configuration-640.png","hash":"31fbb49d3d5525c0caf503103d56690f727ff318","modified":1453268971000},{"_id":"source/_posts/hystrix/images/thread-cost-60rps-640.png","hash":"3171b32cade8738593d21973588925be59fd9302","modified":1453268971000},{"_id":"source/_posts/hystrix/images/cascading-failure-preventing-640.png","hash":"a4faa2c09103e7b1f0ead2374b594716f979d9be","modified":1453268970000},{"_id":"source/_posts/hystrix/images/circuit-breaker-1280.png","hash":"c730869b2cd9bf96aa644c0a28870cb5ec7a125e","modified":1453268970000},{"_id":"source/_posts/hystrix/images/collapser-1280.png","hash":"e23cb36f2076c908f91cd188217a610fff1ddd41","modified":1453268970000},{"_id":"source/_posts/hystrix/images/collapser-flow-1280.png","hash":"e26a49f1d866e0995f02e11a8c70925887ea32e8","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-example-640.png","hash":"7dae892ac61dae2d3c60963deb7479f313abdda5","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-home-640.png","hash":"713063d28059ed57a743abe8bb330d302deaddd3","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-home.png","hash":"f34a8bf0d7a2b0be57bfb44c4a4265428a34c66f","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example.png","hash":"cec68ca6e16e2b89b78da6c2eaea946059bbf300","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-1280.png","hash":"022ba7d91a876f0be5d918b866c544b4f3c72e9f","modified":1453268970000},{"_id":"source/_posts/hystrix/images/isolation-options-1280.png","hash":"c11e4b8c8e78deae78046d46b8e2b33de5a588b6","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-cinematch-2-640.png","hash":"04c5820fa5721ccb454a30e677db907d203a7cb7","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-ab.png","hash":"687b75e3b21cc0f2761537dd15ca52680b090a8f","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-cinematch-2.png","hash":"ad39f8d08e97b7ca5874edd5abea5fe8a35e4d93","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-complete-system.png","hash":"4b2fbdbb8884a21fc3d4ad9bd6be15f31d4e9208","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-social-640.png","hash":"e7524c836025c9c0eeb749fa681cca5c89408cfe","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-social-original.png","hash":"7ab759016de29869e840746869ae05559a39e303","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-cache-1280.png","hash":"97e236f01a0e7a7028fab6010341259924915194","modified":1453268970000},{"_id":"source/_posts/hystrix/images/primary-secondary-example-original.png","hash":"75ba5408cb5d0d31dc30341971efb5f2d05efea3","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-1280.png","hash":"783113c029aafd7449a17c155592289a9f772ac8","modified":1453268971000},{"_id":"source/_posts/hystrix/images/rolling-stats-original.png","hash":"c6c56a4733950803b2bccdfb867b73200847f2af","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-3-640.png","hash":"6416dfb879bc3cac0c173fc68c71a4867c567da2","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-640.png","hash":"e87a1deb0ee48cc3643f4a72fd6474467040dd5c","modified":1453268971000},{"_id":"themes/hueman/.git/logs/refs/heads/_post","hash":"6d687384117358670bc006eeb784eb1364967cd9","modified":1455933663000},{"_id":"source/_posts/hystrix/images/thread-cost-60rps-original.png","hash":"f9ca0bfe40510d95aaaf707798e4f025da999b1b","modified":1453268971000},{"_id":"themes/hueman/.git/logs/refs/heads/master","hash":"27782b16d2374b315157fa1e297aed4a909946e8","modified":1455868563000},{"_id":"themes/hueman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1455845553000},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1455845553000},{"_id":"themes/hueman/source/vendor/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1455845553000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1455845553000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455845553000},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455845553000},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1455845553000},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1455845553000},{"_id":"source/_posts/hystrix/images/collapser-flow-original.png","hash":"69d9b785e6ce1ae5584ee19dedcc2e9765bab8b1","modified":1453268970000},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1455845553000},{"_id":"source/_posts/hystrix/images/dashboard-annoted-circuit-original.png","hash":"a25faa48260b30e92b1f9270d3fa11e9fc699db4","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-iPad-620.png","hash":"e5ae3b5cfe3babd8c31334a663698cb9bfa8e48a","modified":1453268970000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-1280.png","hash":"03bc1c86572a73e334aac14e162fab6b93384e71","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-ab-640.png","hash":"ec29160251d9c10722c7d87e80b8cd7c8e469fec","modified":1453268970000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1455845553000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1455845553000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1455845553000},{"_id":"themes/hueman/source/vendor/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1455845553000},{"_id":"source/_posts/hystrix/images/ops-complete-system-640.png","hash":"47120ad690a834db225a8499caf8f19820ccb7ac","modified":1453268970000},{"_id":"source/_posts/hystrix/images/ops-getbookmarks.png","hash":"8596fc651f6182f54f85eefdc53cbaa2f52e54e0","modified":1453268970000},{"_id":"source/_posts/hystrix/images/request-cache-original.png","hash":"8435b5f070043655685148d3cd842a2edb70119e","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-1-1280.png","hash":"a7c73f21630a232dbeea1e7d71123704af683f5f","modified":1453268971000},{"_id":"source/_posts/hystrix/images/request-example-with-latency-original.png","hash":"6430ac913484ef09e80c7b8d21f94b9785cc353f","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-2-1280.png","hash":"6e602eb59079308e64c8bfe58807a728526b8e80","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-1280.png","hash":"d366f2671c80c18c1a0c8510adab3df40f594b37","modified":1453268971000},{"_id":"source/_posts/hystrix/images/thread-configuration-1280.png","hash":"a5b25580b21f8fe5bc1796ff563ec61ad769819c","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-5-isolation-focused-original.png","hash":"2525840274b1d46cfd8f68b694c0613c26225236","modified":1453268971000},{"_id":"themes/hueman/.git/logs/refs/remotes/origin/HEAD","hash":"25ae1b00acf833780d1d44995499ca6513e4f456","modified":1455845553000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1455845553000},{"_id":"source/_posts/hystrix/images/collapser-original.png","hash":"81fb51310999305b23285a99fac7d7836d4c3fd1","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-examples-webapp-home.png","hash":"10f9df7ad08a1080f97b700793e1edcb08417e81","modified":1453268970000},{"_id":"source/_posts/hystrix/images/isolation-options-original.png","hash":"0a3f5da5335e00dbbf329ddf2fd3394d4f568879","modified":1453268970000},{"_id":"source/_posts/hystrix/images/soa-3-1280.png","hash":"148452655f23b98891f10564cc53f5aca81cbbec","modified":1453268971000},{"_id":"source/_posts/hystrix/images/thread-configuration-original.png","hash":"1efac02e91756f059dcaf8bc6ff40ac46c6aa1ed","modified":1453268971000},{"_id":"source/_posts/hystrix/images/cascading-failure-preventing.png","hash":"7e08eb521c9856451681b25d18c056f889881684","modified":1453268970000},{"_id":"source/_posts/hystrix/images/circuit-breaker-original.png","hash":"aa93fa77ab6a206152a048d204964653dd73283d","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-example-1280.png","hash":"df18fe4eddd84e68416eb74c7697215dd6b0c827","modified":1453268970000},{"_id":"source/_posts/hystrix/images/dashboard-example-original.png","hash":"81ebad4a1aeba9b466d95c27505ac2dc0aa58903","modified":1453268970000},{"_id":"source/_posts/hystrix/images/hystrix-flow-chart-original.png","hash":"4577f01394b1605bcf9ff53157b494e51054bce7","modified":1453268970000},{"_id":"source/_posts/hystrix/images/soa-1-original.png","hash":"3ce4b0a11c2271fa92dc94cde82573afcbebc6b0","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-2-original.png","hash":"6747720006edb6770a28811c75c15f1b774fa87f","modified":1453268971000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-1280.png","hash":"facf44be2c0fe54d059c8553f27342d7bfb4cfdd","modified":1453268971000},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1455845553000},{"_id":"source/_posts/hystrix/images/hystrix-dashboard-netflix-api-example-iPad.png","hash":"33ddd07a4e65cc74edaf54913d71484e5c39f7d4","modified":1453268970000},{"_id":"source/_posts/hystrix/images/soa-3-original.png","hash":"046b841b7cb92583624480f513585b7d146ef5b1","modified":1453268971000},{"_id":"source/_posts/hystrix/images/library-migration-to-hystrix-original.png","hash":"426aa98175e52d516f470a6a34919a393b02a163","modified":1453268970000},{"_id":"source/_posts/hystrix/images/soa-4-isolation-original.png","hash":"68a394f28663ae3196ed23e4df7c1f377785d97e","modified":1453268971000},{"_id":"source/_posts/hystrix/images/hystrix.graffle","hash":"19ffa1864138388e506d53bb8d8eefa21f07c09f","modified":1453268970000},{"_id":"themes/hueman/.git/objects/pack/pack-f4fb5b25f0ca9450ac36f4e3193757f049b09475.pack","hash":"0fbf67d49c66761b8c06ec5b01b81adf610973ab","modified":1455933663000},{"_id":"public/about/index.html","hash":"54f06c9cab5fad553de765ea78b84935fc5aeb95","modified":1473646401628},{"_id":"public/2016/06/28/技术/软件开发中的单一职责/index.html","hash":"f5a853ccc0b694db3a5d89c12e6614e4240e2734","modified":1473646401632},{"_id":"public/2016/06/16/技术/负载均衡之加权轮询算法/index.html","hash":"4b95e2bab57628c658da1d324bacec7242219c6b","modified":1473646401632},{"_id":"public/2016/06/02/微服务/微服务之微/index.html","hash":"1342c0481c41defc971bf58b4e544dfc16dc3931","modified":1473646401632},{"_id":"public/2016/03/09/hystrix/Hystrix降级模式总结/index.html","hash":"86c158b85ae4df00f2061994e611ade26fc27acf","modified":1473646401632},{"_id":"public/2016/03/09/hystrix/Hystrix简介/index.html","hash":"ba48281dda171f7b46b9a04b4483b2a9d96fe581","modified":1473646401632},{"_id":"public/2016/03/04/技术/工具/wrk基准测试工具安装使用/index.html","hash":"8f787851ad6dde70e0832e6c9d849bd82ffafef5","modified":1473646401634},{"_id":"public/2016/02/25/hystrix/Hystrix参数详解/index.html","hash":"bf377b2aacc376f495fe012bcfdcf1c0c5b179a0","modified":1473646401632},{"_id":"public/2016/02/22/music/Matthew-Lien-Bleeding-Wolves/index.html","hash":"95190bfe6a6f68763eb0856debda1732504a97bb","modified":1473646401634},{"_id":"public/2016/02/22/转载/http2.0/装载：HTTP2-0的奇妙日常/index.html","hash":"8220cbe6356378c770bdc32188042c8240481ffa","modified":1473646401634},{"_id":"public/2016/02/21/技术/Hexo/Hexo命令速记/index.html","hash":"b55d12e3e3c672bca9a4136676fca82afb64e2db","modified":1473646401634},{"_id":"public/2016/02/21/技术/领域模型/领域模型的价值/index.html","hash":"979dae815cbc65c5115518039da9d311f11b6267","modified":1473646401634},{"_id":"public/2016/02/19/技术/FlatBuffers/FlatBuffers使用指南/index.html","hash":"b14ebd902433e0d3e9b24cb546b3890cbbe87655","modified":1473646401635},{"_id":"public/2016/02/19/技术/FlatBuffers/FlatBuffers简介/index.html","hash":"e2191d0e6a8de6aff7719178216b04e5d4b1c733","modified":1473646401634},{"_id":"public/2016/02/19/春天花会开/index.html","hash":"85117cd634ab0000bccc274dab87536ff2617f04","modified":1473646401635},{"_id":"public/archives/index.html","hash":"745ec500d6048a3da15a16f92245dff78ec59e55","modified":1473646401635},{"_id":"public/archives/page/2/index.html","hash":"91d061aa89c120bed5510fd2e8088658dda9ab9c","modified":1473646401635},{"_id":"public/archives/2016/index.html","hash":"9948e1d4927f8f8498e7bb3c50bef2cb471837d7","modified":1473646401635},{"_id":"public/archives/2016/page/2/index.html","hash":"9348b88fbed617886923f22b0b36c5e34018d1a3","modified":1473646401635},{"_id":"public/archives/2016/02/index.html","hash":"ad00c8c9b97c5a65fa916eca71c4b2932e2bf08e","modified":1473646401635},{"_id":"public/archives/2016/03/index.html","hash":"8d40ea14821000e0f20aea58c59a88252d86cde9","modified":1473646401635},{"_id":"public/archives/2016/06/index.html","hash":"861fa67e7734f2d0db88e23b51314807d19132cf","modified":1473646401636},{"_id":"public/categories/那年今日/index.html","hash":"912b229a16743a78dcf3ae3cba5f7cb415941dcd","modified":1473646401636},{"_id":"public/categories/技术/index.html","hash":"c2c188217ba493de9a53626bcf43bc9f6ce6ca1f","modified":1473646401636},{"_id":"public/categories/music/index.html","hash":"8f55e4860c32c03455c870ff1498f6508ead7dad","modified":1473646401636},{"_id":"public/categories/技术/Hystrix/index.html","hash":"42e50761515d23ee4379be07ba2b4a061bef7c21","modified":1473646401636},{"_id":"public/categories/微服务/index.html","hash":"9de6270b154f4183459384d28a5d8a114c327bfd","modified":1473646401636},{"_id":"public/categories/技术/算法/index.html","hash":"30aac7c4114af3a715f34e857dd2daf4d860d0a6","modified":1473646401636},{"_id":"public/categories/技术/杂谈/index.html","hash":"0ef9118c89cbf2eecab24d5633f212751e9f9494","modified":1473646401637},{"_id":"public/categories/技术/FlatBuffers/index.html","hash":"cc5271de5164e82b5ebf912c731f23a764c52b2b","modified":1473646401637},{"_id":"public/categories/技术/工具/index.html","hash":"aef0a7a05802442621c9de3de2efa03ae31d4ccf","modified":1473646401637},{"_id":"public/categories/技术/Hexo/index.html","hash":"d5d376ccc1ac20ae2185f04c13bd144964cb8fee","modified":1473646401637},{"_id":"public/categories/技术/领域模型/index.html","hash":"8a9f91fdad1e979c360d9b4b612bc74eda34049f","modified":1473646401637},{"_id":"public/categories/转载/index.html","hash":"707b68dd2407fdf2c8f2003742fe4aaff9e25363","modified":1473646401637},{"_id":"public/categories/转载/http-2-0/index.html","hash":"3edade6bc0810aeb2fc93f81babbbd0b5fe74975","modified":1473646401637},{"_id":"public/index.html","hash":"b94034a9b8af897969aa9819d8bb92f04d7b688d","modified":1473646401635},{"_id":"public/page/2/index.html","hash":"3913296b1b5b1008c1928948f8c0735edc6e48a7","modified":1473646401635},{"_id":"public/tags/春天/index.html","hash":"4f43c3d619d0682d1c1bece42287c5f1b65824d7","modified":1473646401639},{"_id":"public/tags/梅花/index.html","hash":"8cadd58f12288bec1afb6b973670acb746925106","modified":1473646401639},{"_id":"public/tags/hystrix/index.html","hash":"70426603aee1eae0226bce571122b6f4574e3a19","modified":1473646401639},{"_id":"public/tags/Circuit-Breaker/index.html","hash":"8606ca8c5ee829a0148158a8fca34acf0932bf2c","modified":1473646401640},{"_id":"public/tags/微服务/index.html","hash":"3c6be008767161eabfe671a4fdff07126a9206a6","modified":1473646401640},{"_id":"public/tags/负载均衡/index.html","hash":"a85a541ceb602f39c8f164fd23c01c045768b338","modified":1473646401640},{"_id":"public/tags/加权轮询/index.html","hash":"29677086356b53830d6b2300a3fd4aee5c78ba36","modified":1473646401640},{"_id":"public/tags/轮询/index.html","hash":"338b3f078f8adfc1506f7d490b91f0f744cf2260","modified":1473646401640},{"_id":"public/tags/算法/index.html","hash":"873562471ccb06bafc66f68d244c3d7547aa8c8c","modified":1473646401641},{"_id":"public/tags/单一职责/index.html","hash":"58f1f21b548df5b80a9587e3d5358fbafddd7a4f","modified":1473646401641},{"_id":"public/tags/软件开发/index.html","hash":"46a8c9b79f5af2e8c8fa82011eb0e82f9ac5924a","modified":1473646401641},{"_id":"public/tags/FlatBuffers/index.html","hash":"bf1ab0f7e4cf5cb509a96bd734c41fe54846f1f5","modified":1473646401641},{"_id":"public/tags/序列化/index.html","hash":"f3c3fd06ab1e5e0b206f2a1f53ac29ca9967f710","modified":1473646401641},{"_id":"public/tags/基准测试/index.html","hash":"964a40a6f33ddc4584cc957d4da2951bfc7ceae6","modified":1473646401641},{"_id":"public/tags/wrk/index.html","hash":"d9d88842efde5272c728b0eb8442d37c9030dc98","modified":1473646401641},{"_id":"public/tags/Hexo/index.html","hash":"41fa8f92bdefc7d43f45be8aa812c42f6edd9e44","modified":1473646401642},{"_id":"public/tags/领域模型/index.html","hash":"7c1c5b92587f53fffd1d3989069bd4dad7db1a35","modified":1473646401642},{"_id":"public/tags/DDD/index.html","hash":"b63b62f40eac699994f9b7235ba6b78ef338bfa3","modified":1473646401642},{"_id":"public/tags/http-2-0/index.html","hash":"486cc6c9a82432c6ad0b0889db743f41fae8c87b","modified":1473646401642},{"_id":"public/favicon.ico","hash":"a5c41d966e5eef597a50b91f0b6a9bdf8ac80583","modified":1473299860911},{"_id":"public/CNAME","hash":"704f5291fe9f9f9d297c839806479c17e209a2d7","modified":1473299860911},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1473299860911},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1473299860911},{"_id":"public/vendor/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473299860911},{"_id":"public/vendor/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473299860911},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1473299860911},{"_id":"public/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1473299860912},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1473299860912},{"_id":"public/vendor/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473299860912},{"_id":"public/vendor/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473299860912},{"_id":"public/vendor/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473299860912},{"_id":"public/vendor/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473299860912},{"_id":"public/vendor/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473299860912},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1473299860912},{"_id":"public/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1473299860912},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1473299860912},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1473299860912},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1473299860912},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1473299860912},{"_id":"public/vendor/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473299860912},{"_id":"public/vendor/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473299860912},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1473299860912},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1473299860913},{"_id":"public/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1473299860913},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1473299861951},{"_id":"public/vendor/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1473299861961},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1473299861961},{"_id":"public/js/main.js","hash":"5027fe5ba72a88d5f16a7feba312574ad50556b5","modified":1473299861978},{"_id":"public/vendor/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1473299861978},{"_id":"public/vendor/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1473299861978},{"_id":"public/vendor/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1473299861978},{"_id":"public/vendor/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1473299861978},{"_id":"public/vendor/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1473299861978},{"_id":"public/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1473299861979},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1473299861979},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1473299861979},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1473299861979},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1473299861979},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1473299861979},{"_id":"public/css/style.css","hash":"95b9aa209e0cfa4ebcf32789d974590fbd15fb00","modified":1473299861980},{"_id":"public/vendor/fancybox/jquery.fancybox.pack.js","hash":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9","modified":1473299861980},{"_id":"public/vendor/fancybox/jquery.fancybox.js","hash":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6","modified":1473299861980},{"_id":"public/vendor/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1473299861980},{"_id":"public/vendor/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1473299861980},{"_id":"public/images/185638fo3y9el8ie2ohese.jpg","hash":"4d278765113277adc24d16fda2004d179911d5bc","modified":1473299861981},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1473299861981},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1473299862077},{"_id":"source/_posts/hystrix/RestTemplate遇上Hystrix.md","hash":"76cc33c6674de7eeccc47d55a9be5a88248003f6","modified":1473301197000},{"_id":"public/2016/09/07/hystrix/RestTemplate遇上Hystrix/index.html","hash":"05d7b385d40715f0366e1d9123b6077a4cecd252","modified":1473300913281},{"_id":"public/archives/2016/09/index.html","hash":"1180ffba15efff7c6eb5da3d1ed049aadb20e29d","modified":1473646401636},{"_id":"public/categories/技术/page/2/index.html","hash":"832f8844fd43494760d167f46e2218f24f3a5aaf","modified":1473646401636},{"_id":"public/2016/09/02/hystrix/RestTemplate遇上Hystrix/index.html","hash":"591ef56f461226a5e3df176a4e8832ab5529d37e","modified":1473646401631},{"_id":"source/_posts/微服务/Feign使用性能优化.md","hash":"108ae5db662fc1298035e7487ffcd597f45634c6","modified":1473646373000},{"_id":"public/2016/03/17/微服务/Feign使用性能优化/index.html","hash":"3f422469ae791d8f8b519020531dbc3c063f1b87","modified":1473414416008},{"_id":"public/categories/技术/微服务/index.html","hash":"e99b9872a060523b0553ac82a847c8088b434bea","modified":1473414435959},{"_id":"public/categories/技术/微服务/Feign/index.html","hash":"df1fdc1634655573ecca27f8e95965881edc2f63","modified":1473414435960},{"_id":"public/tags/Feign/index.html","hash":"cefaa9ed71f2995569418138cabe3572442b0477","modified":1473646401642},{"_id":"public/tags/Spring-Cloud/index.html","hash":"f7ce07657cf7b2129efc17f7ee7fa17ba20e6e77","modified":1473646401642},{"_id":"public/2016/09/06/微服务/Feign使用性能优化/index.html","hash":"0b66a30572aa863e005556ba0ef32eca9c942dc2","modified":1473646401630},{"_id":"public/categories/微服务/Feign/index.html","hash":"c2d24993641d871529367209ec7f712de2fddde7","modified":1473646401647},{"_id":"themes/hueman/x.git/COMMIT_EDITMSG","hash":"4669b0e7ad2c1be1287229311836c0f306696ba8","modified":1455933663000},{"_id":"themes/hueman/x.git/ORIG_HEAD","hash":"fa20e3e7e862c0d48266949a09842e39bbe635e6","modified":1455845849000},{"_id":"themes/hueman/x.git/FETCH_HEAD","hash":"baf9fdc04cde8fc0ab5fd0cd388b02fab622a7d6","modified":1455845849000},{"_id":"themes/hueman/x.git/HEAD","hash":"63aa444c83e593b82c6c520d7017d1650250554a","modified":1455869955000},{"_id":"themes/hueman/x.git/config","hash":"e1edb40c9185c45aaf038ac93a73733bcb556c48","modified":1455845553000},{"_id":"themes/hueman/x.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1455845526000},{"_id":"themes/hueman/x.git/packed-refs","hash":"4d842d0f5ea4e8594bb6d5c12fe4736c88d6e4c2","modified":1455845553000},{"_id":"themes/hueman/x.git/index","hash":"a8dcc058d30c14f580912aa0b196f331d180b41d","modified":1455933663000},{"_id":"themes/hueman/x.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1455845526000},{"_id":"themes/hueman/x.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1455845526000},{"_id":"themes/hueman/x.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1455845526000},{"_id":"themes/hueman/x.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1455845526000},{"_id":"themes/hueman/x.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1455845526000},{"_id":"themes/hueman/x.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1455845526000},{"_id":"themes/hueman/x.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1455845526000},{"_id":"themes/hueman/x.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1455845526000},{"_id":"themes/hueman/x.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1455845526000},{"_id":"themes/hueman/x.git/logs/HEAD","hash":"0c33bc1722db301307556617df84927d9ca2be4d","modified":1455933663000},{"_id":"themes/hueman/x.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1455845526000},{"_id":"themes/hueman/x.git/refs/heads/master","hash":"5b2b8086583e919cdce585b34a7867a85be4d414","modified":1455868563000},{"_id":"themes/hueman/x.git/refs/heads/_post","hash":"7ca729efe0bedc4627fc361ae6a3b21b2f0ea7d8","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/09/1b738262e595a6d93b24d852ddaca2b884157f","hash":"1297efb752ce0473d8ab5d9b068bf7aeb4c63ee6","modified":1455868563000},{"_id":"themes/hueman/x.git/objects/3f/6985167d605150935c4d64739aad8463b09d55","hash":"ae911d77c73c71e1a7c1bfa35f760a8223680227","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/37/622cb11f6e867bd801c4f343e65a8fb15a996b","hash":"3a52b720b219cb04542f3d42a7be69971bc52801","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/28/6114e3ddff291e2c0a2e1ce94bb266b7f1e42e","hash":"4a8aa703136a0a4a94cea4a52ae26442aec0b788","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/42/754cc924c140e1d2334cb0f15d3e5f907b3528","hash":"b2ffeccff10e1a2413407051f7f53053a5deb53d","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/42/766e8223148450a423a316f6d8fe610183d6ac","hash":"dbdc536feff6a0742aab8f1547ccf8f10c650c0b","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/00/ea7ced8ffd028e39718565bcb6dbcd95030983","hash":"6c321fcb3d5ca65cd7812fc850fbd218582b960c","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/5f/2341c8635688d09a4eb81fa43ddaf93e18aced","hash":"10acdb29aa5b811ff798d44f207a6e5dc23b6142","modified":1455868563000},{"_id":"themes/hueman/x.git/objects/46/6b674faf5c339b69a5a92c67af927a61f0a60c","hash":"5ca5c1eded742304b130c1be7f40f97090fe3333","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/89/5c37b48a797023a9a460ceaf62974137dcd89a","hash":"9334eefe151c864705859ea42ae01df16d292a48","modified":1455868563000},{"_id":"themes/hueman/x.git/objects/80/90aaae3b11a12ef36df9e9aec5bb7296f224dd","hash":"e66e043caedfbfec6575f0f93dfedcde18bc5e6b","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/8e/3f1a845dad43288b1579dcc0a0c1d7e32ad647","hash":"404a627fe6aed11433168485f215fa4c8cb264b8","modified":1455868563000},{"_id":"themes/hueman/x.git/objects/71/457eac34aa084e4a7a9c2628c6a5b648864621","hash":"20435e736dee7905803a519ea50d7228c8fa92dc","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/24/62853892108047d8169ac4896338e35b1d9028","hash":"40da7e009d1cb960b13bb4bd7e0e05d260b815b9","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/59/76a6ae788eb5bddf533daa50ba07a4295d65a8","hash":"b4e35f2f59265b6f4a720d046031fee4b1766cb8","modified":1455868563000},{"_id":"themes/hueman/x.git/objects/97/01c3818d9df1639962c0a8418febbd81777b68","hash":"44b87bd6b79c4f94e96f174c578280d0c1475885","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/95/16647f60a349c0bf3d478f9ee0ed9ba296be07","hash":"6abb229a814c36f261442bd37b4dba91937007f0","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/a3/c16361204bf0192427497720e6461f66f788a8","hash":"da49129809c5759c2078347e4f487047053fc6d4","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/a6/6a02ddc2fbf26708b7e4476fcc29f33f8f1c5e","hash":"ce1756f388709fd35e88b06409f0936c076da11e","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/98/56e4d0dc4f9d8a3f7fd817b6abc59ac660bd95","hash":"8603f9b0f6c2a39751ae2f1ba84c90604a55ea93","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/49/ac89fdf9a5a94903a6199fe0e424e9d756c4a4","hash":"7e4ca3d7a9faa5d8d468dcc0e601579668dbbd59","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/ae/e0416277d57ebf1622f366f9fbefb1076240c9","hash":"a7af6162958ce305be9b50760a564144fc1332fe","modified":1455868563000},{"_id":"themes/hueman/x.git/objects/af/066201af6037164a8b750b94f04316a2341f3b","hash":"b6bf1992138b0afb188a14c807a44f1da078df68","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/b3/e21708088d53a34dcd9f36984393bfdd1577fe","hash":"27479cb13126d625c6f8e0cfb20876fdfa1eb5da","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/aa/658b7480e1e572a5077d00190757914012648d","hash":"76054d1fb58c7ea3f64efe67baba4981dbcf8666","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/cf/b85bf3eb402c26219f01960097c8cddca57540","hash":"e8c76e43b84d826a152b395120343175fabd1e93","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/de/5af1831fb43c839d08c193224be1bb9b9d221c","hash":"1da3b498b69294f6bd447e95d168b2374c4b0246","modified":1455868563000},{"_id":"themes/hueman/x.git/objects/pack/pack-f4fb5b25f0ca9450ac36f4e3193757f049b09475.idx","hash":"f27dc1d08a719e2c23cce5e776608afe8aea3dae","modified":1455845553000},{"_id":"themes/hueman/x.git/objects/44/03ce175ac09a0dd215f6a2a7edf281fc2b5bc9","hash":"ca4f1521a39d4c496edbc53a519af93b17f92733","modified":1455933663000},{"_id":"themes/hueman/x.git/objects/f3/b4cc5fdd6e5d730b656a10242d7f24906cc3e0","hash":"e9cbe01921dc3a4cd4b52c78613d3d74901ee145","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/9c/a7f9f2e2a0012c5bd88562610383d3f2d8851e","hash":"9fa5de1dddfb58959eb2ea5fbb06eabef6184022","modified":1455891082000},{"_id":"themes/hueman/x.git/objects/9d/e9c6f878358462e6656b8043521d1905f363b5","hash":"0cc60f1e99b9ca0bca74fe1ba67667b5291eafa3","modified":1455868563000},{"_id":"themes/hueman/x.git/logs/refs/heads/master","hash":"27782b16d2374b315157fa1e297aed4a909946e8","modified":1455868563000},{"_id":"themes/hueman/x.git/logs/refs/heads/_post","hash":"6d687384117358670bc006eeb784eb1364967cd9","modified":1455933663000},{"_id":"themes/hueman/x.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1455845553000},{"_id":"themes/hueman/x.git/logs/refs/remotes/origin/HEAD","hash":"25ae1b00acf833780d1d44995499ca6513e4f456","modified":1455845553000},{"_id":"themes/hueman/x.git/objects/pack/pack-f4fb5b25f0ca9450ac36f4e3193757f049b09475.pack","hash":"0fbf67d49c66761b8c06ec5b01b81adf610973ab","modified":1455933663000}],"Category":[{"name":"那年今日","_id":"cistop2qy0003hoinwd4f9cv3"},{"name":"技术","_id":"cistop2t4000bhoinvns7l8y3"},{"name":"music","_id":"cistop2ti000nhoinc2jfdb12"},{"name":"Hystrix","parent":"cistop2t4000bhoinvns7l8y3","_id":"cistop2tl000rhoin3t844hfy"},{"name":"微服务","_id":"cistop2tm000vhoin1ry6oegh"},{"name":"算法","parent":"cistop2t4000bhoinvns7l8y3","_id":"cistop2tp000zhoinp6qkiykt"},{"name":"杂谈","parent":"cistop2t4000bhoinvns7l8y3","_id":"cistop2tu0015hointzal1agp"},{"name":"FlatBuffers","parent":"cistop2t4000bhoinvns7l8y3","_id":"cistop2v5001thoinyzuubogk"},{"name":"工具","parent":"cistop2t4000bhoinvns7l8y3","_id":"cistop2ve0021hoinv2hxn9gs"},{"name":"Hexo","parent":"cistop2t4000bhoinvns7l8y3","_id":"cistop2vg0027hoindalrmahe"},{"name":"领域模型","parent":"cistop2t4000bhoinvns7l8y3","_id":"cistop2vi002bhoin6klqohgc"},{"name":"转载","_id":"cistop2vl002hhoinjpo8zx9s"},{"name":"http 2.0","parent":"cistop2vl002hhoinjpo8zx9s","_id":"cistop2vm002nhoinhxxr98hh"},{"name":"微服务","parent":"cistop2t4000bhoinvns7l8y3","_id":"cisvkwe3o0002uxinbvmm563y"},{"name":"Feign","parent":"cisvkwe3o0002uxinbvmm563y","_id":"cisvkwe3q0004uxinsoab98os"},{"name":"Feign","parent":"cistop2tm000vhoin1ry6oegh","_id":"ciszf0mlb00008minntjc118x"}],"Data":[],"Page":[{"_content":"# 关于\n\n暂无","source":"about/index.md","raw":"# 关于\n\n暂无","date":"2016-02-19T08:58:42.000Z","updated":"2016-02-19T08:58:42.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cistop2qt0001hoindeisxyut","content":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>暂无</p>\n","excerpt":"","more":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>暂无</p>\n"}],"Post":[{"title":"春天开篇","date":"2016-02-19T01:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122144.JPG","_content":"\n## 一年之计在于始\n\n想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：\n\n“一日之计在于晨,一年之计在于春,一生之计在于勤”\n\n**更有：**\n\n“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”\n\n春，晨，和，勤\n\n\n\n","source":"_posts/春天花会开.md","raw":"---\ntitle: 春天开篇\ndate: 2016-02-19 09:20:42\ncategories: \n\t- 那年今日\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122144.JPG\ntags: \n\t- 春天 \n\t- 梅花\n---\n\n## 一年之计在于始\n\n想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：\n\n“一日之计在于晨,一年之计在于春,一生之计在于勤”\n\n**更有：**\n\n“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”\n\n春，晨，和，勤\n\n\n\n","slug":"春天花会开","published":1,"updated":"2016-02-19T13:39:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2qo0000hoinwkoveww1","content":"<h2 id=\"一年之计在于始\"><a href=\"#一年之计在于始\" class=\"headerlink\" title=\"一年之计在于始\"></a>一年之计在于始</h2><p>想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：</p>\n<p>“一日之计在于晨,一年之计在于春,一生之计在于勤”</p>\n<p><strong>更有：</strong></p>\n<p>“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”</p>\n<p>春，晨，和，勤</p>\n","excerpt":"","more":"<h2 id=\"一年之计在于始\"><a href=\"#一年之计在于始\" class=\"headerlink\" title=\"一年之计在于始\"></a>一年之计在于始</h2><p>想到这句名言时，却不知道出处，也忘记了其他的句子，随即搜了一下，原句如下：</p>\n<p>“一日之计在于晨,一年之计在于春,一生之计在于勤”</p>\n<p><strong>更有：</strong></p>\n<p>“一年之计在于春,一日之计在于晨,一家之计在于和,一生之计在于勤”</p>\n<p>春，晨，和，勤</p>\n"},{"title":"Hystrix 参数详解","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-25T01:20:00.000Z","keywords":null,"description":null,"_content":"\nhystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey\n\n# Command Properties\n\n## Execution相关的属性的配置：\n\n* hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore\n\t- thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用\n\t- semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求\n\n* hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms\n* hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true\n* hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true\n* hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。\nsemaphore应该占整个容器（tomcat）的线程池的一小部分。\n\n\n## Fallback相关的属性\n\n这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略\n\n* hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10\n* hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true\n\n\n## Circuit Breaker相关的属性\n\n* hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true\n* hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20\n* hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000\n* hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50\n* hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false\n* hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage\n\n## Metrics相关参数\n\n* hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000\n* hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10\n* hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true\n* hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000\n* hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6\n* hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100\n* hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms\n\n## Request Context 相关参数\n\nhystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存\nhystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true\n\n# Collapser Properties 相关参数\n\nhystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE\nhystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10\nhystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true\n\n# ThreadPool 相关参数\n\n线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：\nrequests per second at peak when healthy × 99th percentile latency in seconds + some breathing room\n每秒最大支撑的请求数 * (99%平均响应时间 + 缓存值)\n比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：\n 1000 *（0.060+0.012）\n\n基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。\n当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务\n \n* hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10\n* hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。\n* hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用\n* hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1.\n* hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000\n* hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10\n\n\n ","source":"_posts/hystrix/Hystrix参数详解.md","raw":"---\ntitle: Hystrix 参数详解\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG'\ndate: 2016-02-25 09:20:00\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\n\t- Circuit Breaker\nkeywords:\ndescription:\n---\n\nhystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey\n\n# Command Properties\n\n## Execution相关的属性的配置：\n\n* hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore\n\t- thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用\n\t- semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求\n\n* hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms\n* hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true\n* hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true\n* hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。\nsemaphore应该占整个容器（tomcat）的线程池的一小部分。\n\n\n## Fallback相关的属性\n\n这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略\n\n* hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10\n* hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true\n\n\n## Circuit Breaker相关的属性\n\n* hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true\n* hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20\n* hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000\n* hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50\n* hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false\n* hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage\n\n## Metrics相关参数\n\n* hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000\n* hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10\n* hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true\n* hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000\n* hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6\n* hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100\n* hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms\n\n## Request Context 相关参数\n\nhystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存\nhystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true\n\n# Collapser Properties 相关参数\n\nhystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE\nhystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10\nhystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true\n\n# ThreadPool 相关参数\n\n线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：\nrequests per second at peak when healthy × 99th percentile latency in seconds + some breathing room\n每秒最大支撑的请求数 * (99%平均响应时间 + 缓存值)\n比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：\n 1000 *（0.060+0.012）\n\n基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。\n当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务\n \n* hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10\n* hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。\n* hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用\n* hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1.\n* hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000\n* hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10\n\n\n ","slug":"hystrix/Hystrix参数详解","published":1,"updated":"2016-03-21T12:45:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2t10008hoinibl64o6b","content":"<p>hystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey</p>\n<h1 id=\"Command-Properties\"><a href=\"#Command-Properties\" class=\"headerlink\" title=\"Command Properties\"></a>Command Properties</h1><h2 id=\"Execution相关的属性的配置：\"><a href=\"#Execution相关的属性的配置：\" class=\"headerlink\" title=\"Execution相关的属性的配置：\"></a>Execution相关的属性的配置：</h2><ul>\n<li><p>hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore</p>\n<ul>\n<li>thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用</li>\n<li>semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求</li>\n</ul>\n</li>\n<li><p>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms</p>\n</li>\n<li>hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true</li>\n<li>hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true</li>\n<li>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。<br>semaphore应该占整个容器（tomcat）的线程池的一小部分。</li>\n</ul>\n<h2 id=\"Fallback相关的属性\"><a href=\"#Fallback相关的属性\" class=\"headerlink\" title=\"Fallback相关的属性\"></a>Fallback相关的属性</h2><p>这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略</p>\n<ul>\n<li>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10</li>\n<li>hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true</li>\n</ul>\n<h2 id=\"Circuit-Breaker相关的属性\"><a href=\"#Circuit-Breaker相关的属性\" class=\"headerlink\" title=\"Circuit Breaker相关的属性\"></a>Circuit Breaker相关的属性</h2><ul>\n<li>hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true</li>\n<li>hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20</li>\n<li>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000</li>\n<li>hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率&gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50</li>\n<li>hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false</li>\n<li>hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage</li>\n</ul>\n<h2 id=\"Metrics相关参数\"><a href=\"#Metrics相关参数\" class=\"headerlink\" title=\"Metrics相关参数\"></a>Metrics相关参数</h2><ul>\n<li>hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000</li>\n<li>hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10</li>\n<li>hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true</li>\n<li>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000</li>\n<li>hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6</li>\n<li>hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100</li>\n<li>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms</li>\n</ul>\n<h2 id=\"Request-Context-相关参数\"><a href=\"#Request-Context-相关参数\" class=\"headerlink\" title=\"Request Context 相关参数\"></a>Request Context 相关参数</h2><p>hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存<br>hystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true</p>\n<h1 id=\"Collapser-Properties-相关参数\"><a href=\"#Collapser-Properties-相关参数\" class=\"headerlink\" title=\"Collapser Properties 相关参数\"></a>Collapser Properties 相关参数</h1><p>hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE<br>hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10<br>hystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true</p>\n<h1 id=\"ThreadPool-相关参数\"><a href=\"#ThreadPool-相关参数\" class=\"headerlink\" title=\"ThreadPool 相关参数\"></a>ThreadPool 相关参数</h1><p>线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：<br>requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room<br>每秒最大支撑的请求数 <em> (99%平均响应时间 + 缓存值)<br>比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：<br> 1000 </em>（0.060+0.012）</p>\n<p>基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。<br>当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务</p>\n<ul>\n<li>hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10</li>\n<li>hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。</li>\n<li>hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用</li>\n<li>hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（<a href=\"https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1\" target=\"_blank\" rel=\"external\">https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1</a>.</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10</li>\n</ul>\n","excerpt":"","more":"<p>hystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey</p>\n<h1 id=\"Command-Properties\"><a href=\"#Command-Properties\" class=\"headerlink\" title=\"Command Properties\"></a>Command Properties</h1><h2 id=\"Execution相关的属性的配置：\"><a href=\"#Execution相关的属性的配置：\" class=\"headerlink\" title=\"Execution相关的属性的配置：\"></a>Execution相关的属性的配置：</h2><ul>\n<li><p>hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore</p>\n<ul>\n<li>thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用</li>\n<li>semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求</li>\n</ul>\n</li>\n<li><p>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds  命令执行超时时间，默认1000ms</p>\n</li>\n<li>hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用true</li>\n<li>hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认true</li>\n<li>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。<br>semaphore应该占整个容器（tomcat）的线程池的一小部分。</li>\n</ul>\n<h2 id=\"Fallback相关的属性\"><a href=\"#Fallback相关的属性\" class=\"headerlink\" title=\"Fallback相关的属性\"></a>Fallback相关的属性</h2><p>这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略</p>\n<ul>\n<li>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests  如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10</li>\n<li>hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认true</li>\n</ul>\n<h2 id=\"Circuit-Breaker相关的属性\"><a href=\"#Circuit-Breaker相关的属性\" class=\"headerlink\" title=\"Circuit Breaker相关的属性\"></a>Circuit Breaker相关的属性</h2><ul>\n<li>hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认true</li>\n<li>hystrix.command.default.circuitBreaker.requestVolumeThreshold  一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit break。默认20</li>\n<li>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000</li>\n<li>hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率&gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50</li>\n<li>hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false</li>\n<li>hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器   如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage</li>\n</ul>\n<h2 id=\"Metrics相关参数\"><a href=\"#Metrics相关参数\" class=\"headerlink\" title=\"Metrics相关参数\"></a>Metrics相关参数</h2><ul>\n<li>hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit break 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000</li>\n<li>hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10</li>\n<li>hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true</li>\n<li>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds  设置rolling percentile window的时间，默认60000</li>\n<li>hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6</li>\n<li>hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100</li>\n<li>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds  记录health 快照（用来统计成功和错误绿）的间隔，默认500ms</li>\n</ul>\n<h2 id=\"Request-Context-相关参数\"><a href=\"#Request-Context-相关参数\" class=\"headerlink\" title=\"Request Context 相关参数\"></a>Request Context 相关参数</h2><p>hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存<br>hystrix.command.default.requestLog.enabled  记录日志到HystrixRequestLog，默认true</p>\n<h1 id=\"Collapser-Properties-相关参数\"><a href=\"#Collapser-Properties-相关参数\" class=\"headerlink\" title=\"Collapser Properties 相关参数\"></a>Collapser Properties 相关参数</h1><p>hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE<br>hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10<br>hystrix.collapser.default.requestCache.enabled  是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true</p>\n<h1 id=\"ThreadPool-相关参数\"><a href=\"#ThreadPool-相关参数\" class=\"headerlink\" title=\"ThreadPool 相关参数\"></a>ThreadPool 相关参数</h1><p>线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：<br>requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room<br>每秒最大支撑的请求数 <em> (99%平均响应时间 + 缓存值)<br>比如：每秒能处理1000个请求，99%的请求响应时间是60ms，那么公式是：<br> 1000 </em>（0.060+0.012）</p>\n<p>基本得原则时保持线程池尽可能小，他主要是为了释放压力，防止资源被阻塞。<br>当一切都是正常的时候，线程池一般仅会有1到2个线程激活来提供服务</p>\n<ul>\n<li>hystrix.threadpool.default.coreSize  并发执行的最大线程数，默认10</li>\n<li>hystrix.threadpool.default.maxQueueSize BlockingQueue的最大队列数，当设为－1，会使用SynchronousQueue，值为正时使用LinkedBlcokingQueue。该设置只会在初始化时有效，之后不能修改threadpool的queue size，除非reinitialising thread executor。默认－1。</li>\n<li>hystrix.threadpool.default.queueSizeRejectionThreshold  即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝。因为maxQueueSize不能被动态修改，这个参数将允许我们动态设置该值。if maxQueueSize == -1，该字段将不起作用</li>\n<li>hystrix.threadpool.default.keepAliveTimeMinutes 如果corePoolSize和maxPoolSize设成一样（默认实现）该设置无效。如果通过plugin（<a href=\"https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1\">https://github.com/Netflix/Hystrix/wiki/Plugins）使用自定义实现，该设置才有用，默认1</a>.</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds 线程池统计指标的时间，默认10000</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.numBuckets  将rolling window划分为n个buckets，默认10</li>\n</ul>\n"},{"title":"Hystrix降级模式总结","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png","date":"2016-03-09T01:22:47.000Z","keywords":"hystrix","description":"Hystrix降级","_content":"\n## 失败回退降级模式\n失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。\n\n* 快速失败Fail Fast\n\t* 如果业务异常，就抛出一个异常\n* 静默失败Fail Silent\n\t* 失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等\n* Fallback: Static\n\t* 失败时，返回默认值来替代引起失败的原因\n* Fallback: Stubbed\n\t* 返回替代值，还没理解\n* Fallback: Cache via Network\n\t* 当后端服务失败时，从网络缓存获取返回值\n* Primary + Secondary with Fallback\n\t* 故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式\n* Client Doesn’t Perform Network Access\n\t* \n* Get-Set-Get with Request Cache Invalidation","source":"_posts/hystrix/Hystrix降级模式总结.md","raw":"---\ntitle: Hystrix降级模式总结\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png'\ndate: 2016-03-09 09:22:47\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\nkeywords: hystrix\ndescription: Hystrix降级\n---\n\n## 失败回退降级模式\n失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。\n\n* 快速失败Fail Fast\n\t* 如果业务异常，就抛出一个异常\n* 静默失败Fail Silent\n\t* 失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等\n* Fallback: Static\n\t* 失败时，返回默认值来替代引起失败的原因\n* Fallback: Stubbed\n\t* 返回替代值，还没理解\n* Fallback: Cache via Network\n\t* 当后端服务失败时，从网络缓存获取返回值\n* Primary + Secondary with Fallback\n\t* 故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式\n* Client Doesn’t Perform Network Access\n\t* \n* Get-Set-Get with Request Cache Invalidation","slug":"hystrix/Hystrix降级模式总结","published":1,"updated":"2016-07-04T03:23:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2t20009hoinq55tcrt8","content":"<h2 id=\"失败回退降级模式\"><a href=\"#失败回退降级模式\" class=\"headerlink\" title=\"失败回退降级模式\"></a>失败回退降级模式</h2><p>失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。</p>\n<ul>\n<li>快速失败Fail Fast<ul>\n<li>如果业务异常，就抛出一个异常</li>\n</ul>\n</li>\n<li>静默失败Fail Silent<ul>\n<li>失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等</li>\n</ul>\n</li>\n<li>Fallback: Static<ul>\n<li>失败时，返回默认值来替代引起失败的原因</li>\n</ul>\n</li>\n<li>Fallback: Stubbed<ul>\n<li>返回替代值，还没理解</li>\n</ul>\n</li>\n<li>Fallback: Cache via Network<ul>\n<li>当后端服务失败时，从网络缓存获取返回值</li>\n</ul>\n</li>\n<li>Primary + Secondary with Fallback<ul>\n<li>故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式</li>\n</ul>\n</li>\n<li>Client Doesn’t Perform Network Access<br>  * </li>\n<li>Get-Set-Get with Request Cache Invalidation</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"失败回退降级模式\"><a href=\"#失败回退降级模式\" class=\"headerlink\" title=\"失败回退降级模式\"></a>失败回退降级模式</h2><p>失败回退需要实现HystrixCommand.getFallback方法或者HystrixObservableCommand. HystrixObservableCommand()方法。</p>\n<ul>\n<li>快速失败Fail Fast<ul>\n<li>如果业务异常，就抛出一个异常</li>\n</ul>\n</li>\n<li>静默失败Fail Silent<ul>\n<li>失败时返回一个空response或者移除业务功能，例如返回null，空字符串，空map，空list等</li>\n</ul>\n</li>\n<li>Fallback: Static<ul>\n<li>失败时，返回默认值来替代引起失败的原因</li>\n</ul>\n</li>\n<li>Fallback: Stubbed<ul>\n<li>返回替代值，还没理解</li>\n</ul>\n</li>\n<li>Fallback: Cache via Network<ul>\n<li>当后端服务失败时，从网络缓存获取返回值</li>\n</ul>\n</li>\n<li>Primary + Secondary with Fallback<ul>\n<li>故障转移，当主服务失败时，调用从服务。当从服务也失败时结合其他模式</li>\n</ul>\n</li>\n<li>Client Doesn’t Perform Network Access<br>  * </li>\n<li>Get-Set-Get with Request Cache Invalidation</li>\n</ul>\n"},{"title":"Hystrix简介","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png","date":"2016-03-09T01:22:47.000Z","keywords":"hystrix","description":"Hystrix简介","_content":"\n \n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png)\n\n1. <a href=\"#what\">What Is Hystrix?</a>\n1. <a href=\"#purpose\">What Is Hystrix For?</a>\n1. <a href=\"#problem\">What Problem Does Hystrix Solve?</a>\n1. <a href=\"#principles\">What Design Principles Underlie Hystrix?</a>\n1. <a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a>\n\n<a name=\"what\" />\n## Hystrix是什么?\n\n在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。\n\n####  Hystrix的历史\n\nHystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。\n\n \n下面的链接提供了围绕Hystrix和挑战，试图解决：\n\n* [&ldquo;Making Netflix API More Resilient&rdquo;](http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html)\n* [&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;](http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html)\n* [&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;](https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012)\n* [&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;](http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html)\n* [&ldquo;Application Resilience Engineering & Operations at Netflix&rdquo;] (https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix)\n\n<a name=\"purpose\" />\n## Hystrix能做什么?\n  \nHystrix被设计为：\n\n- 保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障\n- 在复杂的分布式系统中阻止连锁故障反应\n- 快速失败和快速恢复\n- Fallback降级和在可能的情况下优雅地降级\n- 启用近实时监测，报警和操作控制\n\n\n<a name=\"problem\" />\n## Hystrix解决了什么问题?\n\n复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。\n\n\n例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：\n\n> 99.99<sup>30</sup>  =  99.7% uptime  \n> 10亿请求中的0.3%  = 3,000,000 次失败  \n> 即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用 \n> 随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.\n \n**现实通常会更残酷。**\n\n**如果你没有针对整个系统做快速恢复**，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。\n\n***\n\n \n\n当一切都ok的请求流看起来是这样的：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png)\n\n当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png)\n\n\n \n一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。\n在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png)\n\n \n\n当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。\n如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！\n\n\n网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。\n所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。\n\n\n\n<a name=\"principles\" />\n## What Design Principles Underlie Hystrix?\n\nHystrix works by:\n\n* 防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程\n* 隔离和减低负载，对无法及时处理时快速失败，而不是排队\n* 提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。\n* 采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。\n* 通过最近实时metrics、监控和警告来优化以满足近实时性的要求\n* 在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求\n* 能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求\n\n\n\n<a name=\"how\" />\n## How Does Hystrix Accomplish Its Goals?\n\nHystrix does this by:\n\n \n- 使用`HystrixCommand`或者`HystrixObservableCommand`包装所有的外部系统（或者依赖服务）调用，每个`HystrixCommand`或者`HystrixObservableCommand`在隔离的线程中/信号下执行（参考这个例子[command pattern](http://en.wikipedia.org/wiki/Command_pattern)）\n\n- 超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。\n\n- 为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。\n- 测量成功，失败（抛出异常），超时和线程拒绝。\n- 如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。\n- 当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。\n- 近实时监控度量，动态配置修改\n \n \n\n当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。\n\n \n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png)\n\n \n\n\n\n","source":"_posts/hystrix/Hystrix简介.md","raw":"---\ntitle: Hystrix简介\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png'\ndate: 2016-03-09 09:22:47\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\nkeywords: hystrix\ndescription: Hystrix简介\n---\n\n \n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png)\n\n1. <a href=\"#what\">What Is Hystrix?</a>\n1. <a href=\"#purpose\">What Is Hystrix For?</a>\n1. <a href=\"#problem\">What Problem Does Hystrix Solve?</a>\n1. <a href=\"#principles\">What Design Principles Underlie Hystrix?</a>\n1. <a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a>\n\n<a name=\"what\" />\n## Hystrix是什么?\n\n在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。\n\n####  Hystrix的历史\n\nHystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。\n\n \n下面的链接提供了围绕Hystrix和挑战，试图解决：\n\n* [&ldquo;Making Netflix API More Resilient&rdquo;](http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html)\n* [&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;](http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html)\n* [&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;](https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012)\n* [&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;](http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html)\n* [&ldquo;Application Resilience Engineering & Operations at Netflix&rdquo;] (https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix)\n\n<a name=\"purpose\" />\n## Hystrix能做什么?\n  \nHystrix被设计为：\n\n- 保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障\n- 在复杂的分布式系统中阻止连锁故障反应\n- 快速失败和快速恢复\n- Fallback降级和在可能的情况下优雅地降级\n- 启用近实时监测，报警和操作控制\n\n\n<a name=\"problem\" />\n## Hystrix解决了什么问题?\n\n复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。\n\n\n例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：\n\n> 99.99<sup>30</sup>  =  99.7% uptime  \n> 10亿请求中的0.3%  = 3,000,000 次失败  \n> 即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用 \n> 随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.\n \n**现实通常会更残酷。**\n\n**如果你没有针对整个系统做快速恢复**，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。\n\n***\n\n \n\n当一切都ok的请求流看起来是这样的：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png)\n\n当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png)\n\n\n \n一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。\n在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。\n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png)\n\n \n\n当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。\n如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！\n\n\n网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。\n所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。\n\n\n\n<a name=\"principles\" />\n## What Design Principles Underlie Hystrix?\n\nHystrix works by:\n\n* 防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程\n* 隔离和减低负载，对无法及时处理时快速失败，而不是排队\n* 提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。\n* 采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。\n* 通过最近实时metrics、监控和警告来优化以满足近实时性的要求\n* 在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求\n* 能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求\n\n\n\n<a name=\"how\" />\n## How Does Hystrix Accomplish Its Goals?\n\nHystrix does this by:\n\n \n- 使用`HystrixCommand`或者`HystrixObservableCommand`包装所有的外部系统（或者依赖服务）调用，每个`HystrixCommand`或者`HystrixObservableCommand`在隔离的线程中/信号下执行（参考这个例子[command pattern](http://en.wikipedia.org/wiki/Command_pattern)）\n\n- 超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。\n\n- 为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。\n- 测量成功，失败（抛出异常），超时和线程拒绝。\n- 如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。\n- 当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。\n- 近实时监控度量，动态配置修改\n \n \n\n当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。\n\n \n\n![](http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png)\n\n \n\n\n\n","slug":"hystrix/Hystrix简介","published":1,"updated":"2016-03-21T12:46:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2t4000choin03ge167g","content":"<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png\" alt=\"\"></p>\n<ol>\n<li><a href=\"#what\">What Is Hystrix?</a></li>\n<li><a href=\"#purpose\">What Is Hystrix For?</a></li>\n<li><a href=\"#problem\">What Problem Does Hystrix Solve?</a></li>\n<li><a href=\"#principles\">What Design Principles Underlie Hystrix?</a></li>\n<li><a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a></li>\n</ol>\n<p><a name=\"what\"></a></p>\n<h2 id=\"Hystrix是什么\"><a href=\"#Hystrix是什么\" class=\"headerlink\" title=\"Hystrix是什么?\"></a>Hystrix是什么?</h2><p>在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。</p>\n<h4 id=\"Hystrix的历史\"><a href=\"#Hystrix的历史\" class=\"headerlink\" title=\"Hystrix的历史\"></a>Hystrix的历史</h4><p>Hystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。</p>\n<p>下面的链接提供了围绕Hystrix和挑战，试图解决：</p>\n<ul>\n<li><a href=\"http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html\" target=\"_blank\" rel=\"external\">&ldquo;Making Netflix API More Resilient&rdquo;</a></li>\n<li><a href=\"http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html\" target=\"_blank\" rel=\"external\">&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;</a></li>\n<li><a href=\"https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012\" target=\"_blank\" rel=\"external\">&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;</a></li>\n<li><a href=\"http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html\" target=\"_blank\" rel=\"external\">&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;</a></li>\n<li>[&ldquo;Application Resilience Engineering &amp; Operations at Netflix&rdquo;] (<a href=\"https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix\" target=\"_blank\" rel=\"external\">https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix</a>)</li>\n</ul>\n<p><a name=\"purpose\"></a></p>\n<h2 id=\"Hystrix能做什么\"><a href=\"#Hystrix能做什么\" class=\"headerlink\" title=\"Hystrix能做什么?\"></a>Hystrix能做什么?</h2><p>Hystrix被设计为：</p>\n<ul>\n<li>保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障</li>\n<li>在复杂的分布式系统中阻止连锁故障反应</li>\n<li>快速失败和快速恢复</li>\n<li>Fallback降级和在可能的情况下优雅地降级</li>\n<li>启用近实时监测，报警和操作控制</li>\n</ul>\n<p><a name=\"problem\"></a></p>\n<h2 id=\"Hystrix解决了什么问题\"><a href=\"#Hystrix解决了什么问题\" class=\"headerlink\" title=\"Hystrix解决了什么问题?\"></a>Hystrix解决了什么问题?</h2><p>复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。</p>\n<p>例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：</p>\n<blockquote>\n<p>99.99<sup>30</sup>  =  99.7% uptime<br>10亿请求中的0.3%  = 3,000,000 次失败<br>即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用<br>随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.</p>\n</blockquote>\n<p><strong>现实通常会更残酷。</strong></p>\n<p><strong>如果你没有针对整个系统做快速恢复</strong>，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。</p>\n<hr>\n<p>当一切都ok的请求流看起来是这样的：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png\" alt=\"\"></p>\n<p>当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png\" alt=\"\"></p>\n<p>一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。<br>在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png\" alt=\"\"></p>\n<p>当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。<br>如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！</p>\n<p>网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。<br>所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。</p>\n<p><a name=\"principles\"></a></p>\n<h2 id=\"What-Design-Principles-Underlie-Hystrix\"><a href=\"#What-Design-Principles-Underlie-Hystrix\" class=\"headerlink\" title=\"What Design Principles Underlie Hystrix?\"></a>What Design Principles Underlie Hystrix?</h2><p>Hystrix works by:</p>\n<ul>\n<li>防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程</li>\n<li>隔离和减低负载，对无法及时处理时快速失败，而不是排队</li>\n<li>提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。</li>\n<li>采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。</li>\n<li>通过最近实时metrics、监控和警告来优化以满足近实时性的要求</li>\n<li>在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求</li>\n<li>能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求</li>\n</ul>\n<p><a name=\"how\"></a></p>\n<h2 id=\"How-Does-Hystrix-Accomplish-Its-Goals\"><a href=\"#How-Does-Hystrix-Accomplish-Its-Goals\" class=\"headerlink\" title=\"How Does Hystrix Accomplish Its Goals?\"></a>How Does Hystrix Accomplish Its Goals?</h2><p>Hystrix does this by:</p>\n<ul>\n<li><p>使用<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>包装所有的外部系统（或者依赖服务）调用，每个<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>在隔离的线程中/信号下执行（参考这个例子<a href=\"http://en.wikipedia.org/wiki/Command_pattern\" target=\"_blank\" rel=\"external\">command pattern</a>）</p>\n</li>\n<li><p>超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。</p>\n</li>\n<li><p>为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。</p>\n</li>\n<li>测量成功，失败（抛出异常），超时和线程拒绝。</li>\n<li>如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。</li>\n<li>当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。</li>\n<li>近实时监控度量，动态配置修改</li>\n</ul>\n<p>当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-hystrix-logo-tagline-640.png\" alt=\"\"></p>\n<ol>\n<li><a href=\"#what\">What Is Hystrix?</a></li>\n<li><a href=\"#purpose\">What Is Hystrix For?</a></li>\n<li><a href=\"#problem\">What Problem Does Hystrix Solve?</a></li>\n<li><a href=\"#principles\">What Design Principles Underlie Hystrix?</a></li>\n<li><a href=\"#how\">How Does Hystrix Accomplish Its Goals?</a></li>\n</ol>\n<p><a name=\"what\" /></p>\n<h2 id=\"Hystrix是什么\"><a href=\"#Hystrix是什么\" class=\"headerlink\" title=\"Hystrix是什么?\"></a>Hystrix是什么?</h2><p>在分布式环境中，不可避免的有许多服务依赖，而且有时候一些服务会失败。Hystrix library通过添加延迟容忍和容错逻辑来控制分布式服务之间的相互影响。Hystrix通过服务之间访问的隔离点阻止连锁故障，并提供了失败回退机制（fallback），来改进系统服务的弹性。</p>\n<h4 id=\"Hystrix的历史\"><a href=\"#Hystrix的历史\" class=\"headerlink\" title=\"Hystrix的历史\"></a>Hystrix的历史</h4><p>Hystrix是在2011年由Netflix API 团队的弹性工程演变而来。在2012年，Hystrix日益完善和成熟，在Netflix的许多团队也开始采用。现在，在Netflix，每天有成千上万的线程隔离和数百亿的信号隔离被调用执行。这已经在可用性和弹性上产生了很大的改进。</p>\n<p>下面的链接提供了围绕Hystrix和挑战，试图解决：</p>\n<ul>\n<li><a href=\"http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html\">&ldquo;Making Netflix API More Resilient&rdquo;</a></li>\n<li><a href=\"http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html\">&ldquo;Fault Tolerance in a High Volume, Distributed System&rdquo;</a></li>\n<li><a href=\"https://speakerdeck.com/benjchristensen/performance-and-fault-tolerance-for-the-netflix-api-august-2012\">&ldquo;Performance and Fault Tolerance for the Netflix API&rdquo;</a></li>\n<li><a href=\"http://programming.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html\">&ldquo;Application Resilience in a Service-oriented Architecture&rdquo;</a></li>\n<li>[&ldquo;Application Resilience Engineering &amp; Operations at Netflix&rdquo;] (<a href=\"https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix\">https://speakerdeck.com/benjchristensen/application-resilience-engineering-and-operations-at-netflix</a>)</li>\n</ul>\n<p><a name=\"purpose\" /></p>\n<h2 id=\"Hystrix能做什么\"><a href=\"#Hystrix能做什么\" class=\"headerlink\" title=\"Hystrix能做什么?\"></a>Hystrix能做什么?</h2><p>Hystrix被设计为：</p>\n<ul>\n<li>保护通过第三方客户端库服务依赖访问（通常通过网络），控制其延迟和故障</li>\n<li>在复杂的分布式系统中阻止连锁故障反应</li>\n<li>快速失败和快速恢复</li>\n<li>Fallback降级和在可能的情况下优雅地降级</li>\n<li>启用近实时监测，报警和操作控制</li>\n</ul>\n<p><a name=\"problem\" /></p>\n<h2 id=\"Hystrix解决了什么问题\"><a href=\"#Hystrix解决了什么问题\" class=\"headerlink\" title=\"Hystrix解决了什么问题?\"></a>Hystrix解决了什么问题?</h2><p>复杂分布式架构的应用程序有许多依赖，其中每一个在某些时候都会不可避免的发生失败。如果这个主应用没有从那些外部失败隔离，那么就会有被拖垮的风险。</p>\n<p>例如，1个应用依赖30个服务，每个服务有99.99%可用，那么预期：</p>\n<blockquote>\n<p>99.99<sup>30</sup>  =  99.7% uptime<br>10亿请求中的0.3%  = 3,000,000 次失败<br>即使所有依赖的服务都能达到 99.99% 的可用率，每月大约有2+小时不可用<br>随着服务依赖数量的变多，服务不稳定的概率会成指数性提高.</p>\n</blockquote>\n<p><strong>现实通常会更残酷。</strong></p>\n<p><strong>如果你没有针对整个系统做快速恢复</strong>，即使所有依赖只有 0.01% 的不可用率，累积起来每个月给系统带来的不可用时间也有数小时之多。</p>\n<hr>\n<p>当一切都ok的请求流看起来是这样的：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-1-1280.png\" alt=\"\"></p>\n<p>当许多后端系统中的一个成为潜在故障时，可能会阻塞所有用户请求：</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-2-1280.png\" alt=\"\"></p>\n<p>一个高并发后端依赖成为潜在危险时，它会在几秒钟中导致所有服务器上的所有的资源耗尽。<br>在网络中或者客户端库中运行的每一个app都有可能会导致成为潜在的故障源。比失败更坏的是，这个问题app也可能会导致服务之间的延迟增加，从而备份队列，线程，和其他系统资源，导致更多系统的级联故障。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-3-1280.png\" alt=\"\"></p>\n<p>当通过第三方客户端网络访问时，这些问题会加剧，这个第三方客户端就是一个黑盒，其实现细节是不清楚的，它能随时改变行为，每个客户端库的网络和资源配置是不同的，通常难以监控和修改。<br>如果这些网络请求通过第三方客户端发出，问题会变得更加严重，因为这些第三方客户端对于应用来说相当于『黑盒』——无法了解其实现细节，随时可能发生变更，网络/资源配置随客户端的不同而不同，同时又难以监控和修改。同时，应用依赖链中的服务可能非常耗时，或者这些可能导致问题的网络请求根本没有被我们的应用显式地调用！</p>\n<p>网络连接可能失败或者降级。服务或者服务器可能失效或者变慢。新依赖的库或者部署的服务可能改变行为或性能，亦或是依赖的客户端库本身有bug。<br>所有以上这些所描述的失败和延迟都需要被隔离和管理，才不至于因为单个服务失败而导致整个应用活系统垮掉。</p>\n<p><a name=\"principles\" /></p>\n<h2 id=\"What-Design-Principles-Underlie-Hystrix\"><a href=\"#What-Design-Principles-Underlie-Hystrix\" class=\"headerlink\" title=\"What Design Principles Underlie Hystrix?\"></a>What Design Principles Underlie Hystrix?</h2><p>Hystrix works by:</p>\n<ul>\n<li>防止任何单一依赖耗尽容器（如Tomcat）内的所有用户线程</li>\n<li>隔离和减低负载，对无法及时处理时快速失败，而不是排队</li>\n<li>提供失败回退（fallback）降级，无论何时都尽可能保护使用者免受破坏。</li>\n<li>采用隔离技术（如隔离壁，泳道，和熔断器模式）来限制任何一个依赖性的影响。</li>\n<li>通过最近实时metrics、监控和警告来优化以满足近实时性的要求</li>\n<li>在 Hystrix许多方面都需要只是配置属性的动态修改并能低延迟传播，提供优化以满足快速恢复的要求</li>\n<li>能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求</li>\n</ul>\n<p><a name=\"how\" /></p>\n<h2 id=\"How-Does-Hystrix-Accomplish-Its-Goals\"><a href=\"#How-Does-Hystrix-Accomplish-Its-Goals\" class=\"headerlink\" title=\"How Does Hystrix Accomplish Its Goals?\"></a>How Does Hystrix Accomplish Its Goals?</h2><p>Hystrix does this by:</p>\n<ul>\n<li><p>使用<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>包装所有的外部系统（或者依赖服务）调用，每个<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>在隔离的线程中/信号下执行（参考这个例子<a href=\"http://en.wikipedia.org/wiki/Command_pattern\">command pattern</a>）</p>\n</li>\n<li><p>超时机制，调用时间比定义的超时阀值大时超时。除了默认值，通过设置&ldquo;properties&rdquo;给每个依赖服务定义超时阀值,超时时间一般设为比99.5%平均时间略高即可.当调用超时时，直接返回或执行fallback逻辑。</p>\n</li>\n<li><p>为每个依赖维护一个小的线程池（或信号），如果线程池已满调用将被立即拒绝来代替排队方式。</p>\n</li>\n<li>测量成功，失败（抛出异常），超时和线程拒绝。</li>\n<li>如果错误比率达到设定的阀值，通过手动或者自动方式平稳的停止一个时间周期调用所有请求。</li>\n<li>当请求失败、拒绝，超时或者发生短路时，执行失败回退（fallback）逻辑。</li>\n<li>近实时监控度量，动态配置修改</li>\n</ul>\n<p>当使用 Hystrix 包装了你的所有依赖服务的请求后，下面图中所示的系统拓扑将会变成如下形式，每个依赖服务都被隔离开来，Hystrix 会严格控制其在延迟发生时对资源的占用，并在任何失效发生时，执行失败回退逻辑。</p>\n<p><img src=\"http://7xiovs.com1.z0.glb.clouddn.com/hystrix-soa-4-isolation-1280.png\" alt=\"\"></p>\n"},{"title":"Matthew Lien-Bleeding Wolves","thumbnail":"http://ftp.ytbbs.com/attachments/forum/day_081028/20081028_ae33dbbe16d4417e2b55GlDpalRfZsm4.jpg","date":"2016-02-22T05:22:54.000Z","keywords":null,"description":null,"_content":"\n\n \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n ","source":"_posts/music/Matthew-Lien-Bleeding-Wolves.md","raw":"---\ntitle: Matthew Lien-Bleeding Wolves\nthumbnail: 'http://ftp.ytbbs.com/attachments/forum/day_081028/20081028_ae33dbbe16d4417e2b55GlDpalRfZsm4.jpg'\ndate: 2016-02-22 13:22:54\ncategories: music\ntags:\nkeywords:\ndescription:\n---\n\n\n \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n ","slug":"music/Matthew-Lien-Bleeding-Wolves","published":1,"updated":"2016-03-09T12:15:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2t5000dhoin3jabnlao","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n","excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=1&id=172149&auto=1&height=430\"></iframe>\n\n"},{"title":"微服务之微","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60606-200127.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30","date":"2016-06-02T01:20:00.000Z","keywords":null,"description":null,"_content":" \n \n\n\n 单一职责\n","source":"_posts/微服务/微服务之微.md","raw":"---\ntitle: 微服务之微\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60606-200127.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30'\ndate: 2016-06-02 09:20:00\ncategories:\n\t- 微服务 \ntags:\n\t \n\t- 微服务\nkeywords:\ndescription:\n---\n \n \n\n\n 单一职责\n","slug":"微服务/微服务之微","published":1,"updated":"2016-07-04T03:55:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2t6000fhoin6w6nyyvs","content":"<p> 单一职责</p>\n","excerpt":"","more":"<p> 单一职责</p>\n"},{"title":"负载均衡之加权轮询算法","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60606-172810.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30","date":"2016-06-16T01:06:33.000Z","keywords":"负载均衡,加权轮询,算法","description":null,"_content":"\n\n# 负载均衡之加权轮询算法\n\n## 算法举例说明\n\n 服务实例\t| 权重 \n ---|---|\r 127.0.0.1:8001\t| 1\r 127.0.0.1:8002 | 2\r 127.0.0.1:8003\t| 3\n\n  \n### 共有三个实例，总权重为6，那么实现效果应该为每调用6次：\n\n- 每个实例应该被调用权重次数\n- 权重数大的优先被调用\n\n### 根据以上说明，那么进行排列组合：\n\n- 先按照权重大小排序\n- 把权重数做为调用次数排列\n\n **排列的结果是这样的：**\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3\r2|\t127.0.0.1:8003|\t3\r3|\t127.0.0.1:8003|\t3\r4|\t127.0.0.1:8002|\t2\r5|\t127.0.0.1:8002|\t2\r6|\t127.0.0.1:8001|\t1\n\n貌似没问题，但每个实例调用不是交替的，分布不够均匀，改进一下重新排列组合：\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3\r2|\t127.0.0.1:8002|\t2\r3|\t127.0.0.1:8003|\t3\r4|\t127.0.0.1:8002|\t2\r5|\t127.0.0.1:8003|\t3\r6|\t127.0.0.1:8001|\t1\n\n或者\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3   \r2|\t127.0.0.1:8002|\t2\r3|\t127.0.0.1:8003|\t3\r4|\t127.0.0.1:8001|\t1\r5|\t127.0.0.1:8003|\t3\r6|\t127.0.0.1:8002|\t2\n\n\n2个权重变量：weight，current_weight\n\n### weight\n配置的固定不变的权重\n\n### current_weight\n\n会动态调整的权重，初始化为0，运行时动态调整。\n选取开始时，先重新调整current_weight= current_weight+weight，然后通过current_weight值从大到小排序，选择current_weight值最大的（实际编程中不一定要排序，可以直接取最大的）；\n然后重新计算被选择的current_weight值= current_weight-总weight。\n\n下面是用Lua脚本实现的该算法：\n\n ```\n \n function _M:next()\n\tlocal servers=self.servers\n \tlocal totalWeight = totalWeight(servers)\n \tfor k,v in pairs(servers) do\n\t\tv.cweight=v.weight+v.cweight\n\tend\n\n\ttable.sort( servers, \n\t\tfunction (a,b)\n\t\t\treturn a.cweight>b.cweight\n\t\tend \n\t)\n\tselected=servers[1]\n\tselected.cweight=selected.cweight-totalWeight\n\n\treturn selected\n\n end\n \n ```\n \n\n\n\n\n\n\n\n\n\n","source":"_posts/技术/负载均衡之加权轮询算法.md","raw":"---\ntitle: 负载均衡之加权轮询算法\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60606-172810.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30'\ndate: 2016-06-16 09:06:33\ncategories:\n\t- 技术\n\t- 算法\ntags:\n\t- 负载均衡\n\t- 加权轮询\n\t- 轮询\n\t- 算法\nkeywords: 负载均衡,加权轮询,算法\ndescription:\n---\n\n\n# 负载均衡之加权轮询算法\n\n## 算法举例说明\n\n 服务实例\t| 权重 \n ---|---|\r 127.0.0.1:8001\t| 1\r 127.0.0.1:8002 | 2\r 127.0.0.1:8003\t| 3\n\n  \n### 共有三个实例，总权重为6，那么实现效果应该为每调用6次：\n\n- 每个实例应该被调用权重次数\n- 权重数大的优先被调用\n\n### 根据以上说明，那么进行排列组合：\n\n- 先按照权重大小排序\n- 把权重数做为调用次数排列\n\n **排列的结果是这样的：**\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3\r2|\t127.0.0.1:8003|\t3\r3|\t127.0.0.1:8003|\t3\r4|\t127.0.0.1:8002|\t2\r5|\t127.0.0.1:8002|\t2\r6|\t127.0.0.1:8001|\t1\n\n貌似没问题，但每个实例调用不是交替的，分布不够均匀，改进一下重新排列组合：\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3\r2|\t127.0.0.1:8002|\t2\r3|\t127.0.0.1:8003|\t3\r4|\t127.0.0.1:8002|\t2\r5|\t127.0.0.1:8003|\t3\r6|\t127.0.0.1:8001|\t1\n\n或者\n\n序号|服务实例|权重\n---|---|---\n1|\t127.0.0.1:8003|\t3   \r2|\t127.0.0.1:8002|\t2\r3|\t127.0.0.1:8003|\t3\r4|\t127.0.0.1:8001|\t1\r5|\t127.0.0.1:8003|\t3\r6|\t127.0.0.1:8002|\t2\n\n\n2个权重变量：weight，current_weight\n\n### weight\n配置的固定不变的权重\n\n### current_weight\n\n会动态调整的权重，初始化为0，运行时动态调整。\n选取开始时，先重新调整current_weight= current_weight+weight，然后通过current_weight值从大到小排序，选择current_weight值最大的（实际编程中不一定要排序，可以直接取最大的）；\n然后重新计算被选择的current_weight值= current_weight-总weight。\n\n下面是用Lua脚本实现的该算法：\n\n ```\n \n function _M:next()\n\tlocal servers=self.servers\n \tlocal totalWeight = totalWeight(servers)\n \tfor k,v in pairs(servers) do\n\t\tv.cweight=v.weight+v.cweight\n\tend\n\n\ttable.sort( servers, \n\t\tfunction (a,b)\n\t\t\treturn a.cweight>b.cweight\n\t\tend \n\t)\n\tselected=servers[1]\n\tselected.cweight=selected.cweight-totalWeight\n\n\treturn selected\n\n end\n \n ```\n \n\n\n\n\n\n\n\n\n\n","slug":"技术/负载均衡之加权轮询算法","published":1,"updated":"2016-07-04T03:30:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2t9000hhoinrp1qu06c","content":"<h1 id=\"负载均衡之加权轮询算法\"><a href=\"#负载均衡之加权轮询算法\" class=\"headerlink\" title=\"负载均衡之加权轮询算法\"></a>负载均衡之加权轮询算法</h1><h2 id=\"算法举例说明\"><a href=\"#算法举例说明\" class=\"headerlink\" title=\"算法举例说明\"></a>算法举例说明</h2><table>\n<thead>\n<tr>\n<th>服务实例</th>\n<th>权重 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n<tr>\n<td> 127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td> 127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"共有三个实例，总权重为6，那么实现效果应该为每调用6次：\"><a href=\"#共有三个实例，总权重为6，那么实现效果应该为每调用6次：\" class=\"headerlink\" title=\"共有三个实例，总权重为6，那么实现效果应该为每调用6次：\"></a>共有三个实例，总权重为6，那么实现效果应该为每调用6次：</h3><ul>\n<li>每个实例应该被调用权重次数</li>\n<li>权重数大的优先被调用</li>\n</ul>\n<h3 id=\"根据以上说明，那么进行排列组合：\"><a href=\"#根据以上说明，那么进行排列组合：\" class=\"headerlink\" title=\"根据以上说明，那么进行排列组合：\"></a>根据以上说明，那么进行排列组合：</h3><ul>\n<li>先按照权重大小排序</li>\n<li><p>把权重数做为调用次数排列</p>\n<p><strong>排列的结果是这样的：</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>貌似没问题，但每个实例调用不是交替的，分布不够均匀，改进一下重新排列组合：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>或者</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3   </td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>2个权重变量：weight，current_weight</p>\n<h3 id=\"weight\"><a href=\"#weight\" class=\"headerlink\" title=\"weight\"></a>weight</h3><p>配置的固定不变的权重</p>\n<h3 id=\"current-weight\"><a href=\"#current-weight\" class=\"headerlink\" title=\"current_weight\"></a>current_weight</h3><p>会动态调整的权重，初始化为0，运行时动态调整。<br>选取开始时，先重新调整current_weight= current_weight+weight，然后通过current_weight值从大到小排序，选择current_weight值最大的（实际编程中不一定要排序，可以直接取最大的）；<br>然后重新计算被选择的current_weight值= current_weight-总weight。</p>\n<p>下面是用Lua脚本实现的该算法：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function _M:next()</span><br><span class=\"line\">local servers=self.servers</span><br><span class=\"line\">\tlocal totalWeight = totalWeight(servers)</span><br><span class=\"line\">\tfor k,v in pairs(servers) do</span><br><span class=\"line\">\tv.cweight=v.weight+v.cweight</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">table.sort( servers, </span><br><span class=\"line\">\tfunction (a,b)</span><br><span class=\"line\">\t\treturn a.cweight&gt;b.cweight</span><br><span class=\"line\">\tend </span><br><span class=\"line\">)</span><br><span class=\"line\">selected=servers[1]</span><br><span class=\"line\">selected.cweight=selected.cweight-totalWeight</span><br><span class=\"line\"></span><br><span class=\"line\">return selected</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"负载均衡之加权轮询算法\"><a href=\"#负载均衡之加权轮询算法\" class=\"headerlink\" title=\"负载均衡之加权轮询算法\"></a>负载均衡之加权轮询算法</h1><h2 id=\"算法举例说明\"><a href=\"#算法举例说明\" class=\"headerlink\" title=\"算法举例说明\"></a>算法举例说明</h2><table>\n<thead>\n<tr>\n<th>服务实例</th>\n<th>权重 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n<tr>\n<td> 127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td> 127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"共有三个实例，总权重为6，那么实现效果应该为每调用6次：\"><a href=\"#共有三个实例，总权重为6，那么实现效果应该为每调用6次：\" class=\"headerlink\" title=\"共有三个实例，总权重为6，那么实现效果应该为每调用6次：\"></a>共有三个实例，总权重为6，那么实现效果应该为每调用6次：</h3><ul>\n<li>每个实例应该被调用权重次数</li>\n<li>权重数大的优先被调用</li>\n</ul>\n<h3 id=\"根据以上说明，那么进行排列组合：\"><a href=\"#根据以上说明，那么进行排列组合：\" class=\"headerlink\" title=\"根据以上说明，那么进行排列组合：\"></a>根据以上说明，那么进行排列组合：</h3><ul>\n<li>先按照权重大小排序</li>\n<li><p>把权重数做为调用次数排列</p>\n<p><strong>排列的结果是这样的：</strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>貌似没问题，但每个实例调用不是交替的，分布不够均匀，改进一下重新排列组合：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>或者</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>服务实例</th>\n<th>权重</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>127.0.0.1:8003</td>\n<td>3   </td>\n</tr>\n<tr>\n<td>2</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>127.0.0.1:8001</td>\n<td>1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>127.0.0.1:8003</td>\n<td>3</td>\n</tr>\n<tr>\n<td>6</td>\n<td>127.0.0.1:8002</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>2个权重变量：weight，current_weight</p>\n<h3 id=\"weight\"><a href=\"#weight\" class=\"headerlink\" title=\"weight\"></a>weight</h3><p>配置的固定不变的权重</p>\n<h3 id=\"current-weight\"><a href=\"#current-weight\" class=\"headerlink\" title=\"current_weight\"></a>current_weight</h3><p>会动态调整的权重，初始化为0，运行时动态调整。<br>选取开始时，先重新调整current_weight= current_weight+weight，然后通过current_weight值从大到小排序，选择current_weight值最大的（实际编程中不一定要排序，可以直接取最大的）；<br>然后重新计算被选择的current_weight值= current_weight-总weight。</p>\n<p>下面是用Lua脚本实现的该算法：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function _M:next()</span><br><span class=\"line\">local servers=self.servers</span><br><span class=\"line\">\tlocal totalWeight = totalWeight(servers)</span><br><span class=\"line\">\tfor k,v in pairs(servers) do</span><br><span class=\"line\">\tv.cweight=v.weight+v.cweight</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">table.sort( servers, </span><br><span class=\"line\">\tfunction (a,b)</span><br><span class=\"line\">\t\treturn a.cweight&gt;b.cweight</span><br><span class=\"line\">\tend </span><br><span class=\"line\">)</span><br><span class=\"line\">selected=servers[1]</span><br><span class=\"line\">selected.cweight=selected.cweight-totalWeight</span><br><span class=\"line\"></span><br><span class=\"line\">return selected</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n"},{"title":"软件开发中的单一职责","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60607-090345.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30","date":"2016-06-28T01:06:33.000Z","keywords":"单一职责","description":null,"_content":"\n# 软件开发中的单一职责\n\n \n最近在实践微服务化过程中，对其“单一职责”原则深有体会。\n那么只有微服务化才可以单一职责，才可以解耦吗？答案是否定的。\n\n单一职责原则是这样定义的：单一的功能，并且完全封装起来。\n\n我们做后端Java开发的，应该最熟悉的就是标准的3层架构了，尤其是使用Spring.io体系的：Controller，Service，Dao/Repository。为什么要分层？就是为了保证单一职责，数据模型的事情交给Controller，业务逻辑的事情交给Service，和数据打交道的事情就交给Dao/Repository。有时候或者有些人会分层分的更多，4层，5层，我自己也这样干过，说白了也是为了保证单一职责，3层不能满足单一职责了，耦合度高了，就分。\n\n我们都知道一个webapp在经过一定时间的开发后，就惨不忍睹，即便是有标准的分层，页面或模板文件一大堆，最初的很清晰的3层标准架构也变味了，Controller，Service，Dao/Repository各层之间、Service之间、Dao/Repository之间互相调用，一团乱麻。这个时候没改一行代码都有可能一个老鼠害了一锅汤，bug就如同蚂蚁洞。\n\n### 这些问题最后就造成：\n\n- 可扩展性灵活性差，出现性能问题\n- 业务变更和开发困难，维护成本很高，交付时间长\n- 回归测试量很大\n- ...\n\n为了解决这些问题，就需要时时刻刻清楚的记住“**单一职责**”，**单一职责**可以用到软件开发的任何地方。\n\n应该说职责分离来解耦是最常用最有效的架构方法，这能够很大限度的简化一切。\n\n### 下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说**单一职责**：\n\n## 类方法/函数\n\n这应该是最小的能体现**单一职责**的程序单元了。最熟悉的最典型的莫过于Helper/Utils类方法了，但这种类方法的特征很明显，也很容易遵循单一职责，99%以上的开发人员都可以做到。但不仅仅这样的类方法要遵循单一职责原则，每一个类方法都应该遵循**单一职责**原则，尤其是一些处理业务逻辑的类方法更要遵循**单一职责**原则，处理业务的类方法通常要配合类的单一职责原则进行，下节中讨论。\n\n因此，这也是为什么很多TL要求类方法代码行数保持在20行左右，其实就是为了保证单一职责，20行左右是一个**经验粗略数字**，当然，10行或者30行来完成类方法也是可以的。大部分单一职责的类方法用20行左右的代码就够了，如果超过20行就要考虑是否保证了单一职责了。那我们在**迭代重构**的过程中就要考虑拆分这样的类方法来保证单一职责。\n\n类方法的单一职责是最单纯的，很具体的，不惨杂任何额外信息，只关心输入、输出、和职责；一定要明确地定义类方法的职责，保证在迭代中不被错误的扩张，调用方错误的使用。\n\n## 类/函数文件\n\t\n要用面向对象的设计方法，**单一职责原则**来定义类。开发人员一定要很好地理解“单一职责原则”，具有面向对象的抽象思维能力。\n\n当在迭代中一个类过于庞大或者快速膨胀，说明已经有坏味道了，这时候就需要考虑用单一职责原则或者面向对象的分析方法来重构和重新定义类了，通常就是要抽象和拆分类，否则将来会变成一个方法容器。\n\n把类比作一个人，她的职责就是完成自己职责范围内的事情，如果她什么事情都管，就叫多管闲事，可以想象她多管闲事的后果了，会搅得鸡犬不宁。同样，类也是，类如果多管闲事，那会搅得真个应用不稳定，漏洞百出，还很难修复。所以说定义一个类，要明确这个类的职责。使用面向对象的分析和设计方法，能很好地准确定义一个类的职责范围，通常就要用到封装、继承、多态和抽象等设计方法。\n\n \n## 包结构/文件夹\n\n分层就是最常用的架构方法之一，分层具体体现在分包和分类，就是分门别类的意思。俗话说，物以类聚，人以群分。\n\n包结构在单一职责原则上是类的补充，职责范围进一步扩大。如果把一个类叫做一个人，那么包就是一个最小单位的团队，职责就是负责一类特定事情。\n如何分包呢？那就要用到分类学的知识了，要以什么特征来分，可能不仅仅只有一种特征，比如，先用公司域名来做基础包名，这里叫一级包名；然后再用一个特定的有意义的标识作为二级子包名；之后按分层（web,dao,service等等）方法做三级包名，也可以先按照业务再按分层。例如：\n\n```\n\n域名：tietang.wang\n有个项目叫：social\n那么我可以这样分：\nwang.tietang\n\t- social\n\t\t- web\n\t\t- service\n\t\t- dao\n\t\t- commons\n\n也可以这样：\n\nwang.tietang\n\t- commons\n\t- user\n\t\t- web\n\t\t- service\n\t\t- dao\n\t- relation\n\t\t- web\n\t\t- service\n\t\t- dao\t \t\t\n\t\t\t\n\n\n```\n\n## 多工程/module\n\n通常以多maven module或者gradle 多module形式存在，来保证单一职责。\n当业务量还没有达到服务拆分的火候，又需要规整项目结构，通常在一个app发展的太庞大时或者在工程建设初期采取，从文件系统上隔离，通过module依赖来集成。需要注意的是这样的架构或拆分不是随意的，要以单一职责原则来拆分，更具体一点就是要根据业务，技术框架功能等特性来拆分。\n\n比如，按技术组件拆分，通常会有一些技术组件，可以把她放到commons module，如果有多种类型的技术组件，就拆分为commons module的子module；也可以直接将这些技术组件拆分为独立的工程，存在于独立的git/svn仓库，独立管理，专人负责；其他哪些module需要就依赖她。那拆分的这些技术组件的每一个应该遵循单一职责原则，例如数据分片的框架，NIO基础网络框架等等。\n\n比如，按业务拆分，例如有用户，订单，商品，支付，那么就按照这些业务拆分为子module，每一个子module就只负责自己的业务逻辑，也遵循单一职责。\n\n那每个module的职责范围又比类和包更大，这个时候职责也更模糊，有时候很难把握，对于技术组件可能相对清晰，业务module就要熟悉业务，明确业务边界。\n\n多module拆分后也是为将来服务化埋下伏笔，同时在物理文件系统比较清晰了，那在依赖管理上也要掌握好保持清晰的依赖逻辑，把握好单一职责原则。\n\n## 微服务/可部署单元\n\n微服务，从运行时隔离，但业务量发展到一定时候，从单体或者多module工程拆分或演化出来，可独立打包可独立部署并复合单一原则的application，当然了微服务所体现的价值不仅仅是隔离和独立部署，还有很多这里可以参考[单体应用与微服务优缺点辨析](<http://www.infoq.com/cn/news/2015/04/single-app-micro-service>)。单一职责在微服务中的价值是最重要的，包含了app层面和开发app的团队层面，微服务的大部分优点都可以围绕单一职责来张开。\n\n## 团队\n\n先引用《韩非子·扬权》中的一段文字：\n\n```\n夫物者有所宜，材者有所施，各处其宜，故上下无为。 \n使鸡司夜，令狸执鼠，皆用其能，上乃无事。\n上有所长，事乃不方。 \n矜而好能，下之所欺：辩惠好生，下因其材。\n上下易用，国故不治。\n\n```\n\n**参考：**\n\t\n- 原文：http://www.shici8.com/bookview_3501.html\n- 译文：http://www.shici8.com/article_8539.html\n\n各得其所，各司其职。所以，团队也要遵循单一职责原则，这样才能很好地管理团队成员的时间，提高效率。一个人专注做一件事情的效率远高于同时关注多件事情的。同样一个人一直管理和维护同一份代码要比多人同时维护多份代码的效率高很多。每一个人都有自己的个性，他有自己的擅长，让每一个人专注自己擅长的事情，那肯定事半功倍，整个团队绩效肯定也很突出。\n\n \n总之，引用古文名句说明了所有：\n\n- 物以类聚，人以群分。\n- 天下之事，分合交替，分久必合，合久必分！\n- 使鸡司夜，令狸执鼠，皆用其能，上乃无事。\n \n\n \n### 参考：\n\n [http://www.jianshu.com/p/f9d15827465d](<http://www.jianshu.com/p/f9d15827465d>)\n \n [https://zh.wikipedia.org/wiki/单一功能原则](<https://zh.wikipedia.org/wiki/单一功能原则>)\n\n\n\n\n\n\n","source":"_posts/技术/软件开发中的单一职责.md","raw":"---\ntitle: 软件开发中的单一职责\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60607-090345.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30'\ndate: 2016-06-28 09:06:33\ncategories:\n\t- 技术\n\t- 杂谈\ntags:\n\t- 单一职责\n\t- 软件开发\n\t- 微服务\n\nkeywords: 单一职责\ndescription:\n---\n\n# 软件开发中的单一职责\n\n \n最近在实践微服务化过程中，对其“单一职责”原则深有体会。\n那么只有微服务化才可以单一职责，才可以解耦吗？答案是否定的。\n\n单一职责原则是这样定义的：单一的功能，并且完全封装起来。\n\n我们做后端Java开发的，应该最熟悉的就是标准的3层架构了，尤其是使用Spring.io体系的：Controller，Service，Dao/Repository。为什么要分层？就是为了保证单一职责，数据模型的事情交给Controller，业务逻辑的事情交给Service，和数据打交道的事情就交给Dao/Repository。有时候或者有些人会分层分的更多，4层，5层，我自己也这样干过，说白了也是为了保证单一职责，3层不能满足单一职责了，耦合度高了，就分。\n\n我们都知道一个webapp在经过一定时间的开发后，就惨不忍睹，即便是有标准的分层，页面或模板文件一大堆，最初的很清晰的3层标准架构也变味了，Controller，Service，Dao/Repository各层之间、Service之间、Dao/Repository之间互相调用，一团乱麻。这个时候没改一行代码都有可能一个老鼠害了一锅汤，bug就如同蚂蚁洞。\n\n### 这些问题最后就造成：\n\n- 可扩展性灵活性差，出现性能问题\n- 业务变更和开发困难，维护成本很高，交付时间长\n- 回归测试量很大\n- ...\n\n为了解决这些问题，就需要时时刻刻清楚的记住“**单一职责**”，**单一职责**可以用到软件开发的任何地方。\n\n应该说职责分离来解耦是最常用最有效的架构方法，这能够很大限度的简化一切。\n\n### 下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说**单一职责**：\n\n## 类方法/函数\n\n这应该是最小的能体现**单一职责**的程序单元了。最熟悉的最典型的莫过于Helper/Utils类方法了，但这种类方法的特征很明显，也很容易遵循单一职责，99%以上的开发人员都可以做到。但不仅仅这样的类方法要遵循单一职责原则，每一个类方法都应该遵循**单一职责**原则，尤其是一些处理业务逻辑的类方法更要遵循**单一职责**原则，处理业务的类方法通常要配合类的单一职责原则进行，下节中讨论。\n\n因此，这也是为什么很多TL要求类方法代码行数保持在20行左右，其实就是为了保证单一职责，20行左右是一个**经验粗略数字**，当然，10行或者30行来完成类方法也是可以的。大部分单一职责的类方法用20行左右的代码就够了，如果超过20行就要考虑是否保证了单一职责了。那我们在**迭代重构**的过程中就要考虑拆分这样的类方法来保证单一职责。\n\n类方法的单一职责是最单纯的，很具体的，不惨杂任何额外信息，只关心输入、输出、和职责；一定要明确地定义类方法的职责，保证在迭代中不被错误的扩张，调用方错误的使用。\n\n## 类/函数文件\n\t\n要用面向对象的设计方法，**单一职责原则**来定义类。开发人员一定要很好地理解“单一职责原则”，具有面向对象的抽象思维能力。\n\n当在迭代中一个类过于庞大或者快速膨胀，说明已经有坏味道了，这时候就需要考虑用单一职责原则或者面向对象的分析方法来重构和重新定义类了，通常就是要抽象和拆分类，否则将来会变成一个方法容器。\n\n把类比作一个人，她的职责就是完成自己职责范围内的事情，如果她什么事情都管，就叫多管闲事，可以想象她多管闲事的后果了，会搅得鸡犬不宁。同样，类也是，类如果多管闲事，那会搅得真个应用不稳定，漏洞百出，还很难修复。所以说定义一个类，要明确这个类的职责。使用面向对象的分析和设计方法，能很好地准确定义一个类的职责范围，通常就要用到封装、继承、多态和抽象等设计方法。\n\n \n## 包结构/文件夹\n\n分层就是最常用的架构方法之一，分层具体体现在分包和分类，就是分门别类的意思。俗话说，物以类聚，人以群分。\n\n包结构在单一职责原则上是类的补充，职责范围进一步扩大。如果把一个类叫做一个人，那么包就是一个最小单位的团队，职责就是负责一类特定事情。\n如何分包呢？那就要用到分类学的知识了，要以什么特征来分，可能不仅仅只有一种特征，比如，先用公司域名来做基础包名，这里叫一级包名；然后再用一个特定的有意义的标识作为二级子包名；之后按分层（web,dao,service等等）方法做三级包名，也可以先按照业务再按分层。例如：\n\n```\n\n域名：tietang.wang\n有个项目叫：social\n那么我可以这样分：\nwang.tietang\n\t- social\n\t\t- web\n\t\t- service\n\t\t- dao\n\t\t- commons\n\n也可以这样：\n\nwang.tietang\n\t- commons\n\t- user\n\t\t- web\n\t\t- service\n\t\t- dao\n\t- relation\n\t\t- web\n\t\t- service\n\t\t- dao\t \t\t\n\t\t\t\n\n\n```\n\n## 多工程/module\n\n通常以多maven module或者gradle 多module形式存在，来保证单一职责。\n当业务量还没有达到服务拆分的火候，又需要规整项目结构，通常在一个app发展的太庞大时或者在工程建设初期采取，从文件系统上隔离，通过module依赖来集成。需要注意的是这样的架构或拆分不是随意的，要以单一职责原则来拆分，更具体一点就是要根据业务，技术框架功能等特性来拆分。\n\n比如，按技术组件拆分，通常会有一些技术组件，可以把她放到commons module，如果有多种类型的技术组件，就拆分为commons module的子module；也可以直接将这些技术组件拆分为独立的工程，存在于独立的git/svn仓库，独立管理，专人负责；其他哪些module需要就依赖她。那拆分的这些技术组件的每一个应该遵循单一职责原则，例如数据分片的框架，NIO基础网络框架等等。\n\n比如，按业务拆分，例如有用户，订单，商品，支付，那么就按照这些业务拆分为子module，每一个子module就只负责自己的业务逻辑，也遵循单一职责。\n\n那每个module的职责范围又比类和包更大，这个时候职责也更模糊，有时候很难把握，对于技术组件可能相对清晰，业务module就要熟悉业务，明确业务边界。\n\n多module拆分后也是为将来服务化埋下伏笔，同时在物理文件系统比较清晰了，那在依赖管理上也要掌握好保持清晰的依赖逻辑，把握好单一职责原则。\n\n## 微服务/可部署单元\n\n微服务，从运行时隔离，但业务量发展到一定时候，从单体或者多module工程拆分或演化出来，可独立打包可独立部署并复合单一原则的application，当然了微服务所体现的价值不仅仅是隔离和独立部署，还有很多这里可以参考[单体应用与微服务优缺点辨析](<http://www.infoq.com/cn/news/2015/04/single-app-micro-service>)。单一职责在微服务中的价值是最重要的，包含了app层面和开发app的团队层面，微服务的大部分优点都可以围绕单一职责来张开。\n\n## 团队\n\n先引用《韩非子·扬权》中的一段文字：\n\n```\n夫物者有所宜，材者有所施，各处其宜，故上下无为。 \n使鸡司夜，令狸执鼠，皆用其能，上乃无事。\n上有所长，事乃不方。 \n矜而好能，下之所欺：辩惠好生，下因其材。\n上下易用，国故不治。\n\n```\n\n**参考：**\n\t\n- 原文：http://www.shici8.com/bookview_3501.html\n- 译文：http://www.shici8.com/article_8539.html\n\n各得其所，各司其职。所以，团队也要遵循单一职责原则，这样才能很好地管理团队成员的时间，提高效率。一个人专注做一件事情的效率远高于同时关注多件事情的。同样一个人一直管理和维护同一份代码要比多人同时维护多份代码的效率高很多。每一个人都有自己的个性，他有自己的擅长，让每一个人专注自己擅长的事情，那肯定事半功倍，整个团队绩效肯定也很突出。\n\n \n总之，引用古文名句说明了所有：\n\n- 物以类聚，人以群分。\n- 天下之事，分合交替，分久必合，合久必分！\n- 使鸡司夜，令狸执鼠，皆用其能，上乃无事。\n \n\n \n### 参考：\n\n [http://www.jianshu.com/p/f9d15827465d](<http://www.jianshu.com/p/f9d15827465d>)\n \n [https://zh.wikipedia.org/wiki/单一功能原则](<https://zh.wikipedia.org/wiki/单一功能原则>)\n\n\n\n\n\n\n","slug":"技术/软件开发中的单一职责","published":1,"updated":"2016-07-04T03:51:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2tb000ihoinlge1piif","content":"<h1 id=\"软件开发中的单一职责\"><a href=\"#软件开发中的单一职责\" class=\"headerlink\" title=\"软件开发中的单一职责\"></a>软件开发中的单一职责</h1><p>最近在实践微服务化过程中，对其“单一职责”原则深有体会。<br>那么只有微服务化才可以单一职责，才可以解耦吗？答案是否定的。</p>\n<p>单一职责原则是这样定义的：单一的功能，并且完全封装起来。</p>\n<p>我们做后端Java开发的，应该最熟悉的就是标准的3层架构了，尤其是使用Spring.io体系的：Controller，Service，Dao/Repository。为什么要分层？就是为了保证单一职责，数据模型的事情交给Controller，业务逻辑的事情交给Service，和数据打交道的事情就交给Dao/Repository。有时候或者有些人会分层分的更多，4层，5层，我自己也这样干过，说白了也是为了保证单一职责，3层不能满足单一职责了，耦合度高了，就分。</p>\n<p>我们都知道一个webapp在经过一定时间的开发后，就惨不忍睹，即便是有标准的分层，页面或模板文件一大堆，最初的很清晰的3层标准架构也变味了，Controller，Service，Dao/Repository各层之间、Service之间、Dao/Repository之间互相调用，一团乱麻。这个时候没改一行代码都有可能一个老鼠害了一锅汤，bug就如同蚂蚁洞。</p>\n<h3 id=\"这些问题最后就造成：\"><a href=\"#这些问题最后就造成：\" class=\"headerlink\" title=\"这些问题最后就造成：\"></a>这些问题最后就造成：</h3><ul>\n<li>可扩展性灵活性差，出现性能问题</li>\n<li>业务变更和开发困难，维护成本很高，交付时间长</li>\n<li>回归测试量很大</li>\n<li>…</li>\n</ul>\n<p>为了解决这些问题，就需要时时刻刻清楚的记住“<strong>单一职责</strong>”，<strong>单一职责</strong>可以用到软件开发的任何地方。</p>\n<p>应该说职责分离来解耦是最常用最有效的架构方法，这能够很大限度的简化一切。</p>\n<h3 id=\"下面就从软件开发、设计、架构，以及重构-演进-进化，从小到大几个方面来说说单一职责：\"><a href=\"#下面就从软件开发、设计、架构，以及重构-演进-进化，从小到大几个方面来说说单一职责：\" class=\"headerlink\" title=\"下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说单一职责：\"></a>下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说<strong>单一职责</strong>：</h3><h2 id=\"类方法-函数\"><a href=\"#类方法-函数\" class=\"headerlink\" title=\"类方法/函数\"></a>类方法/函数</h2><p>这应该是最小的能体现<strong>单一职责</strong>的程序单元了。最熟悉的最典型的莫过于Helper/Utils类方法了，但这种类方法的特征很明显，也很容易遵循单一职责，99%以上的开发人员都可以做到。但不仅仅这样的类方法要遵循单一职责原则，每一个类方法都应该遵循<strong>单一职责</strong>原则，尤其是一些处理业务逻辑的类方法更要遵循<strong>单一职责</strong>原则，处理业务的类方法通常要配合类的单一职责原则进行，下节中讨论。</p>\n<p>因此，这也是为什么很多TL要求类方法代码行数保持在20行左右，其实就是为了保证单一职责，20行左右是一个<strong>经验粗略数字</strong>，当然，10行或者30行来完成类方法也是可以的。大部分单一职责的类方法用20行左右的代码就够了，如果超过20行就要考虑是否保证了单一职责了。那我们在<strong>迭代重构</strong>的过程中就要考虑拆分这样的类方法来保证单一职责。</p>\n<p>类方法的单一职责是最单纯的，很具体的，不惨杂任何额外信息，只关心输入、输出、和职责；一定要明确地定义类方法的职责，保证在迭代中不被错误的扩张，调用方错误的使用。</p>\n<h2 id=\"类-函数文件\"><a href=\"#类-函数文件\" class=\"headerlink\" title=\"类/函数文件\"></a>类/函数文件</h2><p>要用面向对象的设计方法，<strong>单一职责原则</strong>来定义类。开发人员一定要很好地理解“单一职责原则”，具有面向对象的抽象思维能力。</p>\n<p>当在迭代中一个类过于庞大或者快速膨胀，说明已经有坏味道了，这时候就需要考虑用单一职责原则或者面向对象的分析方法来重构和重新定义类了，通常就是要抽象和拆分类，否则将来会变成一个方法容器。</p>\n<p>把类比作一个人，她的职责就是完成自己职责范围内的事情，如果她什么事情都管，就叫多管闲事，可以想象她多管闲事的后果了，会搅得鸡犬不宁。同样，类也是，类如果多管闲事，那会搅得真个应用不稳定，漏洞百出，还很难修复。所以说定义一个类，要明确这个类的职责。使用面向对象的分析和设计方法，能很好地准确定义一个类的职责范围，通常就要用到封装、继承、多态和抽象等设计方法。</p>\n<h2 id=\"包结构-文件夹\"><a href=\"#包结构-文件夹\" class=\"headerlink\" title=\"包结构/文件夹\"></a>包结构/文件夹</h2><p>分层就是最常用的架构方法之一，分层具体体现在分包和分类，就是分门别类的意思。俗话说，物以类聚，人以群分。</p>\n<p>包结构在单一职责原则上是类的补充，职责范围进一步扩大。如果把一个类叫做一个人，那么包就是一个最小单位的团队，职责就是负责一类特定事情。<br>如何分包呢？那就要用到分类学的知识了，要以什么特征来分，可能不仅仅只有一种特征，比如，先用公司域名来做基础包名，这里叫一级包名；然后再用一个特定的有意义的标识作为二级子包名；之后按分层（web,dao,service等等）方法做三级包名，也可以先按照业务再按分层。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">域名：tietang.wang</span><br><span class=\"line\">有个项目叫：social</span><br><span class=\"line\">那么我可以这样分：</span><br><span class=\"line\">wang.tietang</span><br><span class=\"line\">\t- social</span><br><span class=\"line\">\t\t- web</span><br><span class=\"line\">\t\t- service</span><br><span class=\"line\">\t\t- dao</span><br><span class=\"line\">\t\t- commons</span><br><span class=\"line\"></span><br><span class=\"line\">也可以这样：</span><br><span class=\"line\"></span><br><span class=\"line\">wang.tietang</span><br><span class=\"line\">\t- commons</span><br><span class=\"line\">\t- user</span><br><span class=\"line\">\t\t- web</span><br><span class=\"line\">\t\t- service</span><br><span class=\"line\">\t\t- dao</span><br><span class=\"line\">\t- relation</span><br><span class=\"line\">\t\t- web</span><br><span class=\"line\">\t\t- service</span><br><span class=\"line\">\t\t- dao</span><br></pre></td></tr></table></figure>\n<h2 id=\"多工程-module\"><a href=\"#多工程-module\" class=\"headerlink\" title=\"多工程/module\"></a>多工程/module</h2><p>通常以多maven module或者gradle 多module形式存在，来保证单一职责。<br>当业务量还没有达到服务拆分的火候，又需要规整项目结构，通常在一个app发展的太庞大时或者在工程建设初期采取，从文件系统上隔离，通过module依赖来集成。需要注意的是这样的架构或拆分不是随意的，要以单一职责原则来拆分，更具体一点就是要根据业务，技术框架功能等特性来拆分。</p>\n<p>比如，按技术组件拆分，通常会有一些技术组件，可以把她放到commons module，如果有多种类型的技术组件，就拆分为commons module的子module；也可以直接将这些技术组件拆分为独立的工程，存在于独立的git/svn仓库，独立管理，专人负责；其他哪些module需要就依赖她。那拆分的这些技术组件的每一个应该遵循单一职责原则，例如数据分片的框架，NIO基础网络框架等等。</p>\n<p>比如，按业务拆分，例如有用户，订单，商品，支付，那么就按照这些业务拆分为子module，每一个子module就只负责自己的业务逻辑，也遵循单一职责。</p>\n<p>那每个module的职责范围又比类和包更大，这个时候职责也更模糊，有时候很难把握，对于技术组件可能相对清晰，业务module就要熟悉业务，明确业务边界。</p>\n<p>多module拆分后也是为将来服务化埋下伏笔，同时在物理文件系统比较清晰了，那在依赖管理上也要掌握好保持清晰的依赖逻辑，把握好单一职责原则。</p>\n<h2 id=\"微服务-可部署单元\"><a href=\"#微服务-可部署单元\" class=\"headerlink\" title=\"微服务/可部署单元\"></a>微服务/可部署单元</h2><p>微服务，从运行时隔离，但业务量发展到一定时候，从单体或者多module工程拆分或演化出来，可独立打包可独立部署并复合单一原则的application，当然了微服务所体现的价值不仅仅是隔离和独立部署，还有很多这里可以参考<a href=\"http://www.infoq.com/cn/news/2015/04/single-app-micro-service\" target=\"_blank\" rel=\"external\">单体应用与微服务优缺点辨析</a>。单一职责在微服务中的价值是最重要的，包含了app层面和开发app的团队层面，微服务的大部分优点都可以围绕单一职责来张开。</p>\n<h2 id=\"团队\"><a href=\"#团队\" class=\"headerlink\" title=\"团队\"></a>团队</h2><p>先引用《韩非子·扬权》中的一段文字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">夫物者有所宜，材者有所施，各处其宜，故上下无为。 </span><br><span class=\"line\">使鸡司夜，令狸执鼠，皆用其能，上乃无事。</span><br><span class=\"line\">上有所长，事乃不方。 </span><br><span class=\"line\">矜而好能，下之所欺：辩惠好生，下因其材。</span><br><span class=\"line\">上下易用，国故不治。</span><br></pre></td></tr></table></figure>\n<p><strong>参考：</strong></p>\n<ul>\n<li>原文：<a href=\"http://www.shici8.com/bookview_3501.html\" target=\"_blank\" rel=\"external\">http://www.shici8.com/bookview_3501.html</a></li>\n<li>译文：<a href=\"http://www.shici8.com/article_8539.html\" target=\"_blank\" rel=\"external\">http://www.shici8.com/article_8539.html</a></li>\n</ul>\n<p>各得其所，各司其职。所以，团队也要遵循单一职责原则，这样才能很好地管理团队成员的时间，提高效率。一个人专注做一件事情的效率远高于同时关注多件事情的。同样一个人一直管理和维护同一份代码要比多人同时维护多份代码的效率高很多。每一个人都有自己的个性，他有自己的擅长，让每一个人专注自己擅长的事情，那肯定事半功倍，整个团队绩效肯定也很突出。</p>\n<p>总之，引用古文名句说明了所有：</p>\n<ul>\n<li>物以类聚，人以群分。</li>\n<li>天下之事，分合交替，分久必合，合久必分！</li>\n<li>使鸡司夜，令狸执鼠，皆用其能，上乃无事。</li>\n</ul>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p> <a href=\"http://www.jianshu.com/p/f9d15827465d\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f9d15827465d</a></p>\n<p> <a href=\"https://zh.wikipedia.org/wiki/单一功能原则\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/单一功能原则</a></p>\n","excerpt":"","more":"<h1 id=\"软件开发中的单一职责\"><a href=\"#软件开发中的单一职责\" class=\"headerlink\" title=\"软件开发中的单一职责\"></a>软件开发中的单一职责</h1><p>最近在实践微服务化过程中，对其“单一职责”原则深有体会。<br>那么只有微服务化才可以单一职责，才可以解耦吗？答案是否定的。</p>\n<p>单一职责原则是这样定义的：单一的功能，并且完全封装起来。</p>\n<p>我们做后端Java开发的，应该最熟悉的就是标准的3层架构了，尤其是使用Spring.io体系的：Controller，Service，Dao/Repository。为什么要分层？就是为了保证单一职责，数据模型的事情交给Controller，业务逻辑的事情交给Service，和数据打交道的事情就交给Dao/Repository。有时候或者有些人会分层分的更多，4层，5层，我自己也这样干过，说白了也是为了保证单一职责，3层不能满足单一职责了，耦合度高了，就分。</p>\n<p>我们都知道一个webapp在经过一定时间的开发后，就惨不忍睹，即便是有标准的分层，页面或模板文件一大堆，最初的很清晰的3层标准架构也变味了，Controller，Service，Dao/Repository各层之间、Service之间、Dao/Repository之间互相调用，一团乱麻。这个时候没改一行代码都有可能一个老鼠害了一锅汤，bug就如同蚂蚁洞。</p>\n<h3 id=\"这些问题最后就造成：\"><a href=\"#这些问题最后就造成：\" class=\"headerlink\" title=\"这些问题最后就造成：\"></a>这些问题最后就造成：</h3><ul>\n<li>可扩展性灵活性差，出现性能问题</li>\n<li>业务变更和开发困难，维护成本很高，交付时间长</li>\n<li>回归测试量很大</li>\n<li>…</li>\n</ul>\n<p>为了解决这些问题，就需要时时刻刻清楚的记住“<strong>单一职责</strong>”，<strong>单一职责</strong>可以用到软件开发的任何地方。</p>\n<p>应该说职责分离来解耦是最常用最有效的架构方法，这能够很大限度的简化一切。</p>\n<h3 id=\"下面就从软件开发、设计、架构，以及重构-演进-进化，从小到大几个方面来说说单一职责：\"><a href=\"#下面就从软件开发、设计、架构，以及重构-演进-进化，从小到大几个方面来说说单一职责：\" class=\"headerlink\" title=\"下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说单一职责：\"></a>下面就从软件开发、设计、架构，以及重构/演进/进化，从小到大几个方面来说说<strong>单一职责</strong>：</h3><h2 id=\"类方法-函数\"><a href=\"#类方法-函数\" class=\"headerlink\" title=\"类方法/函数\"></a>类方法/函数</h2><p>这应该是最小的能体现<strong>单一职责</strong>的程序单元了。最熟悉的最典型的莫过于Helper/Utils类方法了，但这种类方法的特征很明显，也很容易遵循单一职责，99%以上的开发人员都可以做到。但不仅仅这样的类方法要遵循单一职责原则，每一个类方法都应该遵循<strong>单一职责</strong>原则，尤其是一些处理业务逻辑的类方法更要遵循<strong>单一职责</strong>原则，处理业务的类方法通常要配合类的单一职责原则进行，下节中讨论。</p>\n<p>因此，这也是为什么很多TL要求类方法代码行数保持在20行左右，其实就是为了保证单一职责，20行左右是一个<strong>经验粗略数字</strong>，当然，10行或者30行来完成类方法也是可以的。大部分单一职责的类方法用20行左右的代码就够了，如果超过20行就要考虑是否保证了单一职责了。那我们在<strong>迭代重构</strong>的过程中就要考虑拆分这样的类方法来保证单一职责。</p>\n<p>类方法的单一职责是最单纯的，很具体的，不惨杂任何额外信息，只关心输入、输出、和职责；一定要明确地定义类方法的职责，保证在迭代中不被错误的扩张，调用方错误的使用。</p>\n<h2 id=\"类-函数文件\"><a href=\"#类-函数文件\" class=\"headerlink\" title=\"类/函数文件\"></a>类/函数文件</h2><p>要用面向对象的设计方法，<strong>单一职责原则</strong>来定义类。开发人员一定要很好地理解“单一职责原则”，具有面向对象的抽象思维能力。</p>\n<p>当在迭代中一个类过于庞大或者快速膨胀，说明已经有坏味道了，这时候就需要考虑用单一职责原则或者面向对象的分析方法来重构和重新定义类了，通常就是要抽象和拆分类，否则将来会变成一个方法容器。</p>\n<p>把类比作一个人，她的职责就是完成自己职责范围内的事情，如果她什么事情都管，就叫多管闲事，可以想象她多管闲事的后果了，会搅得鸡犬不宁。同样，类也是，类如果多管闲事，那会搅得真个应用不稳定，漏洞百出，还很难修复。所以说定义一个类，要明确这个类的职责。使用面向对象的分析和设计方法，能很好地准确定义一个类的职责范围，通常就要用到封装、继承、多态和抽象等设计方法。</p>\n<h2 id=\"包结构-文件夹\"><a href=\"#包结构-文件夹\" class=\"headerlink\" title=\"包结构/文件夹\"></a>包结构/文件夹</h2><p>分层就是最常用的架构方法之一，分层具体体现在分包和分类，就是分门别类的意思。俗话说，物以类聚，人以群分。</p>\n<p>包结构在单一职责原则上是类的补充，职责范围进一步扩大。如果把一个类叫做一个人，那么包就是一个最小单位的团队，职责就是负责一类特定事情。<br>如何分包呢？那就要用到分类学的知识了，要以什么特征来分，可能不仅仅只有一种特征，比如，先用公司域名来做基础包名，这里叫一级包名；然后再用一个特定的有意义的标识作为二级子包名；之后按分层（web,dao,service等等）方法做三级包名，也可以先按照业务再按分层。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">域名：tietang.wang</span><br><span class=\"line\">有个项目叫：social</span><br><span class=\"line\">那么我可以这样分：</span><br><span class=\"line\">wang.tietang</span><br><span class=\"line\">\t- social</span><br><span class=\"line\">\t\t- web</span><br><span class=\"line\">\t\t- service</span><br><span class=\"line\">\t\t- dao</span><br><span class=\"line\">\t\t- commons</span><br><span class=\"line\"></span><br><span class=\"line\">也可以这样：</span><br><span class=\"line\"></span><br><span class=\"line\">wang.tietang</span><br><span class=\"line\">\t- commons</span><br><span class=\"line\">\t- user</span><br><span class=\"line\">\t\t- web</span><br><span class=\"line\">\t\t- service</span><br><span class=\"line\">\t\t- dao</span><br><span class=\"line\">\t- relation</span><br><span class=\"line\">\t\t- web</span><br><span class=\"line\">\t\t- service</span><br><span class=\"line\">\t\t- dao</span><br></pre></td></tr></table></figure>\n<h2 id=\"多工程-module\"><a href=\"#多工程-module\" class=\"headerlink\" title=\"多工程/module\"></a>多工程/module</h2><p>通常以多maven module或者gradle 多module形式存在，来保证单一职责。<br>当业务量还没有达到服务拆分的火候，又需要规整项目结构，通常在一个app发展的太庞大时或者在工程建设初期采取，从文件系统上隔离，通过module依赖来集成。需要注意的是这样的架构或拆分不是随意的，要以单一职责原则来拆分，更具体一点就是要根据业务，技术框架功能等特性来拆分。</p>\n<p>比如，按技术组件拆分，通常会有一些技术组件，可以把她放到commons module，如果有多种类型的技术组件，就拆分为commons module的子module；也可以直接将这些技术组件拆分为独立的工程，存在于独立的git/svn仓库，独立管理，专人负责；其他哪些module需要就依赖她。那拆分的这些技术组件的每一个应该遵循单一职责原则，例如数据分片的框架，NIO基础网络框架等等。</p>\n<p>比如，按业务拆分，例如有用户，订单，商品，支付，那么就按照这些业务拆分为子module，每一个子module就只负责自己的业务逻辑，也遵循单一职责。</p>\n<p>那每个module的职责范围又比类和包更大，这个时候职责也更模糊，有时候很难把握，对于技术组件可能相对清晰，业务module就要熟悉业务，明确业务边界。</p>\n<p>多module拆分后也是为将来服务化埋下伏笔，同时在物理文件系统比较清晰了，那在依赖管理上也要掌握好保持清晰的依赖逻辑，把握好单一职责原则。</p>\n<h2 id=\"微服务-可部署单元\"><a href=\"#微服务-可部署单元\" class=\"headerlink\" title=\"微服务/可部署单元\"></a>微服务/可部署单元</h2><p>微服务，从运行时隔离，但业务量发展到一定时候，从单体或者多module工程拆分或演化出来，可独立打包可独立部署并复合单一原则的application，当然了微服务所体现的价值不仅仅是隔离和独立部署，还有很多这里可以参考<a href=\"http://www.infoq.com/cn/news/2015/04/single-app-micro-service\">单体应用与微服务优缺点辨析</a>。单一职责在微服务中的价值是最重要的，包含了app层面和开发app的团队层面，微服务的大部分优点都可以围绕单一职责来张开。</p>\n<h2 id=\"团队\"><a href=\"#团队\" class=\"headerlink\" title=\"团队\"></a>团队</h2><p>先引用《韩非子·扬权》中的一段文字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">夫物者有所宜，材者有所施，各处其宜，故上下无为。 </span><br><span class=\"line\">使鸡司夜，令狸执鼠，皆用其能，上乃无事。</span><br><span class=\"line\">上有所长，事乃不方。 </span><br><span class=\"line\">矜而好能，下之所欺：辩惠好生，下因其材。</span><br><span class=\"line\">上下易用，国故不治。</span><br></pre></td></tr></table></figure>\n<p><strong>参考：</strong></p>\n<ul>\n<li>原文：<a href=\"http://www.shici8.com/bookview_3501.html\">http://www.shici8.com/bookview_3501.html</a></li>\n<li>译文：<a href=\"http://www.shici8.com/article_8539.html\">http://www.shici8.com/article_8539.html</a></li>\n</ul>\n<p>各得其所，各司其职。所以，团队也要遵循单一职责原则，这样才能很好地管理团队成员的时间，提高效率。一个人专注做一件事情的效率远高于同时关注多件事情的。同样一个人一直管理和维护同一份代码要比多人同时维护多份代码的效率高很多。每一个人都有自己的个性，他有自己的擅长，让每一个人专注自己擅长的事情，那肯定事半功倍，整个团队绩效肯定也很突出。</p>\n<p>总之，引用古文名句说明了所有：</p>\n<ul>\n<li>物以类聚，人以群分。</li>\n<li>天下之事，分合交替，分久必合，合久必分！</li>\n<li>使鸡司夜，令狸执鼠，皆用其能，上乃无事。</li>\n</ul>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p> <a href=\"http://www.jianshu.com/p/f9d15827465d\">http://www.jianshu.com/p/f9d15827465d</a></p>\n<p> <a href=\"https://zh.wikipedia.org/wiki/单一功能原则\">https://zh.wikipedia.org/wiki/单一功能原则</a></p>\n"},{"title":"FlatBuffers简介","date":"2016-02-19T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG","_content":"\n## FlatBuffers简介\n\n代码：https://github.com/google/flatbuffers/\n\n文档：http://google.github.io/flatbuffers/\n\n\nFlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。\n\n\n\n### 支持的操作系统\n\n* Android\n* Windows\n* MacOS X\n* Linux\n\n\n### 目前支持的编程语言\n\n* C++\n* C#\n* Go\n* Java\n* JavaScript\n* PHP\n* Python\n\nand many more in progress...\n\n## 为什么要用FlatBuffers?\n\n+ **对序列化数据的访问不需要打包和拆包**——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；\n+ **内存效率和速度**——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；\n+ **扩展性、灵活性【多版本兼容】**——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；\n+ **最小代码依赖**——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；\n+ **强类型设计**——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；\n+ **使用简单**——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；\n+ **跨平台**——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；\n\n \n### 为什么不使用Protocol Buffers的，或者JSON\n\nProtocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。\n\nJSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。\n\n与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。http://google.github.io/flatbuffers/md__benchmarks.html\n\n\n\n \n ","source":"_posts/技术/FlatBuffers/FlatBuffers简介.md","raw":"---\ntitle: FlatBuffers简介\ndate: 2016-02-19 20:20:42\ncategories: \n\t- 技术\n\t- FlatBuffers\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG\ntags: \n\t- FlatBuffers\n\t- 序列化\n---\n\n## FlatBuffers简介\n\n代码：https://github.com/google/flatbuffers/\n\n文档：http://google.github.io/flatbuffers/\n\n\nFlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。\n\n\n\n### 支持的操作系统\n\n* Android\n* Windows\n* MacOS X\n* Linux\n\n\n### 目前支持的编程语言\n\n* C++\n* C#\n* Go\n* Java\n* JavaScript\n* PHP\n* Python\n\nand many more in progress...\n\n## 为什么要用FlatBuffers?\n\n+ **对序列化数据的访问不需要打包和拆包**——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；\n+ **内存效率和速度**——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；\n+ **扩展性、灵活性【多版本兼容】**——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；\n+ **最小代码依赖**——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；\n+ **强类型设计**——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；\n+ **使用简单**——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；\n+ **跨平台**——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；\n\n \n### 为什么不使用Protocol Buffers的，或者JSON\n\nProtocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。\n\nJSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。\n\n与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。http://google.github.io/flatbuffers/md__benchmarks.html\n\n\n\n \n ","slug":"技术/FlatBuffers/FlatBuffers简介","published":1,"updated":"2016-02-19T14:08:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2uz001phoinejmtxlmc","content":"<h2 id=\"FlatBuffers简介\"><a href=\"#FlatBuffers简介\" class=\"headerlink\" title=\"FlatBuffers简介\"></a>FlatBuffers简介</h2><p>代码：<a href=\"https://github.com/google/flatbuffers/\" target=\"_blank\" rel=\"external\">https://github.com/google/flatbuffers/</a></p>\n<p>文档：<a href=\"http://google.github.io/flatbuffers/\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/</a></p>\n<p>FlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。</p>\n<h3 id=\"支持的操作系统\"><a href=\"#支持的操作系统\" class=\"headerlink\" title=\"支持的操作系统\"></a>支持的操作系统</h3><ul>\n<li>Android</li>\n<li>Windows</li>\n<li>MacOS X</li>\n<li>Linux</li>\n</ul>\n<h3 id=\"目前支持的编程语言\"><a href=\"#目前支持的编程语言\" class=\"headerlink\" title=\"目前支持的编程语言\"></a>目前支持的编程语言</h3><ul>\n<li>C++</li>\n<li>C#</li>\n<li>Go</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Python</li>\n</ul>\n<p>and many more in progress…</p>\n<h2 id=\"为什么要用FlatBuffers\"><a href=\"#为什么要用FlatBuffers\" class=\"headerlink\" title=\"为什么要用FlatBuffers?\"></a>为什么要用FlatBuffers?</h2><ul>\n<li><strong>对序列化数据的访问不需要打包和拆包</strong>——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；</li>\n<li><strong>内存效率和速度</strong>——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；</li>\n<li><strong>扩展性、灵活性【多版本兼容】</strong>——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；</li>\n<li><strong>最小代码依赖</strong>——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；</li>\n<li><strong>强类型设计</strong>——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；</li>\n<li><strong>使用简单</strong>——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；</li>\n<li><strong>跨平台</strong>——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；</li>\n</ul>\n<h3 id=\"为什么不使用Protocol-Buffers的，或者JSON\"><a href=\"#为什么不使用Protocol-Buffers的，或者JSON\" class=\"headerlink\" title=\"为什么不使用Protocol Buffers的，或者JSON\"></a>为什么不使用Protocol Buffers的，或者JSON</h3><p>Protocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。</p>\n<p>JSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。</p>\n<p>与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。<a href=\"http://google.github.io/flatbuffers/md__benchmarks.html\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/md__benchmarks.html</a></p>\n","excerpt":"","more":"<h2 id=\"FlatBuffers简介\"><a href=\"#FlatBuffers简介\" class=\"headerlink\" title=\"FlatBuffers简介\"></a>FlatBuffers简介</h2><p>代码：<a href=\"https://github.com/google/flatbuffers/\">https://github.com/google/flatbuffers/</a></p>\n<p>文档：<a href=\"http://google.github.io/flatbuffers/\">http://google.github.io/flatbuffers/</a></p>\n<p>FlatBuffers是一个开源的、跨平台的、高效的、提供了C++/Java接口的序列化工具库。它是Google专门为游戏开发或其他性能敏感的应用程序需求而创建。 允许在不解析和解包就可以直接访问序列化数据，而且仍然很好地向上和向下兼容，这意味着序列化对象可以多版本共存。</p>\n<h3 id=\"支持的操作系统\"><a href=\"#支持的操作系统\" class=\"headerlink\" title=\"支持的操作系统\"></a>支持的操作系统</h3><ul>\n<li>Android</li>\n<li>Windows</li>\n<li>MacOS X</li>\n<li>Linux</li>\n</ul>\n<h3 id=\"目前支持的编程语言\"><a href=\"#目前支持的编程语言\" class=\"headerlink\" title=\"目前支持的编程语言\"></a>目前支持的编程语言</h3><ul>\n<li>C++</li>\n<li>C#</li>\n<li>Go</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Python</li>\n</ul>\n<p>and many more in progress…</p>\n<h2 id=\"为什么要用FlatBuffers\"><a href=\"#为什么要用FlatBuffers\" class=\"headerlink\" title=\"为什么要用FlatBuffers?\"></a>为什么要用FlatBuffers?</h2><ul>\n<li><strong>对序列化数据的访问不需要打包和拆包</strong>——它将序列化数据存储在缓存中，这些数据既可以存储在文件中，又可以通过网络原样传输，而没有任何解析开销；</li>\n<li><strong>内存效率和速度</strong>——访问数据时的唯一内存需求就是缓冲区，不需要额外的内存分配。 这里可查看详细的基准测试；</li>\n<li><strong>扩展性、灵活性【多版本兼容】</strong>——它支持的可选字段意味着不仅能获得很好的前向/后向兼容性（对于长生命周期的游戏来说尤其重要，因为不需要每个新版本都更新所有数据）；</li>\n<li><strong>最小代码依赖</strong>——仅仅需要自动生成的少量代码和一个单一的头文件依赖，很容易集成到现有系统中。再次，看基准部分细节；</li>\n<li><strong>强类型设计</strong>——尽可能使错误出现在编译期，而不是等到运行期才手动检查和修正；</li>\n<li><strong>使用简单</strong>——生成的C++代码提供了简单的访问和构造接口；而且如果需要，通过一个可选功能可以用来在运行时高效解析Schema和类JSON格式的文本；</li>\n<li><strong>跨平台</strong>——支持C++11、Java，而不需要任何依赖库；在最新的gcc、clang、vs2010等编译器上工作良好；</li>\n</ul>\n<h3 id=\"为什么不使用Protocol-Buffers的，或者JSON\"><a href=\"#为什么不使用Protocol-Buffers的，或者JSON\" class=\"headerlink\" title=\"为什么不使用Protocol Buffers的，或者JSON\"></a>为什么不使用Protocol Buffers的，或者JSON</h3><p>Protocol Buffers的确和FlatBuffers比较类似，但其主要区别在于FlatBuffers在访问数据前不需要解析/拆包这一步。 而且Protocol Buffers既没有可选的文本导入/导出功能，也没有Schemas语法特性（比如union）。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可。</p>\n<p>JSON的可读性很好，而且当和动态类型语言（如JavaScript）一起使用时非常方便。然而在静态类型语言中序列化数据时，JSON不但具有运行效率低的明显缺点，而且会让你写更多的代码来访问数据（这个与直觉相反）。</p>\n<p>与Protocol Buffers或JSON Parsing这样的可选方案相比，FlatBuffers的优势在于开销更小，这主要是由于它没有解析过程。<a href=\"http://google.github.io/flatbuffers/md__benchmarks.html\">http://google.github.io/flatbuffers/md__benchmarks.html</a></p>\n"},{"title":"FlatBuffers 使用指南","date":"2016-02-19T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122224.JPG","_content":"\n# FlatBuffers 使用指南\n\nFlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍\n\n## 编译源码\n\n```\n$ git clone https://github.com/google/flatbuffers.git\n#切换到最新release版本\n$ git checkout v1.2.0\n```\n\n### 安装cmake \n\nhttp://www.cmake.org.\n\n```\nfor mac osx\n$ brew install cmake\nfor centOS\n$ sudo yum install cmake\n```\n\n### 用cmake构建project\n\n```\ncmake -G \"Unix Makefiles\"\ncmake -G \"Visual Studio 10\"\ncmake -G \"Xcode\"\n```\n在*nix系统，mac osx系统也建议使用 `cmake -G \"Unix Makefiles\"`，生成`Makefile`,之后`make & make install`\n编译生成`flatc`并安装到系统。\n\n```\n$ cmake -G \"Unix Makefiles\"\n$ make\n$ make insall\n\n```\n\n\n## 使用schema编译器flatc来生成基础代码\n\n```\n$ cd samples\n#在目录src中生成java代码\n$flatc -j -o src monster.fbs \n\n```\n\n### 编程语言参数:\n\n+ --cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).\n+ --java, -j : Generate Java code.\n+ --csharp, -n : Generate C# code.\n+ --go, -g : Generate Go code.\n+ --python, -p: Generate Python code.\n+ --javascript, -s: Generate JavaScript code.\n+ --php: Generate PHP code.\n\n### 其他常用选项：\n\n+ -o PATH 指定源码输出目录\n+ -I PATH 有include语句时，指定include目录\n\n\n# 完整的参数\n\n```\nusage: flatc [OPTION]... FILE... [-- FILE...]\n  -b              Generate wire format binaries for any data definitions.\n  -t              Generate text output for any data definitions.\n  -c              Generate C++ headers for tables/structs.\n  -g              Generate Go files for tables/structs.\n  -j              Generate Java classes for tables/structs.\n  -s              Generate JavaScript code for tables/structs.\n  -n              Generate C# classes for tables/structs.\n  -p              Generate Python files for tables/structs.\n  -o PATH         Prefix PATH to all generated files.\n  -I PATH         Search for includes in the specified path.\n  -M              Print make rules for generated files.\n  --strict-json   Strict JSON: field names must be / will be quoted,\n                  no trailing commas in tables/vectors.\n  --defaults-json Output fields whose value is the default when\n                  writing JSON\n  --no-prefix     Don't prefix enum values with the enum type in C++.\n  --scoped-enums  Use C++11 style scoped and strongly typed enums.\n                  also implies --no-prefix.\n  --gen-includes  (deprecated), this is the default behavior.\n                  If the original behavior is required (no include\n                  statements) use --no-includes.\n  --no-includes   Don't generate include statements for included\n                  schemas the generated file depends on (C++).\n  --gen-mutable   Generate accessors that can mutate buffers in-place.\n  --gen-onefile   Generate single output file for C#\n  --raw-binary    Allow binaries without file_indentifier to be read.\n                  This may crash flatc given a mismatched schema.\n  --proto         Input is a .proto, translate to .fbs.\n  --schema        Serialize schemas instead of JSON (use with -b)\nFILEs may depend on declarations in earlier files.\nFILEs after the -- must be binary flatbuffer format files.\nOutput files are named using the base file name of the input,\nand written to the current directory or the path given by -o.\nexample: flatc -c -b schema1.fbs schema2.fbs data.json\n```\n\n## 写schema IDL文件\n\n参考：http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\n","source":"_posts/技术/FlatBuffers/FlatBuffers使用指南.md","raw":"---\ntitle: FlatBuffers 使用指南\ndate: 2016-02-19 20:20:42\ncategories: \n\t- 技术\n\t- FlatBuffers\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/IMG_20160218_122224.JPG\ntags: \n\t- FlatBuffers\n\t- 序列化\n---\n\n# FlatBuffers 使用指南\n\nFlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍\n\n## 编译源码\n\n```\n$ git clone https://github.com/google/flatbuffers.git\n#切换到最新release版本\n$ git checkout v1.2.0\n```\n\n### 安装cmake \n\nhttp://www.cmake.org.\n\n```\nfor mac osx\n$ brew install cmake\nfor centOS\n$ sudo yum install cmake\n```\n\n### 用cmake构建project\n\n```\ncmake -G \"Unix Makefiles\"\ncmake -G \"Visual Studio 10\"\ncmake -G \"Xcode\"\n```\n在*nix系统，mac osx系统也建议使用 `cmake -G \"Unix Makefiles\"`，生成`Makefile`,之后`make & make install`\n编译生成`flatc`并安装到系统。\n\n```\n$ cmake -G \"Unix Makefiles\"\n$ make\n$ make insall\n\n```\n\n\n## 使用schema编译器flatc来生成基础代码\n\n```\n$ cd samples\n#在目录src中生成java代码\n$flatc -j -o src monster.fbs \n\n```\n\n### 编程语言参数:\n\n+ --cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).\n+ --java, -j : Generate Java code.\n+ --csharp, -n : Generate C# code.\n+ --go, -g : Generate Go code.\n+ --python, -p: Generate Python code.\n+ --javascript, -s: Generate JavaScript code.\n+ --php: Generate PHP code.\n\n### 其他常用选项：\n\n+ -o PATH 指定源码输出目录\n+ -I PATH 有include语句时，指定include目录\n\n\n# 完整的参数\n\n```\nusage: flatc [OPTION]... FILE... [-- FILE...]\n  -b              Generate wire format binaries for any data definitions.\n  -t              Generate text output for any data definitions.\n  -c              Generate C++ headers for tables/structs.\n  -g              Generate Go files for tables/structs.\n  -j              Generate Java classes for tables/structs.\n  -s              Generate JavaScript code for tables/structs.\n  -n              Generate C# classes for tables/structs.\n  -p              Generate Python files for tables/structs.\n  -o PATH         Prefix PATH to all generated files.\n  -I PATH         Search for includes in the specified path.\n  -M              Print make rules for generated files.\n  --strict-json   Strict JSON: field names must be / will be quoted,\n                  no trailing commas in tables/vectors.\n  --defaults-json Output fields whose value is the default when\n                  writing JSON\n  --no-prefix     Don't prefix enum values with the enum type in C++.\n  --scoped-enums  Use C++11 style scoped and strongly typed enums.\n                  also implies --no-prefix.\n  --gen-includes  (deprecated), this is the default behavior.\n                  If the original behavior is required (no include\n                  statements) use --no-includes.\n  --no-includes   Don't generate include statements for included\n                  schemas the generated file depends on (C++).\n  --gen-mutable   Generate accessors that can mutate buffers in-place.\n  --gen-onefile   Generate single output file for C#\n  --raw-binary    Allow binaries without file_indentifier to be read.\n                  This may crash flatc given a mismatched schema.\n  --proto         Input is a .proto, translate to .fbs.\n  --schema        Serialize schemas instead of JSON (use with -b)\nFILEs may depend on declarations in earlier files.\nFILEs after the -- must be binary flatbuffer format files.\nOutput files are named using the base file name of the input,\nand written to the current directory or the path given by -o.\nexample: flatc -c -b schema1.fbs schema2.fbs data.json\n```\n\n## 写schema IDL文件\n\n参考：http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\n","slug":"技术/FlatBuffers/FlatBuffers使用指南","published":1,"updated":"2016-02-19T13:42:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2v1001qhoin4nu0w2kk","content":"<h1 id=\"FlatBuffers-使用指南\"><a href=\"#FlatBuffers-使用指南\" class=\"headerlink\" title=\"FlatBuffers 使用指南\"></a>FlatBuffers 使用指南</h1><p>FlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍</p>\n<h2 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/google/flatbuffers.git</span><br><span class=\"line\">#切换到最新release版本</span><br><span class=\"line\">$ git checkout v1.2.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装cmake\"><a href=\"#安装cmake\" class=\"headerlink\" title=\"安装cmake\"></a>安装cmake</h3><p><a href=\"http://www.cmake.org\" target=\"_blank\" rel=\"external\">http://www.cmake.org</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for mac osx</span><br><span class=\"line\">$ brew install cmake</span><br><span class=\"line\">for centOS</span><br><span class=\"line\">$ sudo yum install cmake</span><br></pre></td></tr></table></figure>\n<h3 id=\"用cmake构建project\"><a href=\"#用cmake构建project\" class=\"headerlink\" title=\"用cmake构建project\"></a>用cmake构建project</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -G &quot;Unix Makefiles&quot;</span><br><span class=\"line\">cmake -G &quot;Visual Studio 10&quot;</span><br><span class=\"line\">cmake -G &quot;Xcode&quot;</span><br></pre></td></tr></table></figure>\n<p>在*nix系统，mac osx系统也建议使用 <code>cmake -G &quot;Unix Makefiles&quot;</code>，生成<code>Makefile</code>,之后<code>make &amp; make install</code><br>编译生成<code>flatc</code>并安装到系统。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake -G &quot;Unix Makefiles&quot;</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ make insall</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用schema编译器flatc来生成基础代码\"><a href=\"#使用schema编译器flatc来生成基础代码\" class=\"headerlink\" title=\"使用schema编译器flatc来生成基础代码\"></a>使用schema编译器flatc来生成基础代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd samples</span><br><span class=\"line\">#在目录src中生成java代码</span><br><span class=\"line\">$flatc -j -o src monster.fbs</span><br></pre></td></tr></table></figure>\n<h3 id=\"编程语言参数\"><a href=\"#编程语言参数\" class=\"headerlink\" title=\"编程语言参数:\"></a>编程语言参数:</h3><ul>\n<li>–cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).</li>\n<li>–java, -j : Generate Java code.</li>\n<li>–csharp, -n : Generate C# code.</li>\n<li>–go, -g : Generate Go code.</li>\n<li>–python, -p: Generate Python code.</li>\n<li>–javascript, -s: Generate JavaScript code.</li>\n<li>–php: Generate PHP code.</li>\n</ul>\n<h3 id=\"其他常用选项：\"><a href=\"#其他常用选项：\" class=\"headerlink\" title=\"其他常用选项：\"></a>其他常用选项：</h3><ul>\n<li>-o PATH 指定源码输出目录</li>\n<li>-I PATH 有include语句时，指定include目录</li>\n</ul>\n<h1 id=\"完整的参数\"><a href=\"#完整的参数\" class=\"headerlink\" title=\"完整的参数\"></a>完整的参数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: flatc [OPTION]... FILE... [-- FILE...]</span><br><span class=\"line\">  -b              Generate wire format binaries for any data definitions.</span><br><span class=\"line\">  -t              Generate text output for any data definitions.</span><br><span class=\"line\">  -c              Generate C++ headers for tables/structs.</span><br><span class=\"line\">  -g              Generate Go files for tables/structs.</span><br><span class=\"line\">  -j              Generate Java classes for tables/structs.</span><br><span class=\"line\">  -s              Generate JavaScript code for tables/structs.</span><br><span class=\"line\">  -n              Generate C# classes for tables/structs.</span><br><span class=\"line\">  -p              Generate Python files for tables/structs.</span><br><span class=\"line\">  -o PATH         Prefix PATH to all generated files.</span><br><span class=\"line\">  -I PATH         Search for includes in the specified path.</span><br><span class=\"line\">  -M              Print make rules for generated files.</span><br><span class=\"line\">  --strict-json   Strict JSON: field names must be / will be quoted,</span><br><span class=\"line\">                  no trailing commas in tables/vectors.</span><br><span class=\"line\">  --defaults-json Output fields whose value is the default when</span><br><span class=\"line\">                  writing JSON</span><br><span class=\"line\">  --no-prefix     Don&apos;t prefix enum values with the enum type in C++.</span><br><span class=\"line\">  --scoped-enums  Use C++11 style scoped and strongly typed enums.</span><br><span class=\"line\">                  also implies --no-prefix.</span><br><span class=\"line\">  --gen-includes  (deprecated), this is the default behavior.</span><br><span class=\"line\">                  If the original behavior is required (no include</span><br><span class=\"line\">                  statements) use --no-includes.</span><br><span class=\"line\">  --no-includes   Don&apos;t generate include statements for included</span><br><span class=\"line\">                  schemas the generated file depends on (C++).</span><br><span class=\"line\">  --gen-mutable   Generate accessors that can mutate buffers in-place.</span><br><span class=\"line\">  --gen-onefile   Generate single output file for C#</span><br><span class=\"line\">  --raw-binary    Allow binaries without file_indentifier to be read.</span><br><span class=\"line\">                  This may crash flatc given a mismatched schema.</span><br><span class=\"line\">  --proto         Input is a .proto, translate to .fbs.</span><br><span class=\"line\">  --schema        Serialize schemas instead of JSON (use with -b)</span><br><span class=\"line\">FILEs may depend on declarations in earlier files.</span><br><span class=\"line\">FILEs after the -- must be binary flatbuffer format files.</span><br><span class=\"line\">Output files are named using the base file name of the input,</span><br><span class=\"line\">and written to the current directory or the path given by -o.</span><br><span class=\"line\">example: flatc -c -b schema1.fbs schema2.fbs data.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"写schema-IDL文件\"><a href=\"#写schema-IDL文件\" class=\"headerlink\" title=\"写schema IDL文件\"></a>写schema IDL文件</h2><p>参考：<a href=\"http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\" target=\"_blank\" rel=\"external\">http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html</a></p>\n","excerpt":"","more":"<h1 id=\"FlatBuffers-使用指南\"><a href=\"#FlatBuffers-使用指南\" class=\"headerlink\" title=\"FlatBuffers 使用指南\"></a>FlatBuffers 使用指南</h1><p>FlatBuffers序列化性能是protobuf的2倍，但size也是protobuf的2倍</p>\n<h2 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/google/flatbuffers.git</span><br><span class=\"line\">#切换到最新release版本</span><br><span class=\"line\">$ git checkout v1.2.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装cmake\"><a href=\"#安装cmake\" class=\"headerlink\" title=\"安装cmake\"></a>安装cmake</h3><p><a href=\"http://www.cmake.org\">http://www.cmake.org</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for mac osx</span><br><span class=\"line\">$ brew install cmake</span><br><span class=\"line\">for centOS</span><br><span class=\"line\">$ sudo yum install cmake</span><br></pre></td></tr></table></figure>\n<h3 id=\"用cmake构建project\"><a href=\"#用cmake构建project\" class=\"headerlink\" title=\"用cmake构建project\"></a>用cmake构建project</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -G &quot;Unix Makefiles&quot;</span><br><span class=\"line\">cmake -G &quot;Visual Studio 10&quot;</span><br><span class=\"line\">cmake -G &quot;Xcode&quot;</span><br></pre></td></tr></table></figure>\n<p>在*nix系统，mac osx系统也建议使用 <code>cmake -G &quot;Unix Makefiles&quot;</code>，生成<code>Makefile</code>,之后<code>make &amp; make install</code><br>编译生成<code>flatc</code>并安装到系统。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake -G &quot;Unix Makefiles&quot;</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ make insall</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用schema编译器flatc来生成基础代码\"><a href=\"#使用schema编译器flatc来生成基础代码\" class=\"headerlink\" title=\"使用schema编译器flatc来生成基础代码\"></a>使用schema编译器flatc来生成基础代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd samples</span><br><span class=\"line\">#在目录src中生成java代码</span><br><span class=\"line\">$flatc -j -o src monster.fbs</span><br></pre></td></tr></table></figure>\n<h3 id=\"编程语言参数\"><a href=\"#编程语言参数\" class=\"headerlink\" title=\"编程语言参数:\"></a>编程语言参数:</h3><ul>\n<li>–cpp, -c : Generate a C++ header for all definitions in this file (as filename_generated.h).</li>\n<li>–java, -j : Generate Java code.</li>\n<li>–csharp, -n : Generate C# code.</li>\n<li>–go, -g : Generate Go code.</li>\n<li>–python, -p: Generate Python code.</li>\n<li>–javascript, -s: Generate JavaScript code.</li>\n<li>–php: Generate PHP code.</li>\n</ul>\n<h3 id=\"其他常用选项：\"><a href=\"#其他常用选项：\" class=\"headerlink\" title=\"其他常用选项：\"></a>其他常用选项：</h3><ul>\n<li>-o PATH 指定源码输出目录</li>\n<li>-I PATH 有include语句时，指定include目录</li>\n</ul>\n<h1 id=\"完整的参数\"><a href=\"#完整的参数\" class=\"headerlink\" title=\"完整的参数\"></a>完整的参数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: flatc [OPTION]... FILE... [-- FILE...]</span><br><span class=\"line\">  -b              Generate wire format binaries for any data definitions.</span><br><span class=\"line\">  -t              Generate text output for any data definitions.</span><br><span class=\"line\">  -c              Generate C++ headers for tables/structs.</span><br><span class=\"line\">  -g              Generate Go files for tables/structs.</span><br><span class=\"line\">  -j              Generate Java classes for tables/structs.</span><br><span class=\"line\">  -s              Generate JavaScript code for tables/structs.</span><br><span class=\"line\">  -n              Generate C# classes for tables/structs.</span><br><span class=\"line\">  -p              Generate Python files for tables/structs.</span><br><span class=\"line\">  -o PATH         Prefix PATH to all generated files.</span><br><span class=\"line\">  -I PATH         Search for includes in the specified path.</span><br><span class=\"line\">  -M              Print make rules for generated files.</span><br><span class=\"line\">  --strict-json   Strict JSON: field names must be / will be quoted,</span><br><span class=\"line\">                  no trailing commas in tables/vectors.</span><br><span class=\"line\">  --defaults-json Output fields whose value is the default when</span><br><span class=\"line\">                  writing JSON</span><br><span class=\"line\">  --no-prefix     Don&apos;t prefix enum values with the enum type in C++.</span><br><span class=\"line\">  --scoped-enums  Use C++11 style scoped and strongly typed enums.</span><br><span class=\"line\">                  also implies --no-prefix.</span><br><span class=\"line\">  --gen-includes  (deprecated), this is the default behavior.</span><br><span class=\"line\">                  If the original behavior is required (no include</span><br><span class=\"line\">                  statements) use --no-includes.</span><br><span class=\"line\">  --no-includes   Don&apos;t generate include statements for included</span><br><span class=\"line\">                  schemas the generated file depends on (C++).</span><br><span class=\"line\">  --gen-mutable   Generate accessors that can mutate buffers in-place.</span><br><span class=\"line\">  --gen-onefile   Generate single output file for C#</span><br><span class=\"line\">  --raw-binary    Allow binaries without file_indentifier to be read.</span><br><span class=\"line\">                  This may crash flatc given a mismatched schema.</span><br><span class=\"line\">  --proto         Input is a .proto, translate to .fbs.</span><br><span class=\"line\">  --schema        Serialize schemas instead of JSON (use with -b)</span><br><span class=\"line\">FILEs may depend on declarations in earlier files.</span><br><span class=\"line\">FILEs after the -- must be binary flatbuffer format files.</span><br><span class=\"line\">Output files are named using the base file name of the input,</span><br><span class=\"line\">and written to the current directory or the path given by -o.</span><br><span class=\"line\">example: flatc -c -b schema1.fbs schema2.fbs data.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"写schema-IDL文件\"><a href=\"#写schema-IDL文件\" class=\"headerlink\" title=\"写schema IDL文件\"></a>写schema IDL文件</h2><p>参考：<a href=\"http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\">http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html</a></p>\n"},{"title":"wrk基准测试工具安装使用","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60608-195617.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30","date":"2016-03-04T01:06:33.000Z","keywords":"基准测试,wrk","description":null,"_content":"\n\n\n\n## git\n\nhttps://github.com/wg/wrk\n\ngit clone https://github.com/wg/wrk.git\n\n## 安装\n\n在makefile中33行\nLDIR     = deps/luajit/src\nLIBS    := -lluajit $(LIBS)\nCFLAGS  += -I$(LDIR)\nLDFLAGS += -L$(LDIR)\n\n下面添加：\n\nLDFLAGS  +=  -L/usr/local/opt/openssl/lib\nCFLAGS += -I/usr/local/opt/openssl/include\n\n\nmake\n\n## 基本使用\n\nBasic Usage\n\n  wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 12 threads, and keeping\n  400 HTTP connections open.\n\n  Output:\n\n```\n  Running 30s test @ http://127.0.0.1:8080/index.html\n    12 threads and 400 connections\n    Thread Stats   Avg      Stdev     Max   +/- Stdev\n      Latency   635.91us    0.89ms  12.92ms   93.69%\n      Req/Sec    56.20k     8.07k   62.00k    86.54%\n    22464657 requests in 30.00s, 17.76GB read\n  Requests/sec: 748868.53\n  Transfer/sec:    606.33MB\n```\n\n## 参数说明\n\n```\n$ wrk\nUsage: wrk <options> <url>                            \n  Options:                                            \n    -c, --connections <N>  Connections to keep open   \n    -d, --duration    <T>  Duration of test           \n    -t, --threads     <N>  Number of threads to use   \n                                                      \n    -s, --script      <S>  Load Lua script file       \n    -H, --header      <H>  Add header to request      \n        --latency          Print latency statistics   \n        --timeout     <T>  Socket/request timeout     \n    -v, --version          Print version details      \n                                                      \n  Numeric arguments may include a SI unit (1k, 1M, 1G)\n  Time arguments may include a time unit (2s, 2m, 2h)\n  \n```\n\n\n","source":"_posts/技术/工具/wrk基准测试工具安装使用.md","raw":"---\ntitle: wrk基准测试工具安装使用\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/my-pic-P60608-195617.jpg?imageView2/1/w/800/h/600/q/75|watermark/2/text/Qnkg6ZOB5rGk/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/30/dy/30'\ndate: 2016-03-04 09:06:33\ncategories:\n\t- 技术\n\t- 工具\ntags:\n\t- 基准测试\n\t- wrk\nkeywords: 基准测试,wrk\ndescription:\n---\n\n\n\n\n## git\n\nhttps://github.com/wg/wrk\n\ngit clone https://github.com/wg/wrk.git\n\n## 安装\n\n在makefile中33行\nLDIR     = deps/luajit/src\nLIBS    := -lluajit $(LIBS)\nCFLAGS  += -I$(LDIR)\nLDFLAGS += -L$(LDIR)\n\n下面添加：\n\nLDFLAGS  +=  -L/usr/local/opt/openssl/lib\nCFLAGS += -I/usr/local/opt/openssl/include\n\n\nmake\n\n## 基本使用\n\nBasic Usage\n\n  wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 12 threads, and keeping\n  400 HTTP connections open.\n\n  Output:\n\n```\n  Running 30s test @ http://127.0.0.1:8080/index.html\n    12 threads and 400 connections\n    Thread Stats   Avg      Stdev     Max   +/- Stdev\n      Latency   635.91us    0.89ms  12.92ms   93.69%\n      Req/Sec    56.20k     8.07k   62.00k    86.54%\n    22464657 requests in 30.00s, 17.76GB read\n  Requests/sec: 748868.53\n  Transfer/sec:    606.33MB\n```\n\n## 参数说明\n\n```\n$ wrk\nUsage: wrk <options> <url>                            \n  Options:                                            \n    -c, --connections <N>  Connections to keep open   \n    -d, --duration    <T>  Duration of test           \n    -t, --threads     <N>  Number of threads to use   \n                                                      \n    -s, --script      <S>  Load Lua script file       \n    -H, --header      <H>  Add header to request      \n        --latency          Print latency statistics   \n        --timeout     <T>  Socket/request timeout     \n    -v, --version          Print version details      \n                                                      \n  Numeric arguments may include a SI unit (1k, 1M, 1G)\n  Time arguments may include a time unit (2s, 2m, 2h)\n  \n```\n\n\n","slug":"技术/工具/wrk基准测试工具安装使用","published":1,"updated":"2016-07-04T03:56:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2v4001shoinyu37uxov","content":"<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p><a href=\"https://github.com/wg/wrk\" target=\"_blank\" rel=\"external\">https://github.com/wg/wrk</a></p>\n<p>git clone <a href=\"https://github.com/wg/wrk.git\" target=\"_blank\" rel=\"external\">https://github.com/wg/wrk.git</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在makefile中33行<br>LDIR     = deps/luajit/src<br>LIBS    := -lluajit $(LIBS)<br>CFLAGS  += -I$(LDIR)<br>LDFLAGS += -L$(LDIR)</p>\n<p>下面添加：</p>\n<p>LDFLAGS  +=  -L/usr/local/opt/openssl/lib<br>CFLAGS += -I/usr/local/opt/openssl/include</p>\n<p>make</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>Basic Usage</p>\n<p>  wrk -t12 -c400 -d30s <a href=\"http://127.0.0.1:8080/index.html\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/index.html</a></p>\n<p>  This runs a benchmark for 30 seconds, using 12 threads, and keeping<br>  400 HTTP connections open.</p>\n<p>  Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running 30s test @ http://127.0.0.1:8080/index.html</span><br><span class=\"line\">  12 threads and 400 connections</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency   635.91us    0.89ms  12.92ms   93.69%</span><br><span class=\"line\">    Req/Sec    56.20k     8.07k   62.00k    86.54%</span><br><span class=\"line\">  22464657 requests in 30.00s, 17.76GB read</span><br><span class=\"line\">Requests/sec: 748868.53</span><br><span class=\"line\">Transfer/sec:    606.33MB</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wrk</span><br><span class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class=\"line\">  Options:                                            </span><br><span class=\"line\">    -c, --connections &lt;N&gt;  Connections to keep open   </span><br><span class=\"line\">    -d, --duration    &lt;T&gt;  Duration of test           </span><br><span class=\"line\">    -t, --threads     &lt;N&gt;  Number of threads to use   </span><br><span class=\"line\">                                                      </span><br><span class=\"line\">    -s, --script      &lt;S&gt;  Load Lua script file       </span><br><span class=\"line\">    -H, --header      &lt;H&gt;  Add header to request      </span><br><span class=\"line\">        --latency          Print latency statistics   </span><br><span class=\"line\">        --timeout     &lt;T&gt;  Socket/request timeout     </span><br><span class=\"line\">    -v, --version          Print version details      </span><br><span class=\"line\">                                                      </span><br><span class=\"line\">  Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class=\"line\">  Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p><a href=\"https://github.com/wg/wrk\">https://github.com/wg/wrk</a></p>\n<p>git clone <a href=\"https://github.com/wg/wrk.git\">https://github.com/wg/wrk.git</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在makefile中33行<br>LDIR     = deps/luajit/src<br>LIBS    := -lluajit $(LIBS)<br>CFLAGS  += -I$(LDIR)<br>LDFLAGS += -L$(LDIR)</p>\n<p>下面添加：</p>\n<p>LDFLAGS  +=  -L/usr/local/opt/openssl/lib<br>CFLAGS += -I/usr/local/opt/openssl/include</p>\n<p>make</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>Basic Usage</p>\n<p>  wrk -t12 -c400 -d30s <a href=\"http://127.0.0.1:8080/index.html\">http://127.0.0.1:8080/index.html</a></p>\n<p>  This runs a benchmark for 30 seconds, using 12 threads, and keeping<br>  400 HTTP connections open.</p>\n<p>  Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running 30s test @ http://127.0.0.1:8080/index.html</span><br><span class=\"line\">  12 threads and 400 connections</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency   635.91us    0.89ms  12.92ms   93.69%</span><br><span class=\"line\">    Req/Sec    56.20k     8.07k   62.00k    86.54%</span><br><span class=\"line\">  22464657 requests in 30.00s, 17.76GB read</span><br><span class=\"line\">Requests/sec: 748868.53</span><br><span class=\"line\">Transfer/sec:    606.33MB</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wrk</span><br><span class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;                            </span><br><span class=\"line\">  Options:                                            </span><br><span class=\"line\">    -c, --connections &lt;N&gt;  Connections to keep open   </span><br><span class=\"line\">    -d, --duration    &lt;T&gt;  Duration of test           </span><br><span class=\"line\">    -t, --threads     &lt;N&gt;  Number of threads to use   </span><br><span class=\"line\">                                                      </span><br><span class=\"line\">    -s, --script      &lt;S&gt;  Load Lua script file       </span><br><span class=\"line\">    -H, --header      &lt;H&gt;  Add header to request      </span><br><span class=\"line\">        --latency          Print latency statistics   </span><br><span class=\"line\">        --timeout     &lt;T&gt;  Socket/request timeout     </span><br><span class=\"line\">    -v, --version          Print version details      </span><br><span class=\"line\">                                                      </span><br><span class=\"line\">  Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class=\"line\">  Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure>\n"},{"title":"Hexo命令速记","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-21T14:31:12.000Z","_content":"\n## 简写\n\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n```\n\n## 服务器\n\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\nhexo d -g #部署前先生成今天网页\n```\n\n## 监视文件变动\n\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n```\n## 完成后部署\n\n```\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n```\n\n## 模版\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n```\n\n变量 | 描述\n--- | ---\nlayout | 布局\ntitle\t| 标题\ndate\t| 文件建立日期\n\n\n\n```\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n常用指令\n---\n\n## 安装升级\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \n```\n\n## init\n\n``` bash\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n## new\n\n``` bash\n$ hexo new [layout] <title>\n$ hexo n [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](configuration.html) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n\n\n## generate\n\n``` bash\n$ hexo generate\n```\n\n生成静态文件。\n\n选项 | 描述\n--- | ---\n`-d`, `--deploy` | 文件生成后立即部署网站\n`-w`, `--watch` | 监视文件变动\n\n## publish\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n``` bash\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n选项 | 描述\n--- | ---\n`-p`, `--port` | 重设端口\n`-s`, `--static` | 只使用静态文件\n`-l`, `--log` | 启动日记记录，使用覆盖记录格式\n\n## deploy\n\n``` bash\n$ hexo deploy\n```\n\n部署网站。\n\n参数 | 描述\n--- | ---\n`-g`, `--generate` | 部署之前预先生成静态文件\n\n## render\n\n``` bash\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n参数 | 描述\n--- | ---\n`-o`, `--output` | 设置输出路径\n\n## migrate\n\n``` bash\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](migration.html)。\n\n## clean\n\n``` bash\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n## list\n\n``` bash\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n``` bash\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n``` bash\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n``` bash\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n``` bash\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n``` bash\n$ hexo --config custom.yml\n```\n\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n### 显示草稿\n\n``` bash\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n``` bash\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n\n\n\n","source":"_posts/技术/Hexo/Hexo命令速记.md","raw":"---\ntitle: Hexo命令速记\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG\ndate: 2016-02-21 22:31:12\ncategories: \n\t- 技术\n\t- Hexo\ntags:\n\t- Hexo\n---\n\n## 简写\n\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n\n```\n\n## 服务器\n\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\nhexo d -g #部署前先生成今天网页\n```\n\n## 监视文件变动\n\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n```\n## 完成后部署\n\n```\n两个命令的作用是相同的\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n```\n\n## 模版\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n```\n\n变量 | 描述\n--- | ---\nlayout | 布局\ntitle\t| 标题\ndate\t| 文件建立日期\n\n\n\n```\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n常用指令\n---\n\n## 安装升级\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \n```\n\n## init\n\n``` bash\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n## new\n\n``` bash\n$ hexo new [layout] <title>\n$ hexo n [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](configuration.html) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n\n\n## generate\n\n``` bash\n$ hexo generate\n```\n\n生成静态文件。\n\n选项 | 描述\n--- | ---\n`-d`, `--deploy` | 文件生成后立即部署网站\n`-w`, `--watch` | 监视文件变动\n\n## publish\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n``` bash\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n选项 | 描述\n--- | ---\n`-p`, `--port` | 重设端口\n`-s`, `--static` | 只使用静态文件\n`-l`, `--log` | 启动日记记录，使用覆盖记录格式\n\n## deploy\n\n``` bash\n$ hexo deploy\n```\n\n部署网站。\n\n参数 | 描述\n--- | ---\n`-g`, `--generate` | 部署之前预先生成静态文件\n\n## render\n\n``` bash\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n参数 | 描述\n--- | ---\n`-o`, `--output` | 设置输出路径\n\n## migrate\n\n``` bash\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](migration.html)。\n\n## clean\n\n``` bash\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n## list\n\n``` bash\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n``` bash\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n``` bash\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n``` bash\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n``` bash\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n``` bash\n$ hexo --config custom.yml\n```\n\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n### 显示草稿\n\n``` bash\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n``` bash\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n\n\n\n","slug":"技术/Hexo/Hexo命令速记","published":1,"updated":"2016-07-04T03:53:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2v6001uhoiniaeciwl4","content":"<h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate#生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\">hexo g #生成静态网页</span><br><span class=\"line\">hexo d #开始部署</span><br><span class=\"line\">hexo d -g #部署前先生成今天网页</span><br></pre></td></tr></table></figure>\n<h2 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class=\"line\">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure>\n<h2 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个命令的作用是相同的</span><br><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">hexo new photo &quot;My Gallery&quot;</span><br><span class=\"line\">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: post</span><br><span class=\"line\">date: 2014-03-03 19:07:43</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Blog</span><br><span class=\"line\">tags: [Hexo]</span><br><span class=\"line\">keywords: Hexo, Blog</span><br><span class=\"line\">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h2 id=\"安装升级\"><a href=\"#安装升级\" class=\"headerlink\" title=\"安装升级\"></a>安装升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装  </span><br><span class=\"line\">npm update hexo -g #升级</span><br></pre></td></tr></table></figure>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">$ hexo n [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"configuration.html\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"migration.html\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"external\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","excerpt":"","more":"<h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate#生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\">hexo g #生成静态网页</span><br><span class=\"line\">hexo d #开始部署</span><br><span class=\"line\">hexo d -g #部署前先生成今天网页</span><br></pre></td></tr></table></figure>\n<h2 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class=\"line\">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure>\n<h2 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个命令的作用是相同的</span><br><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">hexo new photo &quot;My Gallery&quot;</span><br><span class=\"line\">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: post</span><br><span class=\"line\">date: 2014-03-03 19:07:43</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Blog</span><br><span class=\"line\">tags: [Hexo]</span><br><span class=\"line\">keywords: Hexo, Blog</span><br><span class=\"line\">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h2 id=\"安装升级\"><a href=\"#安装升级\" class=\"headerlink\" title=\"安装升级\"></a>安装升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装  </span><br><span class=\"line\">npm update hexo -g #升级</span><br></pre></td></tr></table></figure>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">$ hexo n [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"configuration.html\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"migration.html\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;<span class=\"built_in\">type</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n"},{"title":"领域模型的价值","date":"2016-02-21T12:20:42.000Z","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG","_content":"\n\n## 价值\n\n+ 提供什么服务：\n\t+ 什么来体现服务：运行方式，运行过程和业务逻辑\n+ 提供的质量：如何服务，要做的事情\n\n## 传统数据库为中心\n\n业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。\n以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。\n\n## OO|面向对象\n\n表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中\n逻辑直接存在于对象上﹐这与现实情况是吻合的。\n\n领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。\n\n在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。\n\n## 领域模型的特点\n\n1. 领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；\n　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；\n　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；\n　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；\n　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；\n　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；\n　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；\n　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。","source":"_posts/技术/领域模型/领域模型的价值.md","raw":"---\ntitle: 领域模型的价值\ndate: 2016-02-21 20:20:42\ncategories: \n\t- 技术\n\t- 领域模型\nthumbnail: http://7xiovs.com1.z0.glb.clouddn.com/DPP_00032.JPG\ntags: \n\t- 领域模型\n\t- DDD\n---\n\n\n## 价值\n\n+ 提供什么服务：\n\t+ 什么来体现服务：运行方式，运行过程和业务逻辑\n+ 提供的质量：如何服务，要做的事情\n\n## 传统数据库为中心\n\n业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。\n以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。\n\n## OO|面向对象\n\n表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中\n逻辑直接存在于对象上﹐这与现实情况是吻合的。\n\n领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。\n\n在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。\n\n## 领域模型的特点\n\n1. 领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；\n　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；\n　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；\n　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；\n　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；\n　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；\n　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；\n　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。","slug":"技术/领域模型/领域模型的价值","published":1,"updated":"2016-02-21T15:57:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2v7001whoindp9wbfgl","content":"<h2 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h2><ul>\n<li>提供什么服务：<ul>\n<li>什么来体现服务：运行方式，运行过程和业务逻辑</li>\n</ul>\n</li>\n<li>提供的质量：如何服务，要做的事情</li>\n</ul>\n<h2 id=\"传统数据库为中心\"><a href=\"#传统数据库为中心\" class=\"headerlink\" title=\"传统数据库为中心\"></a>传统数据库为中心</h2><p>业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。<br>以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。</p>\n<h2 id=\"OO-面向对象\"><a href=\"#OO-面向对象\" class=\"headerlink\" title=\"OO|面向对象\"></a>OO|面向对象</h2><p>表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中<br>逻辑直接存在于对象上﹐这与现实情况是吻合的。</p>\n<p>领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。</p>\n<p>在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。</p>\n<h2 id=\"领域模型的特点\"><a href=\"#领域模型的特点\" class=\"headerlink\" title=\"领域模型的特点\"></a>领域模型的特点</h2><ol>\n<li>领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；<br>　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；<br>　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；<br>　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；<br>　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；<br>　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；<br>　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；<br>　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"价值\"><a href=\"#价值\" class=\"headerlink\" title=\"价值\"></a>价值</h2><ul>\n<li>提供什么服务：<ul>\n<li>什么来体现服务：运行方式，运行过程和业务逻辑</li>\n</ul>\n</li>\n<li>提供的质量：如何服务，要做的事情</li>\n</ul>\n<h2 id=\"传统数据库为中心\"><a href=\"#传统数据库为中心\" class=\"headerlink\" title=\"传统数据库为中心\"></a>传统数据库为中心</h2><p>业务逻辑在数据库上，结合系统代码来保证业务逻辑的实现。<br>以数据库为中心的开发如何的OO﹐如何多的设计模式﹐架构体系如何优美﹐它始终离不开数据库。</p>\n<h2 id=\"OO-面向对象\"><a href=\"#OO-面向对象\" class=\"headerlink\" title=\"OO|面向对象\"></a>OO|面向对象</h2><p>表现点则是直接在对象本身上﹐在于对象之间真正的交互过程﹐结果也是保留在对象的属性和对象与对象的关系中<br>逻辑直接存在于对象上﹐这与现实情况是吻合的。</p>\n<p>领域模型是一种思维﹐是一种方法,是在系统分析阶段使用﹐而不是在代码中进行纯设计时的工具。不是为了OO而领域﹐不是为了最终要新增数据库而领域。在没有理解领域模型本质时，任何编码都得不到收益。</p>\n<p>在分析或架构一个系统时，要得出系统的服务和服务场景，即user case。</p>\n<h2 id=\"领域模型的特点\"><a href=\"#领域模型的特点\" class=\"headerlink\" title=\"领域模型的特点\"></a>领域模型的特点</h2><ol>\n<li>领域模型是对具有某个边界的领域的一个抽象，反映了领域内用户业务需求的本质；领域模型是有边界的，只反应了我们在领域内所关注的部分；<br>　　2. 领域模型只反映业务，和任何技术实现无关；领域模型不仅能反映领域中的一些实体概念，如货物、书本、应聘记录、地址等；还能反映领域中的一些过程概念，如资金转账，等；<br>　　3. 领域模型确保了我们的软件的业务逻辑都在一个模型中，都在一个地方；这样对提高软件的可维护性，业务可理解性以及可重用性方面都有很好的帮助；<br>　　4. 领域模型能够帮助开发人员相对平滑地将领域知识转化为软件构造；<br>　　5. 领域模型贯穿软件分析、设计，以及开发的整个过程；领域专家、设计人员、开发人员通过领域模型进行交流，彼此共享知识与信息；因为大家面向的都是同一个模型，所以可以防止需求走样，可以让软件设计开发人员做出来的软件真正满足需求；<br>　　6. 要建立正确的领域模型并不简单，需要领域专家、设计、开发人员积极沟通共同努力，然后才能使大家对领域的认识不断深入，从而不断细化和完善领域模型；<br>　　7. 为了让领域模型看的见，我们需要用一些方法来表示它；图是表达领域模型最常用的方式，但不是唯一的表达方式，代码或文字描述也能表达领域模型；<br>　　8. 领域模型是整个软件的核心，是软件中最有价值和最具竞争力的部分；设计足够精良且符合业务需求的领域模型能够更快速的响应需求变化。</li>\n</ol>\n"},{"title":"装载：HTTP2.0的奇妙日常","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG","date":"2016-02-22T01:57:03.000Z","keywords":"HTTP2,HTTP2性能","description":"HTTP2.0性能增强的核心：二进制分帧；HTTP2.0 首部压缩；所有的HTTP2.0的请求都在一个TCP链接上；并行双向字节流的请求和响应；HTTP2.0的请求优先级；HTTP2.0的服务器推送；“十年前端，终归如初”","_content":"\n \n转载自AlloyTeam：http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\n\n\n“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。\n    “我给你一个表情，你自己体会一下”![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg>)\n    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。\n但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。\n \n \n## HTTP2.0性能增强的核心：二进制分帧\n\nHTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。\n    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。\n    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。\n    \nhttp2.0\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg>)\n\n\n然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。\n \n  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。\n   \n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg>)\n    \n  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）\n    \n## HTTP2.0 首部压缩\n\n HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。\n    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。\n \n  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解\n  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也\n  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。\n\n   晨伯起来又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ \n \n\n## 所有的HTTP2.0的请求都在一个TCP链接上\n\n   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\n    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。\n\n   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：\n   \n   1. 可以减少服务链接压力,内存占用少了,连接吞吐量大了\n   2. 由于 TCP 连接减少而使网络拥塞状况得以改观;\n   3. 慢启动时间减少,拥塞和丢包恢复速度更快。\n \n**也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。**\n \n他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。\n“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。\n“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来\n当时我就有预感要![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，而晨伯总是按套路出牌….\n \n## 并行双向字节流的请求和响应\n\n   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg>)\n\n \n把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:\n \n可以并行交错地发送请求,请求之间互不影响;\n可以并行交错地发送响应,响应之间互不干扰;\n只使用一个连接即可并行发送多个请求和响应;\n消除不必要的延迟,从而减少页面加载的时间;\n \n那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。\n \n \n“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。\n晨伯又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)。我开始确信，这是多年后程序员的肢体礼仪方式。\n \n## HTTP2.0的请求优先级\n\n   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。\n \n“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。\n“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。\n  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。\n内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。\n \n \nHTTP2.0的服务器推送\n    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。\n当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。\n   \n   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。\n \n \n   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。\n \n到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png>)\n\n在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。\n这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。\n出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..\n \n \n \n \n \n \n参考：\nhttp://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\nhttps://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/","source":"_posts/转载/http2.0/装载：HTTP2-0的奇妙日常.md","raw":"---\ntitle: 装载：HTTP2.0的奇妙日常\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/DPP_0004.JPG'\ndate: 2016-02-22 09:57:03\ncategories:\n\t- 转载\n\t- http 2.0\ntags:\n\t- http 2.0\nkeywords: HTTP2,HTTP2性能\ndescription: HTTP2.0性能增强的核心：二进制分帧；HTTP2.0 首部压缩；所有的HTTP2.0的请求都在一个TCP链接上；并行双向字节流的请求和响应；HTTP2.0的请求优先级；HTTP2.0的服务器推送；“十年前端，终归如初”\n---\n\n \n转载自AlloyTeam：http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\n\n\n“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。\n    “我给你一个表情，你自己体会一下”![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg>)\n    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。\n但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。\n \n \n## HTTP2.0性能增强的核心：二进制分帧\n\nHTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。\n    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。\n    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。\n    \nhttp2.0\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg>)\n\n\n然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。\n \n  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。\n   \n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg>)\n    \n  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）\n    \n## HTTP2.0 首部压缩\n\n HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。\n    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。\n \n  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解\n  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也\n  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。\n\n   晨伯起来又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ \n \n\n## 所有的HTTP2.0的请求都在一个TCP链接上\n\n   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\n    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。\n\n   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：\n   \n   1. 可以减少服务链接压力,内存占用少了,连接吞吐量大了\n   2. 由于 TCP 连接减少而使网络拥塞状况得以改观;\n   3. 慢启动时间减少,拥塞和丢包恢复速度更快。\n \n**也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。**\n \n他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。\n“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。\n“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来\n当时我就有预感要![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)，而晨伯总是按套路出牌….\n \n## 并行双向字节流的请求和响应\n\n   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg>)\n\n \n把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:\n \n可以并行交错地发送请求,请求之间互不影响;\n可以并行交错地发送响应,响应之间互不干扰;\n只使用一个连接即可并行发送多个请求和响应;\n消除不必要的延迟,从而减少页面加载的时间;\n \n那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。\n \n \n“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。\n晨伯又![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg>)。我开始确信，这是多年后程序员的肢体礼仪方式。\n \n## HTTP2.0的请求优先级\n\n   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。\n \n“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。\n“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。\n  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。\n内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。\n \n \nHTTP2.0的服务器推送\n    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。\n当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。\n   \n   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。\n \n \n   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。\n \n到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面\n\n![](<http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png>)\n\n在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。\n这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。\n出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..\n \n \n \n \n \n \n参考：\nhttp://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\nhttps://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/","slug":"转载/http2.0/装载：HTTP2-0的奇妙日常","published":1,"updated":"2016-02-23T01:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cistop2vb001yhoin06vytq76","content":"<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/</a></p>\n<p>“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。<br>    “我给你一个表情，你自己体会一下”<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg\" alt=\"\"><br>    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。<br>但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。</p>\n<h2 id=\"HTTP2-0性能增强的核心：二进制分帧\"><a href=\"#HTTP2-0性能增强的核心：二进制分帧\" class=\"headerlink\" title=\"HTTP2.0性能增强的核心：二进制分帧\"></a>HTTP2.0性能增强的核心：二进制分帧</h2><p>HTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。<br>    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。<br>    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。</p>\n<p>http2.0</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg\" alt=\"\"></p>\n<p>然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。</p>\n<p>  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg\" alt=\"\"></p>\n<p>  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。<br><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）</p>\n<h2 id=\"HTTP2-0-首部压缩\"><a href=\"#HTTP2-0-首部压缩\" class=\"headerlink\" title=\"HTTP2.0 首部压缩\"></a>HTTP2.0 首部压缩</h2><p> HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。<br>    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。</p>\n<p>  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解<br>  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也<br>  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。</p>\n<p>   晨伯起来又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ </p>\n<h2 id=\"所有的HTTP2-0的请求都在一个TCP链接上\"><a href=\"#所有的HTTP2-0的请求都在一个TCP链接上\" class=\"headerlink\" title=\"所有的HTTP2.0的请求都在一个TCP链接上\"></a>所有的HTTP2.0的请求都在一个TCP链接上</h2><p>   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面<a href=\"http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\" target=\"_blank\" rel=\"external\">http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！</a><br>    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。</p>\n<p>   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：</p>\n<ol>\n<li>可以减少服务链接压力,内存占用少了,连接吞吐量大了</li>\n<li>由于 TCP 连接减少而使网络拥塞状况得以改观;</li>\n<li>慢启动时间减少,拥塞和丢包恢复速度更快。</li>\n</ol>\n<p><strong>也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。</strong></p>\n<p>他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。<br>“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。<br>“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来<br>当时我就有预感要<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，而晨伯总是按套路出牌….</p>\n<h2 id=\"并行双向字节流的请求和响应\"><a href=\"#并行双向字节流的请求和响应\" class=\"headerlink\" title=\"并行双向字节流的请求和响应\"></a>并行双向字节流的请求和响应</h2><p>   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg\" alt=\"\"></p>\n<p>把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:</p>\n<p>可以并行交错地发送请求,请求之间互不影响;<br>可以并行交错地发送响应,响应之间互不干扰;<br>只使用一个连接即可并行发送多个请求和响应;<br>消除不必要的延迟,从而减少页面加载的时间;</p>\n<p>那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。</p>\n<p>“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。<br>晨伯又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">。我开始确信，这是多年后程序员的肢体礼仪方式。</p>\n<h2 id=\"HTTP2-0的请求优先级\"><a href=\"#HTTP2-0的请求优先级\" class=\"headerlink\" title=\"HTTP2.0的请求优先级\"></a>HTTP2.0的请求优先级</h2><p>   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。</p>\n<p>“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。<br>“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。<br>  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。<br>内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。</p>\n<p>HTTP2.0的服务器推送<br>    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。<br>当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。</p>\n<p>   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。</p>\n<p>   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。</p>\n<p>到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png\" alt=\"\"></p>\n<p>在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。<br>这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。<br>出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..</p>\n<p>参考：<br><a href=\"http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\" target=\"_blank\" rel=\"external\">http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data</a><br><a href=\"https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/\" target=\"_blank\" rel=\"external\">https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/</a></p>\n","excerpt":"","more":"<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/\">http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/</a></p>\n<p>“多年没见，你的女神后来什么样了”晨伯总是这么八卦我的女神，而不是我。<br>    “我给你一个表情，你自己体会一下”<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/youshang_small.jpg\" alt=\"\"><br>    “你先写个小页面给我看看吧，我指导一下你吧。”晨伯一幅很吊的样子。<br>但是这样的小case当然难不了我，虽然多年没碰web，但是我当年可以是AlloyTeam的成员啊。很快我就啪啪啪地完成了页面。晨伯看完我写的页面，一幅“我可是有女朋友的男人”的表情，感叹了一句“现在是HTTP2.0的时代啦，给你普及一下知识点”。</p>\n<h2 id=\"HTTP2-0性能增强的核心：二进制分帧\"><a href=\"#HTTP2-0性能增强的核心：二进制分帧\" class=\"headerlink\" title=\"HTTP2.0性能增强的核心：二进制分帧\"></a>HTTP2.0性能增强的核心：二进制分帧</h2><p>HTTP 2.0最大的特点： 不会改动HTTP 的语义，HTTP 方法、状态码、URI 及首部字段，等等这些核心概念上一如往常，却能致力于突破上一代标准的性能限制，改进传输性能，实现低延迟和高吞吐量。而之所以叫2.0，是在于新增的二进制分帧层。<br>    既然又要保证HTTP的各种动词，方法，首部都不受影响，那就需要在应用层(HTTP2.0)和传输层(TCP or UDP)之间增加一个二进制分帧层。<br>    在二进制分帧层上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。</p>\n<p>http2.0</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/http2.0.jpg\" alt=\"\"></p>\n<p>然后，HTTP 2.0 通信都在一个连接上完成，这个连接可以承载任意数量的双向数据流。相应地，每个数据流以消息的形式发送，而消息由一或多个帧组成，这些帧可以乱序发送，然后再根据每个帧首部的流标识符重新组装。</p>\n<p>  当他侃侃而谈的时候，大概是这个样子的，你们也来感受一下。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stupid.jpg\" alt=\"\"></p>\n<p>  “听起来好屌的样子，但是那样，所有的二进制帧都会带上Headers帧，这是多大的数据冗余传送啊，性能会多….”我疑问道。<br><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">“还没讲完呢，插什么嘴！”（哎呀我差！我这么帅，可别打脸啊。）</p>\n<h2 id=\"HTTP2-0-首部压缩\"><a href=\"#HTTP2-0-首部压缩\" class=\"headerlink\" title=\"HTTP2.0 首部压缩\"></a>HTTP2.0 首部压缩</h2><p> HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。<br>    如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。</p>\n<p>  “好了，现在你倒是给我解释一下，这里使用自动化合并文件和Sprite合图是什么回事？”晨伯不解<br>  “本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。”如是道也<br>  “当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件” 我不明白晨伯的问题，就稍微补充了一下方案。</p>\n<p>   晨伯起来又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，略疼，略疼。话说多年的程序员交流都用这种肢体动作了吗？ </p>\n<h2 id=\"所有的HTTP2-0的请求都在一个TCP链接上\"><a href=\"#所有的HTTP2-0的请求都在一个TCP链接上\" class=\"headerlink\" title=\"所有的HTTP2.0的请求都在一个TCP链接上\"></a>所有的HTTP2.0的请求都在一个TCP链接上</h2><p>   HTTP2.0所有通信都是在一个TCP连接上完成。HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应 着逻辑流中的消息。并行地在同一个 TCP 连接上双向交换消息。就好比，我请求一个页面<a href=\"http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！\">http://www.qq.com。页面上所有的资源请求都是客户端与服务器上的一条TCP上请求和响应的！</a><br>    有关注TCP性能的同学就会知道，HTTP性能的关键在于低延迟而不是高带宽！大多数HTTP 连接的时间都很短，而且是突发性的，但TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用TCP 连接，让高带宽也能真正的服务于HTTP的性能提升。</p>\n<p>   同时，单链接多资源的方式，使到至上而下的层面都得到了好处：</p>\n<ol>\n<li>可以减少服务链接压力,内存占用少了,连接吞吐量大了</li>\n<li>由于 TCP 连接减少而使网络拥塞状况得以改观;</li>\n<li>慢启动时间减少,拥塞和丢包恢复速度更快。</li>\n</ol>\n<p><strong>也就是说，“资源合并减少请求”的优化手段对于HTTP2.0来说是没有效果的，只会增大无用的工作量而已。</strong></p>\n<p>他说得好有道理，我竟然掩脸而对（因为脸被打疼了）。<br>“你在再我说说，这些cdn1.cn,cdn2.cn,cdn3.cn是什么回事啊”晨伯又问到。<br>“因为HTTP1.x上如果一个只用一个持久链接，请求只能一个一个顺序请求，为了高效地并行下载资源，浏览器允许我们打开多个TCP会话，但是一个域名下限制6个链接。为了突破这些限制，我们可以域名分区，提高并行下载资源能力…..”我只好把我当年知道的说出来<br>当时我就有预感要<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">，而晨伯总是按套路出牌….</p>\n<h2 id=\"并行双向字节流的请求和响应\"><a href=\"#并行双向字节流的请求和响应\" class=\"headerlink\" title=\"并行双向字节流的请求和响应\"></a>并行双向字节流的请求和响应</h2><p>   在HTTP2.0上，客户端和服务器可以把HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。注意，同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收者服务器的响应，而服务器那端同理。</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/stream.jpg\" alt=\"\"></p>\n<p>把 HTTP 消息分解为独立的帧,交错发送,然后在另一端重新组装是 HTTP 2.0 最 重要的一项增强。事实上,这个机制会在整个 Web 技术栈中引发一系列连锁反应, 从而带来巨大的性能提升,因为:</p>\n<p>可以并行交错地发送请求,请求之间互不影响;<br>可以并行交错地发送响应,响应之间互不干扰;<br>只使用一个连接即可并行发送多个请求和响应;<br>消除不必要的延迟,从而减少页面加载的时间;</p>\n<p>那么也就是说“域名分区”这种优化手段对于HTTP2.0是无用的，因为资源都是并行交错发送，且没有限制，不需要额外的多域名并行下载。</p>\n<p>“既然所有资源都是并行交错发送，会不会出现这样的情况【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送图片】” 我疑问道。<br>晨伯又<img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/giveyoufive.jpg\" alt=\"\">。我开始确信，这是多年后程序员的肢体礼仪方式。</p>\n<h2 id=\"HTTP2-0的请求优先级\"><a href=\"#HTTP2-0的请求优先级\" class=\"headerlink\" title=\"HTTP2.0的请求优先级\"></a>HTTP2.0的请求优先级</h2><p>   每个HTTP2.0流里面有个优先值，这个优先值确定着客户端和服务器处理不同的流采取不同的优先级策略，高优先级的流都应该优先发送，但又不会绝对的。绝对地准守，可能又会引入首队阻塞的问题：高优先级的请求慢导致阻塞其他资源交付。分配处理资源和客户端与服务器间的带宽，不同优先级的混合也是必须的。</p>\n<p>“有了优先级，HTTP2.0根本不会发生【浏览器明明在等关键的 CSS 和JS，你TMD的服务器还在发送黄图】”晨伯道。<br>“我根本没有说是服务器在发黄图，好不好。”我吐槽了一下。<br>  “还有还有，你这里的一段base64内嵌图片又是什么回事？是黄图吗？” 晨伯又挑战我了。<br>内嵌图片这种，有使用条件的优化手段，我还是不要说话好，不然的话按照这个故事的尿性，他应该又要飞拳我。</p>\n<p>HTTP2.0的服务器推送<br>    HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，服务器可以强奸你的浏览器，哦不，应该是，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。<br>当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。我们常用的内嵌图片也可以理解为一种强制的服务器推送：我请求html，却内嵌了张黄图。</p>\n<p>   有了HTTP2.0的服务器推送，HTTP1.x时代的内嵌资源的优化手段也变得没有意义了。而且使用服务器推送的资源的方式更加高效，因为客户端还可以缓存起来，甚至可以由不同的页面共享（依旧遵循同源策略）。当然，你是个正直的浏览器，是可以决绝服务器推送的黄图的。</p>\n<p>   不知道为什么，说到黄图这个家伙就兴奋起来了，再也没有打我了。然后交谈就变成了16+周岁的少女不宜收听的内容了。不过HTTP2.0的知识收获了不少。</p>\n<p>到了我要面试的日子了，互联网公司A果真要（笔试|鄙视）一下我。我写出了下面的页面</p>\n<p><img src=\"http://cdn.alloyteam.com/wp-content/uploads/2015/03/future.png\" alt=\"\"></p>\n<p>在场面试官，纷纷鼓掌站了起来，“如此高效的页面，难得啊~你被录取了！”。<br>这看着这份如同我前端实习时候写的页面，我心中默默感叹“十年前端，终归如初”。<br>出于礼貌，我想起了晨伯教我的新式前端工程师肢体礼仪，然后…..</p>\n<p>参考：<br><a href=\"http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data\">http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#_sending_application_data</a><br><a href=\"https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/\">https://thecustomizewindows.com/2014/08/http-2-0-changes-expected-new-standard-2/</a></p>\n"},{"title":"RestTemplate遇上Hystrix","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/P60828-123503.jpg","date":"2016-09-02T01:20:00.000Z","keywords":null,"description":null,"_content":"\n# RestTemplate遇上Hystrix\n\n\n## RestTemplate集成Hystrix和Robbin\n\n查看RestTemplate源代码，可以看到RestTemplate继承了InterceptingHttpAccessor类，InterceptingHttpAccessor类通过ClientHttpRequestInterceptor接口提供了扩展功能。\n\n实现intercept方法，在该方法中封装HystrixCommand和Ribbon逻辑即可。\n\n下面的代码是集成了HystrixCommand的例子：\n\n```\n@Override\n    public ClientHttpResponse intercept(\n            final HttpRequest request, final byte[] body,\n            final ClientHttpRequestExecution execution) throws IOException {\n        final URI originalUri = request.getURI();\n        String serviceName = mapCommandKey(originalUri);\n\n        log.info(\"{} :{} {} \", serviceName, request.getMethod().name(), originalUri.toString());\n        return new RestTemplateHystrixCommnad(serviceName, () -> {\n            return execution.execute(request, body);\n        }, hystrixFallback).execute();\n\n    }\n```\n\n下面是集成了HystrixCommand和Ribbon的例子\n\n```\n@Override\n    public ClientHttpResponse intercept(\n            final HttpRequest request, final byte[] body,\n            final ClientHttpRequestExecution execution) throws IOException {\n        final URI originalUri = request.getURI();\n        String serviceName = mapCommandKey(originalUri);\n\n        log.info(\"{} :{} {} \", serviceName, request.getMethod().name(), originalUri.toString());\n        return new RestTemplateHystrixCommnad(serviceName, () -> {\n            return this.loadBalancer.execute(serviceName, instance -> {\n                HttpRequest serviceRequest = new HystrixLoadBalancerInterceptor.ServiceRequestWrapper(\n                        request,\n                        instance);\n                return execution.execute(serviceRequest, body);\n\n            });\n        }, hystrixFallback).execute();\n    }\n```\n\n2）RestTemplate支持Hystrix异步特性\n\nHystrix的执行在线程隔离模型下是支持异步的，因此也扩展一个RestTemplate异步执行。如下代码所示，通过调用`queue()`方法返回一个Future。\n\n```\nFuture<String> fs = new CommandHelloWorld(\"World\").queue();\nString s = fs.get(); \n```\n这样可以修改RestOperations接口方法为异步方法：\n\n从：\n\n```\n<T>  T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n```\n\n到：\n\n```\n<T> Future<T> getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n```\n\n然后在原生的RestTemplate做一层代理，在代理层集成Hystrix和Ribbon，无论是JDK动态代理还是硬编码实现代理都变得容易，然后就可以这样来调用了：\n\n```\nHystrixAsyncRestOperations asyncRestTemplate =null;\n//先依次调用\nFuture<String> future1 = asyncRestTemplate.getForObject(\"http://tietang.wang/\", String.class);\nFuture<String> future2 = asyncRestTemplate.getForObject(\"http://tietang.wang/2016/03/17/hystrix/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8Hystrix/\", String.class);\n//再依次获取调用结果\nString html1 = future1.get();\nString html2 = future2.get(100, TimeUnit.MILLISECONDS);//异步超时，建议\n```\n","source":"_posts/hystrix/RestTemplate遇上Hystrix.md","raw":"---\ntitle: RestTemplate遇上Hystrix\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/P60828-123503.jpg'\ndate: 2016-09-02 09:20:00\ncategories:\n\t- 技术\n\t- Hystrix\ntags:\n\t- hystrix\n\t- Circuit Breaker\nkeywords:\ndescription:\n---\n\n# RestTemplate遇上Hystrix\n\n\n## RestTemplate集成Hystrix和Robbin\n\n查看RestTemplate源代码，可以看到RestTemplate继承了InterceptingHttpAccessor类，InterceptingHttpAccessor类通过ClientHttpRequestInterceptor接口提供了扩展功能。\n\n实现intercept方法，在该方法中封装HystrixCommand和Ribbon逻辑即可。\n\n下面的代码是集成了HystrixCommand的例子：\n\n```\n@Override\n    public ClientHttpResponse intercept(\n            final HttpRequest request, final byte[] body,\n            final ClientHttpRequestExecution execution) throws IOException {\n        final URI originalUri = request.getURI();\n        String serviceName = mapCommandKey(originalUri);\n\n        log.info(\"{} :{} {} \", serviceName, request.getMethod().name(), originalUri.toString());\n        return new RestTemplateHystrixCommnad(serviceName, () -> {\n            return execution.execute(request, body);\n        }, hystrixFallback).execute();\n\n    }\n```\n\n下面是集成了HystrixCommand和Ribbon的例子\n\n```\n@Override\n    public ClientHttpResponse intercept(\n            final HttpRequest request, final byte[] body,\n            final ClientHttpRequestExecution execution) throws IOException {\n        final URI originalUri = request.getURI();\n        String serviceName = mapCommandKey(originalUri);\n\n        log.info(\"{} :{} {} \", serviceName, request.getMethod().name(), originalUri.toString());\n        return new RestTemplateHystrixCommnad(serviceName, () -> {\n            return this.loadBalancer.execute(serviceName, instance -> {\n                HttpRequest serviceRequest = new HystrixLoadBalancerInterceptor.ServiceRequestWrapper(\n                        request,\n                        instance);\n                return execution.execute(serviceRequest, body);\n\n            });\n        }, hystrixFallback).execute();\n    }\n```\n\n2）RestTemplate支持Hystrix异步特性\n\nHystrix的执行在线程隔离模型下是支持异步的，因此也扩展一个RestTemplate异步执行。如下代码所示，通过调用`queue()`方法返回一个Future。\n\n```\nFuture<String> fs = new CommandHelloWorld(\"World\").queue();\nString s = fs.get(); \n```\n这样可以修改RestOperations接口方法为异步方法：\n\n从：\n\n```\n<T>  T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n```\n\n到：\n\n```\n<T> Future<T> getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n```\n\n然后在原生的RestTemplate做一层代理，在代理层集成Hystrix和Ribbon，无论是JDK动态代理还是硬编码实现代理都变得容易，然后就可以这样来调用了：\n\n```\nHystrixAsyncRestOperations asyncRestTemplate =null;\n//先依次调用\nFuture<String> future1 = asyncRestTemplate.getForObject(\"http://tietang.wang/\", String.class);\nFuture<String> future2 = asyncRestTemplate.getForObject(\"http://tietang.wang/2016/03/17/hystrix/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8Hystrix/\", String.class);\n//再依次获取调用结果\nString html1 = future1.get();\nString html2 = future2.get(100, TimeUnit.MILLISECONDS);//异步超时，建议\n```\n","slug":"hystrix/RestTemplate遇上Hystrix","published":1,"updated":"2016-09-08T02:19:57.000Z","_id":"cistpbmwc0000spin70doaad3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"RestTemplate遇上Hystrix\"><a href=\"#RestTemplate遇上Hystrix\" class=\"headerlink\" title=\"RestTemplate遇上Hystrix\"></a>RestTemplate遇上Hystrix</h1><h2 id=\"RestTemplate集成Hystrix和Robbin\"><a href=\"#RestTemplate集成Hystrix和Robbin\" class=\"headerlink\" title=\"RestTemplate集成Hystrix和Robbin\"></a>RestTemplate集成Hystrix和Robbin</h2><p>查看RestTemplate源代码，可以看到RestTemplate继承了InterceptingHttpAccessor类，InterceptingHttpAccessor类通过ClientHttpRequestInterceptor接口提供了扩展功能。</p>\n<p>实现intercept方法，在该方法中封装HystrixCommand和Ribbon逻辑即可。</p>\n<p>下面的代码是集成了HystrixCommand的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public ClientHttpResponse intercept(</span><br><span class=\"line\">            final HttpRequest request, final byte[] body,</span><br><span class=\"line\">            final ClientHttpRequestExecution execution) throws IOException &#123;</span><br><span class=\"line\">        final URI originalUri = request.getURI();</span><br><span class=\"line\">        String serviceName = mapCommandKey(originalUri);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(&quot;&#123;&#125; :&#123;&#125; &#123;&#125; &quot;, serviceName, request.getMethod().name(), originalUri.toString());</span><br><span class=\"line\">        return new RestTemplateHystrixCommnad(serviceName, () -&gt; &#123;</span><br><span class=\"line\">            return execution.execute(request, body);</span><br><span class=\"line\">        &#125;, hystrixFallback).execute();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>下面是集成了HystrixCommand和Ribbon的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public ClientHttpResponse intercept(</span><br><span class=\"line\">            final HttpRequest request, final byte[] body,</span><br><span class=\"line\">            final ClientHttpRequestExecution execution) throws IOException &#123;</span><br><span class=\"line\">        final URI originalUri = request.getURI();</span><br><span class=\"line\">        String serviceName = mapCommandKey(originalUri);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(&quot;&#123;&#125; :&#123;&#125; &#123;&#125; &quot;, serviceName, request.getMethod().name(), originalUri.toString());</span><br><span class=\"line\">        return new RestTemplateHystrixCommnad(serviceName, () -&gt; &#123;</span><br><span class=\"line\">            return this.loadBalancer.execute(serviceName, instance -&gt; &#123;</span><br><span class=\"line\">                HttpRequest serviceRequest = new HystrixLoadBalancerInterceptor.ServiceRequestWrapper(</span><br><span class=\"line\">                        request,</span><br><span class=\"line\">                        instance);</span><br><span class=\"line\">                return execution.execute(serviceRequest, body);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, hystrixFallback).execute();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>2）RestTemplate支持Hystrix异步特性</p>\n<p>Hystrix的执行在线程隔离模型下是支持异步的，因此也扩展一个RestTemplate异步执行。如下代码所示，通过调用<code>queue()</code>方法返回一个Future。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;String&gt; fs = new CommandHelloWorld(&quot;World&quot;).queue();</span><br><span class=\"line\">String s = fs.get();</span><br></pre></td></tr></table></figure>\n<p>这样可以修改RestOperations接口方法为异步方法：</p>\n<p>从：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T&gt;  T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables) throws RestClientException;</span><br></pre></td></tr></table></figure>\n<p>到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T&gt; Future&lt;T&gt; getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables) throws RestClientException;</span><br></pre></td></tr></table></figure>\n<p>然后在原生的RestTemplate做一层代理，在代理层集成Hystrix和Ribbon，无论是JDK动态代理还是硬编码实现代理都变得容易，然后就可以这样来调用了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixAsyncRestOperations asyncRestTemplate =null;</span><br><span class=\"line\">//先依次调用</span><br><span class=\"line\">Future&lt;String&gt; future1 = asyncRestTemplate.getForObject(&quot;http://tietang.wang/&quot;, String.class);</span><br><span class=\"line\">Future&lt;String&gt; future2 = asyncRestTemplate.getForObject(&quot;http://tietang.wang/2016/03/17/hystrix/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8Hystrix/&quot;, String.class);</span><br><span class=\"line\">//再依次获取调用结果</span><br><span class=\"line\">String html1 = future1.get();</span><br><span class=\"line\">String html2 = future2.get(100, TimeUnit.MILLISECONDS);//异步超时，建议</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"RestTemplate遇上Hystrix\"><a href=\"#RestTemplate遇上Hystrix\" class=\"headerlink\" title=\"RestTemplate遇上Hystrix\"></a>RestTemplate遇上Hystrix</h1><h2 id=\"RestTemplate集成Hystrix和Robbin\"><a href=\"#RestTemplate集成Hystrix和Robbin\" class=\"headerlink\" title=\"RestTemplate集成Hystrix和Robbin\"></a>RestTemplate集成Hystrix和Robbin</h2><p>查看RestTemplate源代码，可以看到RestTemplate继承了InterceptingHttpAccessor类，InterceptingHttpAccessor类通过ClientHttpRequestInterceptor接口提供了扩展功能。</p>\n<p>实现intercept方法，在该方法中封装HystrixCommand和Ribbon逻辑即可。</p>\n<p>下面的代码是集成了HystrixCommand的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public ClientHttpResponse intercept(</span><br><span class=\"line\">            final HttpRequest request, final byte[] body,</span><br><span class=\"line\">            final ClientHttpRequestExecution execution) throws IOException &#123;</span><br><span class=\"line\">        final URI originalUri = request.getURI();</span><br><span class=\"line\">        String serviceName = mapCommandKey(originalUri);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(&quot;&#123;&#125; :&#123;&#125; &#123;&#125; &quot;, serviceName, request.getMethod().name(), originalUri.toString());</span><br><span class=\"line\">        return new RestTemplateHystrixCommnad(serviceName, () -&gt; &#123;</span><br><span class=\"line\">            return execution.execute(request, body);</span><br><span class=\"line\">        &#125;, hystrixFallback).execute();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>下面是集成了HystrixCommand和Ribbon的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public ClientHttpResponse intercept(</span><br><span class=\"line\">            final HttpRequest request, final byte[] body,</span><br><span class=\"line\">            final ClientHttpRequestExecution execution) throws IOException &#123;</span><br><span class=\"line\">        final URI originalUri = request.getURI();</span><br><span class=\"line\">        String serviceName = mapCommandKey(originalUri);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(&quot;&#123;&#125; :&#123;&#125; &#123;&#125; &quot;, serviceName, request.getMethod().name(), originalUri.toString());</span><br><span class=\"line\">        return new RestTemplateHystrixCommnad(serviceName, () -&gt; &#123;</span><br><span class=\"line\">            return this.loadBalancer.execute(serviceName, instance -&gt; &#123;</span><br><span class=\"line\">                HttpRequest serviceRequest = new HystrixLoadBalancerInterceptor.ServiceRequestWrapper(</span><br><span class=\"line\">                        request,</span><br><span class=\"line\">                        instance);</span><br><span class=\"line\">                return execution.execute(serviceRequest, body);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, hystrixFallback).execute();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>2）RestTemplate支持Hystrix异步特性</p>\n<p>Hystrix的执行在线程隔离模型下是支持异步的，因此也扩展一个RestTemplate异步执行。如下代码所示，通过调用<code>queue()</code>方法返回一个Future。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;String&gt; fs = new CommandHelloWorld(&quot;World&quot;).queue();</span><br><span class=\"line\">String s = fs.get();</span><br></pre></td></tr></table></figure>\n<p>这样可以修改RestOperations接口方法为异步方法：</p>\n<p>从：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T&gt;  T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables) throws RestClientException;</span><br></pre></td></tr></table></figure>\n<p>到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T&gt; Future&lt;T&gt; getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables) throws RestClientException;</span><br></pre></td></tr></table></figure>\n<p>然后在原生的RestTemplate做一层代理，在代理层集成Hystrix和Ribbon，无论是JDK动态代理还是硬编码实现代理都变得容易，然后就可以这样来调用了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HystrixAsyncRestOperations asyncRestTemplate =null;</span><br><span class=\"line\">//先依次调用</span><br><span class=\"line\">Future&lt;String&gt; future1 = asyncRestTemplate.getForObject(&quot;http://tietang.wang/&quot;, String.class);</span><br><span class=\"line\">Future&lt;String&gt; future2 = asyncRestTemplate.getForObject(&quot;http://tietang.wang/2016/03/17/hystrix/%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8Hystrix/&quot;, String.class);</span><br><span class=\"line\">//再依次获取调用结果</span><br><span class=\"line\">String html1 = future1.get();</span><br><span class=\"line\">String html2 = future2.get(100, TimeUnit.MILLISECONDS);//异步超时，建议</span><br></pre></td></tr></table></figure>\n"},{"title":"Feign正确的使用方法和性能优化注意事项","thumbnail":"http://7xiovs.com1.z0.glb.clouddn.com/P60724-115835.jpg","date":"2016-09-06T11:22:47.000Z","keywords":["Feign","微服务","Spring Cloud"],"description":null,"_content":"\n## Feign正确的使用方法和性能优化注意事项\n\n### 1. feign自定义Configuration和root 容器有效隔离。\n\n- 用@Configuration注解\n- 不能在主@ComponentScan (or @SpringBootApplication)范围内，从其包名上分离\n- 注意避免包扫描重叠，最好的方法是明确的指定包名\n\n### 2. Spring Cloud Netflix 提供了默认的Bean类型:\n\n* Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)\n* Encoder feignEncoder: SpringEncoder\n* Logger feignLogger: Slf4jLogger\n* Contract feignContract: SpringMvcContract\n* Feign.Builder feignBuilder: HystrixFeign.Builder\n\n### 3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\n\n* Logger.Level\n* Retryer\n* ErrorDecoder\n* Request.Options\n* Collection<RequestInterceptor>\n\n### 4. 自定义feign的消息编码解码器：\n\t\n不要在如下代码中getObject方法内new 对象，外部会频繁调用getObject方法。\n\t\n```\n\tObjectFactory<HttpMessageConverters> messageConvertersObjectFactory = new ObjectFactory<HttpMessageConverters>() {\n\t@Override\n\tpublic HttpMessageConverters getObject() throws BeansException {\n\t\treturn httpMessageConverters;\n\t}\n\t};\n```\n\n### 5. 注意测试环境和生产环境，注意正确使用feign日志级别。\n\n### 6. apacheHttpclient或者其他client的正确配置：\n\t\n- apacheHttpclient自定义配置放在spring root context，不要在FeignContext，否则不会起作用。\n- apacheHttpclient 连接池配置合理地连接和其他参数\n\n### 7. Feign配置\n\n```\n#Hystrix支持，如果为true，hystrix库必须在classpath中\nfeign.hystrix.enabled=false\n \n#请求和响应GZIP压缩支持\nfeign.compression.request.enabled=true\nfeign.compression.response.enabled=true\n#支持压缩的mime types\nfeign.compression.request.enabled=true\nfeign.compression.request.mime-types=text/xml,application/xml,application/json\nfeign.compression.request.min-request-size=2048\n\n# 日志支持\nlogging.level.project.user.UserClient: DEBUG\n\t\n\n```\n\n### 8. Logger.Level支持\n\n必须为每一个Feign Client配置来告诉Feign如何输出日志，可选：\n\t\n* **NONE**, No logging (**DEFAULT**).\n* **BASIC**,  Log only the request method and URL and the response status code and execution time.\n* **HEADERS**, Log the basic information along with request and response headers.\n* **FULL**, Log the headers, body, and metadata for both requests and responses.\n\n### 9. FeignClient.fallback 正确的使用方法\n\n 配置的fallback class也必须在FeignClient Configuration中实例化，否则会报\n` java.lang.IllegalStateException: No fallback instance of type class `异常。\n\n例子：\n\n```\n\t@FeignClient(name = \"hello\", fallback = HystrixClientFallback.class)\n\tpublic interface HystrixClient {\n\t    @RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n\t    Hello iFailSometimes();\n\t}\n\t\n\tpublic class HystrixClientFallback implements HystrixClient {\n\t    @Override\n\t    public Hello iFailSometimes() {\n\t        return new Hello(\"fallback\");\n\t    }\n\t}\n\t\n\t@Configuration\n\tpublic class FooConfiguration {\n\t    @Bean\n\t\t@Scope(\"prototype\")\n\t\tpublic Feign.Builder feignBuilder() {\n\t\t\treturn Feign.builder();\n\t\t}\n\t\t\n\t\t@Bean\n\t\tpublic HystrixClientFallback fb(){\n\t\t\treturn new HystrixClientFallback();\n\t\t}\n\t\t\n\t}\n\t\n```\n\n### 10. 使用Feign Client 和@RequestMapping时，注意事项\n \n \n当前工程中有和Feign Client中一样的Endpoint时，Feign Client的类上不能用@RequestMapping注解否则，当前工程该endpoint http请求且使用accpet时会报404.\n  \n \n下面的例子：\n \n\n**有一个 Controller**\n\n```\n@RestController\n@RequestMapping(\"/v1/card\")\npublic class IndexApi {\n\n    @PostMapping(\"balance\")\n    @ResponseBody\n    public Info index() {\n        Info.Builder builder = new Info.Builder();\n        builder.withDetail(\"x\", 2);\n        builder.withDetail(\"y\", 2);\n        return builder.build();\n    }\n}\n\n```\n\n**有一个Feign Client**\n\n```\n@FeignClient(\n        name = \"card\",\n        url = \"http://localhost:7913\",\n        fallback = CardFeignClientFallback.class,\n        configuration = FeignClientConfiguration.class\n)\n@RequestMapping(value = \"/v1/card\")\npublic interface CardFeignClient {\n\n    @RequestMapping(value = \"/balance\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    Info info();\n\n}\n```\n\nif @RequestMapping is used on class, when invoke http /v1/card/balance, like this :\n\n如果 @RequestMapping注解被用在FeignClient类上，当像如下代码请求/v1/card/balance时，注意有Accept header：\n\n```\nContent-Type:application/json\nAccept:application/json\n\nPOST http://localhost:7913/v1/card/balance\n```\n\n\n那么会返回 404。\n\n**如果不包含Accept header时请求，则是OK：**\n\n```\nContent-Type:application/json\nPOST http://localhost:7913/v1/card/balance\n```\n\n\n**或者像下面不在Feign Client上使用@RequestMapping注解,请求也是ok，无论是否包含Accept:**\n\n```\n\n@FeignClient(\n        name = \"card\",\n        url = \"http://localhost:7913\",\n        fallback = CardFeignClientFallback.class,\n        configuration = FeignClientConfiguration.class\n)\n\npublic interface CardFeignClient {\n\n    @RequestMapping(value = \"/v1/card/balance\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    Info info();\n\n}\n\n```\n \n\n\n\n ","source":"_posts/微服务/Feign使用性能优化.md","raw":"---\ntitle: Feign正确的使用方法和性能优化注意事项\nthumbnail: 'http://7xiovs.com1.z0.glb.clouddn.com/P60724-115835.jpg'\ndate: 2016-09-06 19:22:47\ncategories:\n\t- 微服务\n\t- Feign\ntags:\n\t- Feign\n\t- 微服务\n\t- Spring Cloud\nkeywords:\n\t- Feign\n\t- 微服务\n\t- Spring Cloud\ndescription:\n---\n\n## Feign正确的使用方法和性能优化注意事项\n\n### 1. feign自定义Configuration和root 容器有效隔离。\n\n- 用@Configuration注解\n- 不能在主@ComponentScan (or @SpringBootApplication)范围内，从其包名上分离\n- 注意避免包扫描重叠，最好的方法是明确的指定包名\n\n### 2. Spring Cloud Netflix 提供了默认的Bean类型:\n\n* Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)\n* Encoder feignEncoder: SpringEncoder\n* Logger feignLogger: Slf4jLogger\n* Contract feignContract: SpringMvcContract\n* Feign.Builder feignBuilder: HystrixFeign.Builder\n\n### 3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\n\n* Logger.Level\n* Retryer\n* ErrorDecoder\n* Request.Options\n* Collection<RequestInterceptor>\n\n### 4. 自定义feign的消息编码解码器：\n\t\n不要在如下代码中getObject方法内new 对象，外部会频繁调用getObject方法。\n\t\n```\n\tObjectFactory<HttpMessageConverters> messageConvertersObjectFactory = new ObjectFactory<HttpMessageConverters>() {\n\t@Override\n\tpublic HttpMessageConverters getObject() throws BeansException {\n\t\treturn httpMessageConverters;\n\t}\n\t};\n```\n\n### 5. 注意测试环境和生产环境，注意正确使用feign日志级别。\n\n### 6. apacheHttpclient或者其他client的正确配置：\n\t\n- apacheHttpclient自定义配置放在spring root context，不要在FeignContext，否则不会起作用。\n- apacheHttpclient 连接池配置合理地连接和其他参数\n\n### 7. Feign配置\n\n```\n#Hystrix支持，如果为true，hystrix库必须在classpath中\nfeign.hystrix.enabled=false\n \n#请求和响应GZIP压缩支持\nfeign.compression.request.enabled=true\nfeign.compression.response.enabled=true\n#支持压缩的mime types\nfeign.compression.request.enabled=true\nfeign.compression.request.mime-types=text/xml,application/xml,application/json\nfeign.compression.request.min-request-size=2048\n\n# 日志支持\nlogging.level.project.user.UserClient: DEBUG\n\t\n\n```\n\n### 8. Logger.Level支持\n\n必须为每一个Feign Client配置来告诉Feign如何输出日志，可选：\n\t\n* **NONE**, No logging (**DEFAULT**).\n* **BASIC**,  Log only the request method and URL and the response status code and execution time.\n* **HEADERS**, Log the basic information along with request and response headers.\n* **FULL**, Log the headers, body, and metadata for both requests and responses.\n\n### 9. FeignClient.fallback 正确的使用方法\n\n 配置的fallback class也必须在FeignClient Configuration中实例化，否则会报\n` java.lang.IllegalStateException: No fallback instance of type class `异常。\n\n例子：\n\n```\n\t@FeignClient(name = \"hello\", fallback = HystrixClientFallback.class)\n\tpublic interface HystrixClient {\n\t    @RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n\t    Hello iFailSometimes();\n\t}\n\t\n\tpublic class HystrixClientFallback implements HystrixClient {\n\t    @Override\n\t    public Hello iFailSometimes() {\n\t        return new Hello(\"fallback\");\n\t    }\n\t}\n\t\n\t@Configuration\n\tpublic class FooConfiguration {\n\t    @Bean\n\t\t@Scope(\"prototype\")\n\t\tpublic Feign.Builder feignBuilder() {\n\t\t\treturn Feign.builder();\n\t\t}\n\t\t\n\t\t@Bean\n\t\tpublic HystrixClientFallback fb(){\n\t\t\treturn new HystrixClientFallback();\n\t\t}\n\t\t\n\t}\n\t\n```\n\n### 10. 使用Feign Client 和@RequestMapping时，注意事项\n \n \n当前工程中有和Feign Client中一样的Endpoint时，Feign Client的类上不能用@RequestMapping注解否则，当前工程该endpoint http请求且使用accpet时会报404.\n  \n \n下面的例子：\n \n\n**有一个 Controller**\n\n```\n@RestController\n@RequestMapping(\"/v1/card\")\npublic class IndexApi {\n\n    @PostMapping(\"balance\")\n    @ResponseBody\n    public Info index() {\n        Info.Builder builder = new Info.Builder();\n        builder.withDetail(\"x\", 2);\n        builder.withDetail(\"y\", 2);\n        return builder.build();\n    }\n}\n\n```\n\n**有一个Feign Client**\n\n```\n@FeignClient(\n        name = \"card\",\n        url = \"http://localhost:7913\",\n        fallback = CardFeignClientFallback.class,\n        configuration = FeignClientConfiguration.class\n)\n@RequestMapping(value = \"/v1/card\")\npublic interface CardFeignClient {\n\n    @RequestMapping(value = \"/balance\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    Info info();\n\n}\n```\n\nif @RequestMapping is used on class, when invoke http /v1/card/balance, like this :\n\n如果 @RequestMapping注解被用在FeignClient类上，当像如下代码请求/v1/card/balance时，注意有Accept header：\n\n```\nContent-Type:application/json\nAccept:application/json\n\nPOST http://localhost:7913/v1/card/balance\n```\n\n\n那么会返回 404。\n\n**如果不包含Accept header时请求，则是OK：**\n\n```\nContent-Type:application/json\nPOST http://localhost:7913/v1/card/balance\n```\n\n\n**或者像下面不在Feign Client上使用@RequestMapping注解,请求也是ok，无论是否包含Accept:**\n\n```\n\n@FeignClient(\n        name = \"card\",\n        url = \"http://localhost:7913\",\n        fallback = CardFeignClientFallback.class,\n        configuration = FeignClientConfiguration.class\n)\n\npublic interface CardFeignClient {\n\n    @RequestMapping(value = \"/v1/card/balance\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    Info info();\n\n}\n\n```\n \n\n\n\n ","slug":"微服务/Feign使用性能优化","published":1,"updated":"2016-09-12T02:12:53.000Z","_id":"cisvkwe360000uxinxi2krx90","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Feign正确的使用方法和性能优化注意事项\"><a href=\"#Feign正确的使用方法和性能优化注意事项\" class=\"headerlink\" title=\"Feign正确的使用方法和性能优化注意事项\"></a>Feign正确的使用方法和性能优化注意事项</h2><h3 id=\"1-feign自定义Configuration和root-容器有效隔离。\"><a href=\"#1-feign自定义Configuration和root-容器有效隔离。\" class=\"headerlink\" title=\"1. feign自定义Configuration和root 容器有效隔离。\"></a>1. feign自定义Configuration和root 容器有效隔离。</h3><ul>\n<li>用@Configuration注解</li>\n<li>不能在主@ComponentScan (or @SpringBootApplication)范围内，从其包名上分离</li>\n<li>注意避免包扫描重叠，最好的方法是明确的指定包名</li>\n</ul>\n<h3 id=\"2-Spring-Cloud-Netflix-提供了默认的Bean类型\"><a href=\"#2-Spring-Cloud-Netflix-提供了默认的Bean类型\" class=\"headerlink\" title=\"2. Spring Cloud Netflix 提供了默认的Bean类型:\"></a>2. Spring Cloud Netflix 提供了默认的Bean类型:</h3><ul>\n<li>Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)</li>\n<li>Encoder feignEncoder: SpringEncoder</li>\n<li>Logger feignLogger: Slf4jLogger</li>\n<li>Contract feignContract: SpringMvcContract</li>\n<li>Feign.Builder feignBuilder: HystrixFeign.Builder</li>\n</ul>\n<h3 id=\"3-Spring-Cloud-Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\"><a href=\"#3-Spring-Cloud-Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\" class=\"headerlink\" title=\"3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\"></a>3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：</h3><ul>\n<li>Logger.Level</li>\n<li>Retryer</li>\n<li>ErrorDecoder</li>\n<li>Request.Options</li>\n<li>Collection<requestinterceptor></requestinterceptor></li>\n</ul>\n<h3 id=\"4-自定义feign的消息编码解码器：\"><a href=\"#4-自定义feign的消息编码解码器：\" class=\"headerlink\" title=\"4. 自定义feign的消息编码解码器：\"></a>4. 自定义feign的消息编码解码器：</h3><p>不要在如下代码中getObject方法内new 对象，外部会频繁调用getObject方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectFactory&lt;HttpMessageConverters&gt; messageConvertersObjectFactory = new ObjectFactory&lt;HttpMessageConverters&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public HttpMessageConverters getObject() throws BeansException &#123;</span><br><span class=\"line\">\treturn httpMessageConverters;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-注意测试环境和生产环境，注意正确使用feign日志级别。\"><a href=\"#5-注意测试环境和生产环境，注意正确使用feign日志级别。\" class=\"headerlink\" title=\"5. 注意测试环境和生产环境，注意正确使用feign日志级别。\"></a>5. 注意测试环境和生产环境，注意正确使用feign日志级别。</h3><h3 id=\"6-apacheHttpclient或者其他client的正确配置：\"><a href=\"#6-apacheHttpclient或者其他client的正确配置：\" class=\"headerlink\" title=\"6. apacheHttpclient或者其他client的正确配置：\"></a>6. apacheHttpclient或者其他client的正确配置：</h3><ul>\n<li>apacheHttpclient自定义配置放在spring root context，不要在FeignContext，否则不会起作用。</li>\n<li>apacheHttpclient 连接池配置合理地连接和其他参数</li>\n</ul>\n<h3 id=\"7-Feign配置\"><a href=\"#7-Feign配置\" class=\"headerlink\" title=\"7. Feign配置\"></a>7. Feign配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Hystrix支持，如果为true，hystrix库必须在classpath中</span><br><span class=\"line\">feign.hystrix.enabled=false</span><br><span class=\"line\"> </span><br><span class=\"line\">#请求和响应GZIP压缩支持</span><br><span class=\"line\">feign.compression.request.enabled=true</span><br><span class=\"line\">feign.compression.response.enabled=true</span><br><span class=\"line\">#支持压缩的mime types</span><br><span class=\"line\">feign.compression.request.enabled=true</span><br><span class=\"line\">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class=\"line\">feign.compression.request.min-request-size=2048</span><br><span class=\"line\"></span><br><span class=\"line\"># 日志支持</span><br><span class=\"line\">logging.level.project.user.UserClient: DEBUG</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-Logger-Level支持\"><a href=\"#8-Logger-Level支持\" class=\"headerlink\" title=\"8. Logger.Level支持\"></a>8. Logger.Level支持</h3><p>必须为每一个Feign Client配置来告诉Feign如何输出日志，可选：</p>\n<ul>\n<li><strong>NONE</strong>, No logging (<strong>DEFAULT</strong>).</li>\n<li><strong>BASIC</strong>,  Log only the request method and URL and the response status code and execution time.</li>\n<li><strong>HEADERS</strong>, Log the basic information along with request and response headers.</li>\n<li><strong>FULL</strong>, Log the headers, body, and metadata for both requests and responses.</li>\n</ul>\n<h3 id=\"9-FeignClient-fallback-正确的使用方法\"><a href=\"#9-FeignClient-fallback-正确的使用方法\" class=\"headerlink\" title=\"9. FeignClient.fallback 正确的使用方法\"></a>9. FeignClient.fallback 正确的使用方法</h3><p> 配置的fallback class也必须在FeignClient Configuration中实例化，否则会报<br><code>java.lang.IllegalStateException: No fallback instance of type class</code>异常。</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(name = &quot;hello&quot;, fallback = HystrixClientFallback.class)</span><br><span class=\"line\">public interface HystrixClient &#123;</span><br><span class=\"line\">    @RequestMapping(method = RequestMethod.GET, value = &quot;/hello&quot;)</span><br><span class=\"line\">    Hello iFailSometimes();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HystrixClientFallback implements HystrixClient &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Hello iFailSometimes() &#123;</span><br><span class=\"line\">        return new Hello(&quot;fallback&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class FooConfiguration &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">\t@Scope(&quot;prototype&quot;)</span><br><span class=\"line\">\tpublic Feign.Builder feignBuilder() &#123;</span><br><span class=\"line\">\t\treturn Feign.builder();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic HystrixClientFallback fb()&#123;</span><br><span class=\"line\">\t\treturn new HystrixClientFallback();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-使用Feign-Client-和-RequestMapping时，注意事项\"><a href=\"#10-使用Feign-Client-和-RequestMapping时，注意事项\" class=\"headerlink\" title=\"10. 使用Feign Client 和@RequestMapping时，注意事项\"></a>10. 使用Feign Client 和@RequestMapping时，注意事项</h3><p>当前工程中有和Feign Client中一样的Endpoint时，Feign Client的类上不能用@RequestMapping注解否则，当前工程该endpoint http请求且使用accpet时会报404.</p>\n<p>下面的例子：</p>\n<p><strong>有一个 Controller</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/v1/card&quot;)</span><br><span class=\"line\">public class IndexApi &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostMapping(&quot;balance&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Info index() &#123;</span><br><span class=\"line\">        Info.Builder builder = new Info.Builder();</span><br><span class=\"line\">        builder.withDetail(&quot;x&quot;, 2);</span><br><span class=\"line\">        builder.withDetail(&quot;y&quot;, 2);</span><br><span class=\"line\">        return builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>有一个Feign Client</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(</span><br><span class=\"line\">        name = &quot;card&quot;,</span><br><span class=\"line\">        url = &quot;http://localhost:7913&quot;,</span><br><span class=\"line\">        fallback = CardFeignClientFallback.class,</span><br><span class=\"line\">        configuration = FeignClientConfiguration.class</span><br><span class=\"line\">)</span><br><span class=\"line\">@RequestMapping(value = &quot;/v1/card&quot;)</span><br><span class=\"line\">public interface CardFeignClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/balance&quot;, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class=\"line\">    Info info();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>if @RequestMapping is used on class, when invoke http /v1/card/balance, like this :</p>\n<p>如果 @RequestMapping注解被用在FeignClient类上，当像如下代码请求/v1/card/balance时，注意有Accept header：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type:application/json</span><br><span class=\"line\">Accept:application/json</span><br><span class=\"line\"></span><br><span class=\"line\">POST http://localhost:7913/v1/card/balance</span><br></pre></td></tr></table></figure>\n<p>那么会返回 404。</p>\n<p><strong>如果不包含Accept header时请求，则是OK：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type:application/json</span><br><span class=\"line\">POST http://localhost:7913/v1/card/balance</span><br></pre></td></tr></table></figure>\n<p><strong>或者像下面不在Feign Client上使用@RequestMapping注解,请求也是ok，无论是否包含Accept:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@FeignClient(</span><br><span class=\"line\">        name = &quot;card&quot;,</span><br><span class=\"line\">        url = &quot;http://localhost:7913&quot;,</span><br><span class=\"line\">        fallback = CardFeignClientFallback.class,</span><br><span class=\"line\">        configuration = FeignClientConfiguration.class</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">public interface CardFeignClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/v1/card/balance&quot;, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class=\"line\">    Info info();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Feign正确的使用方法和性能优化注意事项\"><a href=\"#Feign正确的使用方法和性能优化注意事项\" class=\"headerlink\" title=\"Feign正确的使用方法和性能优化注意事项\"></a>Feign正确的使用方法和性能优化注意事项</h2><h3 id=\"1-feign自定义Configuration和root-容器有效隔离。\"><a href=\"#1-feign自定义Configuration和root-容器有效隔离。\" class=\"headerlink\" title=\"1. feign自定义Configuration和root 容器有效隔离。\"></a>1. feign自定义Configuration和root 容器有效隔离。</h3><ul>\n<li>用@Configuration注解</li>\n<li>不能在主@ComponentScan (or @SpringBootApplication)范围内，从其包名上分离</li>\n<li>注意避免包扫描重叠，最好的方法是明确的指定包名</li>\n</ul>\n<h3 id=\"2-Spring-Cloud-Netflix-提供了默认的Bean类型\"><a href=\"#2-Spring-Cloud-Netflix-提供了默认的Bean类型\" class=\"headerlink\" title=\"2. Spring Cloud Netflix 提供了默认的Bean类型:\"></a>2. Spring Cloud Netflix 提供了默认的Bean类型:</h3><ul>\n<li>Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)</li>\n<li>Encoder feignEncoder: SpringEncoder</li>\n<li>Logger feignLogger: Slf4jLogger</li>\n<li>Contract feignContract: SpringMvcContract</li>\n<li>Feign.Builder feignBuilder: HystrixFeign.Builder</li>\n</ul>\n<h3 id=\"3-Spring-Cloud-Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\"><a href=\"#3-Spring-Cloud-Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\" class=\"headerlink\" title=\"3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：\"></a>3. Spring Cloud Netflix没有提供默认值，但仍然可以在feign上下文配置中创建：</h3><ul>\n<li>Logger.Level</li>\n<li>Retryer</li>\n<li>ErrorDecoder</li>\n<li>Request.Options</li>\n<li>Collection<RequestInterceptor></li>\n</ul>\n<h3 id=\"4-自定义feign的消息编码解码器：\"><a href=\"#4-自定义feign的消息编码解码器：\" class=\"headerlink\" title=\"4. 自定义feign的消息编码解码器：\"></a>4. 自定义feign的消息编码解码器：</h3><p>不要在如下代码中getObject方法内new 对象，外部会频繁调用getObject方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectFactory&lt;HttpMessageConverters&gt; messageConvertersObjectFactory = new ObjectFactory&lt;HttpMessageConverters&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public HttpMessageConverters getObject() throws BeansException &#123;</span><br><span class=\"line\">\treturn httpMessageConverters;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-注意测试环境和生产环境，注意正确使用feign日志级别。\"><a href=\"#5-注意测试环境和生产环境，注意正确使用feign日志级别。\" class=\"headerlink\" title=\"5. 注意测试环境和生产环境，注意正确使用feign日志级别。\"></a>5. 注意测试环境和生产环境，注意正确使用feign日志级别。</h3><h3 id=\"6-apacheHttpclient或者其他client的正确配置：\"><a href=\"#6-apacheHttpclient或者其他client的正确配置：\" class=\"headerlink\" title=\"6. apacheHttpclient或者其他client的正确配置：\"></a>6. apacheHttpclient或者其他client的正确配置：</h3><ul>\n<li>apacheHttpclient自定义配置放在spring root context，不要在FeignContext，否则不会起作用。</li>\n<li>apacheHttpclient 连接池配置合理地连接和其他参数</li>\n</ul>\n<h3 id=\"7-Feign配置\"><a href=\"#7-Feign配置\" class=\"headerlink\" title=\"7. Feign配置\"></a>7. Feign配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Hystrix支持，如果为true，hystrix库必须在classpath中</span><br><span class=\"line\">feign.hystrix.enabled=false</span><br><span class=\"line\"> </span><br><span class=\"line\">#请求和响应GZIP压缩支持</span><br><span class=\"line\">feign.compression.request.enabled=true</span><br><span class=\"line\">feign.compression.response.enabled=true</span><br><span class=\"line\">#支持压缩的mime types</span><br><span class=\"line\">feign.compression.request.enabled=true</span><br><span class=\"line\">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class=\"line\">feign.compression.request.min-request-size=2048</span><br><span class=\"line\"></span><br><span class=\"line\"># 日志支持</span><br><span class=\"line\">logging.level.project.user.UserClient: DEBUG</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-Logger-Level支持\"><a href=\"#8-Logger-Level支持\" class=\"headerlink\" title=\"8. Logger.Level支持\"></a>8. Logger.Level支持</h3><p>必须为每一个Feign Client配置来告诉Feign如何输出日志，可选：</p>\n<ul>\n<li><strong>NONE</strong>, No logging (<strong>DEFAULT</strong>).</li>\n<li><strong>BASIC</strong>,  Log only the request method and URL and the response status code and execution time.</li>\n<li><strong>HEADERS</strong>, Log the basic information along with request and response headers.</li>\n<li><strong>FULL</strong>, Log the headers, body, and metadata for both requests and responses.</li>\n</ul>\n<h3 id=\"9-FeignClient-fallback-正确的使用方法\"><a href=\"#9-FeignClient-fallback-正确的使用方法\" class=\"headerlink\" title=\"9. FeignClient.fallback 正确的使用方法\"></a>9. FeignClient.fallback 正确的使用方法</h3><p> 配置的fallback class也必须在FeignClient Configuration中实例化，否则会报<br><code>java.lang.IllegalStateException: No fallback instance of type class</code>异常。</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(name = &quot;hello&quot;, fallback = HystrixClientFallback.class)</span><br><span class=\"line\">public interface HystrixClient &#123;</span><br><span class=\"line\">    @RequestMapping(method = RequestMethod.GET, value = &quot;/hello&quot;)</span><br><span class=\"line\">    Hello iFailSometimes();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HystrixClientFallback implements HystrixClient &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Hello iFailSometimes() &#123;</span><br><span class=\"line\">        return new Hello(&quot;fallback&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class FooConfiguration &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">\t@Scope(&quot;prototype&quot;)</span><br><span class=\"line\">\tpublic Feign.Builder feignBuilder() &#123;</span><br><span class=\"line\">\t\treturn Feign.builder();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic HystrixClientFallback fb()&#123;</span><br><span class=\"line\">\t\treturn new HystrixClientFallback();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-使用Feign-Client-和-RequestMapping时，注意事项\"><a href=\"#10-使用Feign-Client-和-RequestMapping时，注意事项\" class=\"headerlink\" title=\"10. 使用Feign Client 和@RequestMapping时，注意事项\"></a>10. 使用Feign Client 和@RequestMapping时，注意事项</h3><p>当前工程中有和Feign Client中一样的Endpoint时，Feign Client的类上不能用@RequestMapping注解否则，当前工程该endpoint http请求且使用accpet时会报404.</p>\n<p>下面的例子：</p>\n<p><strong>有一个 Controller</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/v1/card&quot;)</span><br><span class=\"line\">public class IndexApi &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostMapping(&quot;balance&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Info index() &#123;</span><br><span class=\"line\">        Info.Builder builder = new Info.Builder();</span><br><span class=\"line\">        builder.withDetail(&quot;x&quot;, 2);</span><br><span class=\"line\">        builder.withDetail(&quot;y&quot;, 2);</span><br><span class=\"line\">        return builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>有一个Feign Client</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FeignClient(</span><br><span class=\"line\">        name = &quot;card&quot;,</span><br><span class=\"line\">        url = &quot;http://localhost:7913&quot;,</span><br><span class=\"line\">        fallback = CardFeignClientFallback.class,</span><br><span class=\"line\">        configuration = FeignClientConfiguration.class</span><br><span class=\"line\">)</span><br><span class=\"line\">@RequestMapping(value = &quot;/v1/card&quot;)</span><br><span class=\"line\">public interface CardFeignClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/balance&quot;, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class=\"line\">    Info info();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>if @RequestMapping is used on class, when invoke http /v1/card/balance, like this :</p>\n<p>如果 @RequestMapping注解被用在FeignClient类上，当像如下代码请求/v1/card/balance时，注意有Accept header：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type:application/json</span><br><span class=\"line\">Accept:application/json</span><br><span class=\"line\"></span><br><span class=\"line\">POST http://localhost:7913/v1/card/balance</span><br></pre></td></tr></table></figure>\n<p>那么会返回 404。</p>\n<p><strong>如果不包含Accept header时请求，则是OK：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type:application/json</span><br><span class=\"line\">POST http://localhost:7913/v1/card/balance</span><br></pre></td></tr></table></figure>\n<p><strong>或者像下面不在Feign Client上使用@RequestMapping注解,请求也是ok，无论是否包含Accept:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@FeignClient(</span><br><span class=\"line\">        name = &quot;card&quot;,</span><br><span class=\"line\">        url = &quot;http://localhost:7913&quot;,</span><br><span class=\"line\">        fallback = CardFeignClientFallback.class,</span><br><span class=\"line\">        configuration = FeignClientConfiguration.class</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">public interface CardFeignClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;/v1/card/balance&quot;, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class=\"line\">    Info info();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cistop2qo0000hoinwkoveww1","category_id":"cistop2qy0003hoinwd4f9cv3","_id":"cistop2r00005hoinnf66e72n"},{"post_id":"cistop2t5000dhoin3jabnlao","category_id":"cistop2ti000nhoinc2jfdb12","_id":"cistop2tm000thoinyudg42xp"},{"post_id":"cistop2t10008hoinibl64o6b","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2to000xhoin4j3pw9uj"},{"post_id":"cistop2t10008hoinibl64o6b","category_id":"cistop2tl000rhoin3t844hfy","_id":"cistop2tq0010hoin3fdfbgj4"},{"post_id":"cistop2t6000fhoin6w6nyyvs","category_id":"cistop2tm000vhoin1ry6oegh","_id":"cistop2ts0011hoiny11pyz0x"},{"post_id":"cistop2t9000hhoinrp1qu06c","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2tu0014hoinu92e45i0"},{"post_id":"cistop2t9000hhoinrp1qu06c","category_id":"cistop2tp000zhoinp6qkiykt","_id":"cistop2tv0017hoin8mjtb9ge"},{"post_id":"cistop2t20009hoinq55tcrt8","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2tw0018hoinro3oodsx"},{"post_id":"cistop2t20009hoinq55tcrt8","category_id":"cistop2tl000rhoin3t844hfy","_id":"cistop2tx001bhoinoublu7di"},{"post_id":"cistop2tb000ihoinlge1piif","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2ty001dhoinwxgea3qh"},{"post_id":"cistop2tb000ihoinlge1piif","category_id":"cistop2tu0015hointzal1agp","_id":"cistop2ty001ghoindnsfsusm"},{"post_id":"cistop2t4000choin03ge167g","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2u8001ihoin54yi092n"},{"post_id":"cistop2t4000choin03ge167g","category_id":"cistop2tl000rhoin3t844hfy","_id":"cistop2u9001lhoin4efpyfee"},{"post_id":"cistop2uz001phoinejmtxlmc","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2ve001zhoinga38u7gd"},{"post_id":"cistop2uz001phoinejmtxlmc","category_id":"cistop2v5001thoinyzuubogk","_id":"cistop2vf0023hoinc57lfowt"},{"post_id":"cistop2v1001qhoin4nu0w2kk","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2vg0025hoina0acc2vf"},{"post_id":"cistop2v1001qhoin4nu0w2kk","category_id":"cistop2v5001thoinyzuubogk","_id":"cistop2vi0028hoin160dilm3"},{"post_id":"cistop2v4001shoinyu37uxov","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2vi002ahoinxx62p7rv"},{"post_id":"cistop2v4001shoinyu37uxov","category_id":"cistop2ve0021hoinv2hxn9gs","_id":"cistop2vk002dhoin81zd7tue"},{"post_id":"cistop2v6001uhoiniaeciwl4","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2vl002ghoin9wa5odp5"},{"post_id":"cistop2v6001uhoiniaeciwl4","category_id":"cistop2vg0027hoindalrmahe","_id":"cistop2vl002ihoin6nac6ecx"},{"post_id":"cistop2v7001whoindp9wbfgl","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistop2vm002khoinvtwq082y"},{"post_id":"cistop2v7001whoindp9wbfgl","category_id":"cistop2vi002bhoin6klqohgc","_id":"cistop2vm002mhoina74nit2v"},{"post_id":"cistop2vb001yhoin06vytq76","category_id":"cistop2vl002hhoinjpo8zx9s","_id":"cistop2vn002shoinwq7gburq"},{"post_id":"cistop2vb001yhoin06vytq76","category_id":"cistop2vm002nhoinhxxr98hh","_id":"cistop2vn002thoin93gnqhq4"},{"post_id":"cistpbmwc0000spin70doaad3","category_id":"cistop2t4000bhoinvns7l8y3","_id":"cistphx3n0002u5inqgfncwi3"},{"post_id":"cistpbmwc0000spin70doaad3","category_id":"cistop2tl000rhoin3t844hfy","_id":"cistphx3o0003u5in4jbm083x"},{"post_id":"cisvkwe360000uxinxi2krx90","category_id":"cistop2tm000vhoin1ry6oegh","_id":"ciszf0mlt00018min844n0r6s"},{"post_id":"cisvkwe360000uxinxi2krx90","category_id":"ciszf0mlb00008minntjc118x","_id":"ciszf0mlt00028min2khgg4ne"}],"PostTag":[{"post_id":"cistop2qo0000hoinwkoveww1","tag_id":"cistop2qv0002hoing57bx1jd","_id":"cistop2r20006hoin016tm5me"},{"post_id":"cistop2qo0000hoinwkoveww1","tag_id":"cistop2qz0004hoinkm8jzytv","_id":"cistop2r30007hoinizunogko"},{"post_id":"cistop2t10008hoinibl64o6b","tag_id":"cistop2t4000ahoinx5se0u0s","_id":"cistop2th000lhoinsolyjaec"},{"post_id":"cistop2t10008hoinibl64o6b","tag_id":"cistop2t6000ehoinfkfwysyq","_id":"cistop2ti000mhoinn328w93l"},{"post_id":"cistop2t20009hoinq55tcrt8","tag_id":"cistop2t4000ahoinx5se0u0s","_id":"cistop2tk000phoin1o1wci9o"},{"post_id":"cistop2t4000choin03ge167g","tag_id":"cistop2t4000ahoinx5se0u0s","_id":"cistop2tl000shoinstsmuf8e"},{"post_id":"cistop2t6000fhoin6w6nyyvs","tag_id":"cistop2tk000qhoin4m4zcevx","_id":"cistop2tn000whoinxu5q1z5t"},{"post_id":"cistop2t9000hhoinrp1qu06c","tag_id":"cistop2tm000uhoindlsbttj6","_id":"cistop2tx001choinpsg6nev2"},{"post_id":"cistop2t9000hhoinrp1qu06c","tag_id":"cistop2to000yhoinnbo6o52o","_id":"cistop2ty001ehoingjoc4c03"},{"post_id":"cistop2t9000hhoinrp1qu06c","tag_id":"cistop2ts0012hoinsjz1cfpb","_id":"cistop2ty001hhoino5mhg0x5"},{"post_id":"cistop2t9000hhoinrp1qu06c","tag_id":"cistop2tv0016hoinh5kmltw6","_id":"cistop2u8001jhoin1ixhzyo4"},{"post_id":"cistop2tb000ihoinlge1piif","tag_id":"cistop2tx001ahoin8liszabl","_id":"cistop2u9001mhoindk2reerd"},{"post_id":"cistop2tb000ihoinlge1piif","tag_id":"cistop2ty001fhoin8olfsheb","_id":"cistop2u9001nhoiny1ks5akf"},{"post_id":"cistop2tb000ihoinlge1piif","tag_id":"cistop2tk000qhoin4m4zcevx","_id":"cistop2ua001ohoin9zssi0gq"},{"post_id":"cistop2uz001phoinejmtxlmc","tag_id":"cistop2v3001rhoinemgydrjf","_id":"cistop2vf0022hoinujiymiop"},{"post_id":"cistop2uz001phoinejmtxlmc","tag_id":"cistop2v7001vhoin97gwd2pc","_id":"cistop2vf0024hoin1zy6zpe5"},{"post_id":"cistop2v1001qhoin4nu0w2kk","tag_id":"cistop2v3001rhoinemgydrjf","_id":"cistop2vi002choinslaqp4p8"},{"post_id":"cistop2v1001qhoin4nu0w2kk","tag_id":"cistop2v7001vhoin97gwd2pc","_id":"cistop2vk002ehoin0ijt49qb"},{"post_id":"cistop2v4001shoinyu37uxov","tag_id":"cistop2vi0029hoinfoha1vs7","_id":"cistop2vm002lhoinhnseza4v"},{"post_id":"cistop2v4001shoinyu37uxov","tag_id":"cistop2vl002fhoinhajfolid","_id":"cistop2vn002ohoinntsmi0ze"},{"post_id":"cistop2v6001uhoiniaeciwl4","tag_id":"cistop2vm002jhoinlnnehuoc","_id":"cistop2vn002qhoin3zcwja8h"},{"post_id":"cistop2v7001whoindp9wbfgl","tag_id":"cistop2vn002phoinnuydssiw","_id":"cistop2vn002vhoin2xee3qxj"},{"post_id":"cistop2v7001whoindp9wbfgl","tag_id":"cistop2vn002rhoin920npj4z","_id":"cistop2vn002whoin4zn36jzg"},{"post_id":"cistop2vb001yhoin06vytq76","tag_id":"cistop2vn002uhoin352p1get","_id":"cistop2vo002xhoinzw2havej"},{"post_id":"cistpbmwc0000spin70doaad3","tag_id":"cistop2t4000ahoinx5se0u0s","_id":"cistphx3l0000u5inskx8biyh"},{"post_id":"cistpbmwc0000spin70doaad3","tag_id":"cistop2t6000ehoinfkfwysyq","_id":"cistphx3m0001u5inz5v7t7i5"},{"post_id":"cisvkwe360000uxinxi2krx90","tag_id":"cisvkwe3f0001uxin84uk4pb4","_id":"cisvkwe3r0005uxinhtknnoos"},{"post_id":"cisvkwe360000uxinxi2krx90","tag_id":"cistop2tk000qhoin4m4zcevx","_id":"cisvkwe3r0006uxinl41epo03"},{"post_id":"cisvkwe360000uxinxi2krx90","tag_id":"cisvkwe3p0003uxin7ggjqlfy","_id":"cisvkwe3r0007uxinogz7c57j"}],"Tag":[{"name":"春天","_id":"cistop2qv0002hoing57bx1jd"},{"name":"梅花","_id":"cistop2qz0004hoinkm8jzytv"},{"name":"hystrix","_id":"cistop2t4000ahoinx5se0u0s"},{"name":"Circuit Breaker","_id":"cistop2t6000ehoinfkfwysyq"},{"name":"微服务","_id":"cistop2tk000qhoin4m4zcevx"},{"name":"负载均衡","_id":"cistop2tm000uhoindlsbttj6"},{"name":"加权轮询","_id":"cistop2to000yhoinnbo6o52o"},{"name":"轮询","_id":"cistop2ts0012hoinsjz1cfpb"},{"name":"算法","_id":"cistop2tv0016hoinh5kmltw6"},{"name":"单一职责","_id":"cistop2tx001ahoin8liszabl"},{"name":"软件开发","_id":"cistop2ty001fhoin8olfsheb"},{"name":"FlatBuffers","_id":"cistop2v3001rhoinemgydrjf"},{"name":"序列化","_id":"cistop2v7001vhoin97gwd2pc"},{"name":"基准测试","_id":"cistop2vi0029hoinfoha1vs7"},{"name":"wrk","_id":"cistop2vl002fhoinhajfolid"},{"name":"Hexo","_id":"cistop2vm002jhoinlnnehuoc"},{"name":"领域模型","_id":"cistop2vn002phoinnuydssiw"},{"name":"DDD","_id":"cistop2vn002rhoin920npj4z"},{"name":"http 2.0","_id":"cistop2vn002uhoin352p1get"},{"name":"Feign","_id":"cisvkwe3f0001uxin84uk4pb4"},{"name":"Spring Cloud","_id":"cisvkwe3p0003uxin7ggjqlfy"}]}}